
UEB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b30  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  08011dd0  08011dd0  00021dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012490  08012490  00033c00  2**0
                  CONTENTS
  4 .ARM          00000000  08012490  08012490  00033c00  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012490  08012490  00033c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012490  08012490  00022490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012494  08012494  00022494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003c00  24000000  08012498  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000297c  24003c00  08016098  00033c00  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400657c  08016098  0003657c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00033c00  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ff3  00000000  00000000  00033c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aa4  00000000  00000000  00056c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  0005b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a50  00000000  00000000  0005d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e866  00000000  00000000  0005ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024cd5  00000000  00000000  0009d5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001783ef  00000000  00000000  000c22cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023a6ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008aac  00000000  00000000  0023a70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003c00 	.word	0x24003c00
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011db8 	.word	0x08011db8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003c04 	.word	0x24003c04
 80002dc:	08011db8 	.word	0x08011db8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	; 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_d2lz>:
 8000924:	b508      	push	{r3, lr}
 8000926:	4602      	mov	r2, r0
 8000928:	460b      	mov	r3, r1
 800092a:	ec43 2b17 	vmov	d7, r2, r3
 800092e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000936:	d403      	bmi.n	8000940 <__aeabi_d2lz+0x1c>
 8000938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800093c:	f000 b80c 	b.w	8000958 <__aeabi_d2ulz>
 8000940:	eeb1 7b47 	vneg.f64	d7, d7
 8000944:	ec51 0b17 	vmov	r0, r1, d7
 8000948:	f000 f806 	bl	8000958 <__aeabi_d2ulz>
 800094c:	4240      	negs	r0, r0
 800094e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000952:	bd08      	pop	{r3, pc}
 8000954:	0000      	movs	r0, r0
	...

08000958 <__aeabi_d2ulz>:
 8000958:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000988 <__aeabi_d2ulz+0x30>
 800095c:	ec41 0b17 	vmov	d7, r0, r1
 8000960:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000990 <__aeabi_d2ulz+0x38>
 8000964:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000968:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800096c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000970:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000974:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000978:	ee16 1a10 	vmov	r1, s12
 800097c:	ee17 0a90 	vmov	r0, s15
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	f3af 8000 	nop.w
 8000988:	00000000 	.word	0x00000000
 800098c:	3df00000 	.word	0x3df00000
 8000990:	00000000 	.word	0x00000000
 8000994:	41f00000 	.word	0x41f00000

08000998 <ADC_Start>:
	}
}


void ADC_Start (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	while (!(ADC1->ISR & ADC_ISR_ADRDY)) ;
 800099c:	bf00      	nop
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <ADC_Start+0x34>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0f9      	beq.n	800099e <ADC_Start+0x6>
	seqFlag = 0;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <ADC_Start+0x38>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
	bufferFlag = 0;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <ADC_Start+0x3c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;										// cleared by Hardware after Start
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <ADC_Start+0x34>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <ADC_Start+0x34>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6093      	str	r3, [r2, #8]
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40022000 	.word	0x40022000
 80009d0:	24003ec8 	.word	0x24003ec8
 80009d4:	24003ec4 	.word	0x24003ec4

080009d8 <ADCDMA_Init>:

void ADCDMA_Init (void)
 {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
 RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;								// Channel0
 80009dc:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <ADCDMA_Init+0xe8>)
 80009de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009e2:	4a37      	ldr	r2, [pc, #220]	; (8000ac0 <ADCDMA_Init+0xe8>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 DMA1_Stream0->CR &= ~DMA_SxCR_EN;
 80009ec:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <ADCDMA_Init+0xec>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <ADCDMA_Init+0xec>)
 80009f2:	f023 0301 	bic.w	r3, r3, #1
 80009f6:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR &= ~DMA_SxCR_MBURST;								// DMA_MemoryBurst = DMA_MemoryBurst_Single
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <ADCDMA_Init+0xec>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a31      	ldr	r2, [pc, #196]	; (8000ac4 <ADCDMA_Init+0xec>)
 80009fe:	f023 73c0 	bic.w	r3, r3, #25165824	; 0x1800000
 8000a02:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR &= ~DMA_SxCR_MSIZE;
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a0a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000a0e:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR |= DMA_SxCR_MSIZE_1;								// 10 DMA_MemoryDataSize 32 bit
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1a:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR |= DMA_SxCR_MINC;									// DMA_MemoryIncrement enable
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a26:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR &= ~DMA_SxCR_CIRC;								// DMA_Mode = DMA_Mode_Normal
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a32:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->PAR = (uint32_t)(&(ADC1->DR));						// DMA_PeripheralBaseAddr
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a36:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <ADCDMA_Init+0xf0>)
 8000a38:	609a      	str	r2, [r3, #8]
 DMA1_Stream0->CR &= ~DMA_SxCR_PBURST;								// DMA_PeripheralBurst = DMA_PeripheralBurst_Single
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a40:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8000a44:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR &= ~DMA_SxCR_PSIZE;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a4c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000a50:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR |= DMA_SxCR_PSIZE_1;								// 10 DMA_PeripheralDataSize 32 bit
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a5c:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR &= ~DMA_SxCR_PINC;								// DMA_PeripheralIncrement disable
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a68:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR &= ~DMA_SxCR_PL;									// priority 0 nur eine DMA
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a15      	ldr	r2, [pc, #84]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a70:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000a74:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR &= ~DMA_SxCR_DIR;									// DMA_DIR = DMA_DIR_PeripheralToMemory
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000a80:	6013      	str	r3, [r2, #0]
 DMA1_Stream0->CR |= DMA_SxCR_TCIE;									// transfer complete Interrupt enable
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	6013      	str	r3, [r2, #0]
 DMAMUX1_Channel0->CCR = 0x00000009;								// Channel0 ADC1
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <ADCDMA_Init+0xf4>)
 8000a90:	2209      	movs	r2, #9
 8000a92:	601a      	str	r2, [r3, #0]
 //DMA1_Stream0->NDTR = 3;											// DMA_BufferSize for every sequence
 DMA1_Stream0->NDTR = 300;	 										// DMA_BufferSize for full Buffer
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a9a:	605a      	str	r2, [r3, #4]
 DMA1_Stream0->M0AR = (uint32_t)(&(buffer[0][0]));					// DMA_Memory0BaseAddr
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <ADCDMA_Init+0xf8>)
 8000aa0:	60da      	str	r2, [r3, #12]
 DMA1->LIFCR = DMA_LIFCR_CTCIF0;
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <ADCDMA_Init+0xfc>)
 8000aa4:	2220      	movs	r2, #32
 8000aa6:	609a      	str	r2, [r3, #8]
 DMA1_Stream0->CR |= DMA_SxCR_EN; 									// Enable the DMA
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <ADCDMA_Init+0xec>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6013      	str	r3, [r2, #0]
 HAL_NVIC_EnableIRQ (DMA1_Stream0_IRQn);
 8000ab4:	200b      	movs	r0, #11
 8000ab6:	f004 fa34 	bl	8004f22 <HAL_NVIC_EnableIRQ>
 }
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	40020010 	.word	0x40020010
 8000ac8:	40022040 	.word	0x40022040
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	24003ecc 	.word	0x24003ecc
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <ADC_Init>:

void ADC_Init (void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	ADCDMA_Init ();
 8000adc:	f7ff ff7c 	bl	80009d8 <ADCDMA_Init>
	ADC1->CR &= ~ADC_CR_ADEN;
 8000ae0:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <ADC_Init+0x18c>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4a5f      	ldr	r2, [pc, #380]	; (8000c64 <ADC_Init+0x18c>)
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	6093      	str	r3, [r2, #8]
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIOAEN;							// enable clock for GPIO PA4 und PA6 ADC1 Channel 3 und 18
 8000aec:	4b5e      	ldr	r3, [pc, #376]	; (8000c68 <ADC_Init+0x190>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a5d      	ldr	r2, [pc, #372]	; (8000c68 <ADC_Init+0x190>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIOCEN;							// enable clock for GPIO PC4 ADC1 Channel 4
 8000afc:	4b5a      	ldr	r3, [pc, #360]	; (8000c68 <ADC_Init+0x190>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	4a59      	ldr	r2, [pc, #356]	; (8000c68 <ADC_Init+0x190>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	RCC->AHB1ENR |= RCC_AHB1ENR_ADC12EN;              				// enable clock for ADC1
 8000b0c:	4b56      	ldr	r3, [pc, #344]	; (8000c68 <ADC_Init+0x190>)
 8000b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b12:	4a55      	ldr	r2, [pc, #340]	; (8000c68 <ADC_Init+0x190>)
 8000b14:	f043 0320 	orr.w	r3, r3, #32
 8000b18:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	GPIOA->MODER |= 0x00003300;										// pin PA4 und PA6 analog Input
 8000b1c:	4b53      	ldr	r3, [pc, #332]	; (8000c6c <ADC_Init+0x194>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a52      	ldr	r2, [pc, #328]	; (8000c6c <ADC_Init+0x194>)
 8000b22:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8000b26:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= 0xFFFF00FF;        								// pin PA4 und PA6 no pull-up, no pull-down
 8000b28:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <ADC_Init+0x194>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	4a4f      	ldr	r2, [pc, #316]	; (8000c6c <ADC_Init+0x194>)
 8000b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b32:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER |= 0x00000300;                       				// pin PC4 analog Input
 8000b34:	4b4e      	ldr	r3, [pc, #312]	; (8000c70 <ADC_Init+0x198>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a4d      	ldr	r2, [pc, #308]	; (8000c70 <ADC_Init+0x198>)
 8000b3a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000b3e:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= 0xFFFFF0FF;        								// pin PC4 no pull-up, no pull-down
 8000b40:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <ADC_Init+0x198>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	4a4a      	ldr	r2, [pc, #296]	; (8000c70 <ADC_Init+0x198>)
 8000b46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b4a:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR &= ~ADC_CFGR_RES;									// 00: 16 bit resolution
 8000b4c:	4b45      	ldr	r3, [pc, #276]	; (8000c64 <ADC_Init+0x18c>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4a44      	ldr	r2, [pc, #272]	; (8000c64 <ADC_Init+0x18c>)
 8000b52:	f023 031c 	bic.w	r3, r3, #28
 8000b56:	60d3      	str	r3, [r2, #12]
	//ADC1->CFGR |= ADC_CFGR_DISCEN;								// 1: discontinuous regular mode
	ADC1->CFGR &= ~ADC_CFGR_DISCEN;
 8000b58:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <ADC_Init+0x18c>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4a41      	ldr	r2, [pc, #260]	; (8000c64 <ADC_Init+0x18c>)
 8000b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b62:	60d3      	str	r3, [r2, #12]
	//ADC1->CFGR &= ~ADC_CFGR_CONT;
	ADC1->CFGR |= ADC_CFGR_CONT;									// continuous mode
 8000b64:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <ADC_Init+0x18c>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	4a3e      	ldr	r2, [pc, #248]	; (8000c64 <ADC_Init+0x18c>)
 8000b6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b6e:	60d3      	str	r3, [r2, #12]
	//ADC1->IER |= ADC_IER_EOCIE;									// Interrupt conversion is complete
	//ADC1->IER |= ADC_IER_EOSIE;									// Interrupt sequence is complete
	ADC1->IER |= ADC_IER_AWD1IE;	 								// Watchdog 1 interrupt enable
 8000b70:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <ADC_Init+0x18c>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	4a3b      	ldr	r2, [pc, #236]	; (8000c64 <ADC_Init+0x18c>)
 8000b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7a:	6053      	str	r3, [r2, #4]

	WDHTR = overCurrentThreshold/amperePerDigits-bufferCalibrated1;
 8000b7c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000b80:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <ADC_Init+0x19c>)
 8000b82:	edd3 7a00 	vldr	s15, [r3]
 8000b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <ADC_Init+0x1a0>)
 8000b8c:	edd3 7a00 	vldr	s15, [r3]
 8000b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b98:	ee17 2a90 	vmov	r2, s15
 8000b9c:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <ADC_Init+0x1a4>)
 8000b9e:	601a      	str	r2, [r3, #0]

	ADC1->HTR1 = WDHTR;	 											// Watchdog 1 high threshold
 8000ba0:	4a30      	ldr	r2, [pc, #192]	; (8000c64 <ADC_Init+0x18c>)
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <ADC_Init+0x1a4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6253      	str	r3, [r2, #36]	; 0x24
	ADC1->CFGR |= ADC_CFGR_AWD1EN;									// Watchdog 1 enable
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <ADC_Init+0x18c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a2d      	ldr	r2, [pc, #180]	; (8000c64 <ADC_Init+0x18c>)
 8000bae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bb2:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR &= ~ADC_CFGR_EXTEN;									// 00: extern Trigger disabled
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <ADC_Init+0x18c>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4a2a      	ldr	r2, [pc, #168]	; (8000c64 <ADC_Init+0x18c>)
 8000bba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000bbe:	60d3      	str	r3, [r2, #12]
	//ADC1->CFGR &= ~ADC_CFGR_DMNGT;								// 00: no DMA
	ADC1->CFGR |= ADC_CFGR_DMNGT;									// 11: DMA cicular mode
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <ADC_Init+0x18c>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <ADC_Init+0x18c>)
 8000bc6:	f043 0303 	orr.w	r3, r3, #3
 8000bca:	60d3      	str	r3, [r2, #12]
	//ADC1->CFGR |= ADC_CFGR_DMNGT_0;								// 01: DMA one shot
	ADC1->CFGR |= ADC_CFGR_OVRMOD;									// 1: last conversation
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <ADC_Init+0x18c>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <ADC_Init+0x18c>)
 8000bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd6:	60d3      	str	r3, [r2, #12]
	ADC1->IER &= ~ADC_IER_OVRIE;									// overrun Interrupt disabled
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <ADC_Init+0x18c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <ADC_Init+0x18c>)
 8000bde:	f023 0310 	bic.w	r3, r3, #16
 8000be2:	6053      	str	r3, [r2, #4]
	ADC1->SMPR2 = 0x00004800;										// 100: 32 cycles sampling time 32 cicles for Channel 3 und 4
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <ADC_Init+0x18c>)
 8000be6:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000bea:	619a      	str	r2, [r3, #24]
	ADC1->SMPR2 |= 0x04000000;										// 100: 32 cycles sampling time 32 cicles for Channel 18
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <ADC_Init+0x18c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <ADC_Init+0x18c>)
 8000bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bf6:	6193      	str	r3, [r2, #24]
	//ADC1->PCSEL = 0x00000010;
	ADC1->PCSEL = 0x00040018;										// preselect Channel 4, 3, 18
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <ADC_Init+0x18c>)
 8000bfa:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <ADC_Init+0x1a8>)
 8000bfc:	61da      	str	r2, [r3, #28]
	//ADC1->SQR1 = 0x00000100;
	ADC1->SQR1 = 0x00483102;										// Channel sequence assign to Channel 4, 3, 18
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <ADC_Init+0x18c>)
 8000c00:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <ADC_Init+0x1ac>)
 8000c02:	631a      	str	r2, [r3, #48]	; 0x30
	ADC12_COMMON->CCR &= ~ADC_CCR_PRESC;							// ADCLK not divided
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <ADC_Init+0x1b0>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <ADC_Init+0x1b0>)
 8000c0a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000c0e:	6093      	str	r3, [r2, #8]
	ADC12_COMMON->CCR |= 0x002C0000;								// ADCLK Clock div 256
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <ADC_Init+0x1b0>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <ADC_Init+0x1b0>)
 8000c16:	f443 1330 	orr.w	r3, r3, #2883584	; 0x2c0000
 8000c1a:	6093      	str	r3, [r2, #8]
	//ADC12_COMMON->CCR |= 0x00240000;								// ADCLK Clock div 64
	ADC1->CR &= ~ADC_CR_DEEPPWD;									// no ADC power down
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <ADC_Init+0x18c>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <ADC_Init+0x18c>)
 8000c22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000c26:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <ADC_Init+0x18c>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <ADC_Init+0x18c>)
 8000c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c32:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & 0x00001000)) ;
 8000c34:	bf00      	nop
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <ADC_Init+0x18c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f9      	beq.n	8000c36 <ADC_Init+0x15e>
	ADC12_COMMON->CCR |= ADC_CCR_VREFEN;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <ADC_Init+0x1b0>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <ADC_Init+0x1b0>)
 8000c48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c4c:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADEN;										// AD Converter on
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <ADC_Init+0x18c>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <ADC_Init+0x18c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6093      	str	r3, [r2, #8]
	HAL_NVIC_EnableIRQ (ADC_IRQn);
 8000c5a:	2012      	movs	r0, #18
 8000c5c:	f004 f961 	bl	8004f22 <HAL_NVIC_EnableIRQ>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40022000 	.word	0x40022000
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	58020000 	.word	0x58020000
 8000c70:	58020800 	.word	0x58020800
 8000c74:	2400001c 	.word	0x2400001c
 8000c78:	24000020 	.word	0x24000020
 8000c7c:	24003ebc 	.word	0x24003ebc
 8000c80:	00040018 	.word	0x00040018
 8000c84:	00483102 	.word	0x00483102
 8000c88:	40022300 	.word	0x40022300

08000c8c <setParameters>:


void setParameters(UEB_StatusType *ueb_status)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(ueb_status->status == UEB_INIT_FINISH) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d12f      	bne.n	8000cfc <setParameters+0x70>
		frequency = ueb_status->frequency;				//enter frequency of the 3-phase sine (range of values: 0.1Hz to 200Hz)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <setParameters+0x7c>)
 8000ca2:	6013      	str	r3, [r2, #0]
		v_bridge_uf = ueb_status->vccvoltage;			//enter the voltage that applies at "u_brueke_uf" (range of values: 10V to 60V)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <setParameters+0x80>)
 8000caa:	6013      	str	r3, [r2, #0]
		voltage_ref = ueb_status->outvoltage;				//enter your preferred voltage for the amplitude of the sine (range of Values: 1V to 0.95*"v_bridge_uf")
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <setParameters+0x84>)
 8000cb2:	6013      	str	r3, [r2, #0]
		rotationDirectionCW = ueb_status->rotationdirection;		//enter the direction of rotation, true -> clockwise; false -> counterclockwise
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bf14      	ite	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	2300      	moveq	r3, #0
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <setParameters+0x88>)
 8000cc6:	701a      	strb	r2, [r3, #0]
		enableThirdHarmonic = ueb_status->thirdharmonic;	    //enter true, if you want to enable the third harmonic mode
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7c1b      	ldrb	r3, [r3, #16]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf14      	ite	ne
 8000cd0:	2301      	movne	r3, #1
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <setParameters+0x8c>)
 8000cd8:	701a      	strb	r2, [r3, #0]
		enableSoftstarter = ueb_status->softstart;		//enter true, if you want the motor to start slowly
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7c5b      	ldrb	r3, [r3, #17]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <setParameters+0x90>)
 8000cea:	701a      	strb	r2, [r3, #0]
		softstarterDuration = ueb_status->softstartduration;		//enter duration of the softstarter ramp in seconds
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <setParameters+0x94>)
 8000cf2:	6013      	str	r3, [r2, #0]
	//	overCurrentThreshold = ueb_status->maxcurrent; 		//enter the allowed current in ampere (range of values: 0 to 10 Ampere)
		numberOfAveragedValues = ueb_status->averagenum;    //enter by how many current values you want to calculate the average
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <setParameters+0x98>)
 8000cfa:	6013      	str	r3, [r2, #0]
	//	pwmFrequency = ueb_status->pwmfrequency;
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	24000000 	.word	0x24000000
 8000d0c:	24000004 	.word	0x24000004
 8000d10:	24000008 	.word	0x24000008
 8000d14:	24003e94 	.word	0x24003e94
 8000d18:	2400000c 	.word	0x2400000c
 8000d1c:	24003e95 	.word	0x24003e95
 8000d20:	24000010 	.word	0x24000010
 8000d24:	24000014 	.word	0x24000014

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b092      	sub	sp, #72	; 0x48
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Create EventQueues for priority run of the application
  EventQueue* Q_USB 				= EventQueue_Init();
 8000d2e:	f00b fcdd 	bl	800c6ec <EventQueue_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	63bb      	str	r3, [r7, #56]	; 0x38
  EventQueue* Q_DataTransmission 	= EventQueue_Init();
 8000d36:	f00b fcd9 	bl	800c6ec <EventQueue_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
  EventQueue* Q_Main 				= EventQueue_Init();
 8000d3e:	f00b fcd5 	bl	800c6ec <EventQueue_Init>
 8000d42:	6478      	str	r0, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d44:	f002 feec 	bl	8003b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d48:	f000 f8e8 	bl	8000f1c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4c:	f000 fcf4 	bl	8001738 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d50:	f000 fae6 	bl	8001320 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d54:	f000 fbaa 	bl	80014ac <MX_TIM2_Init>
  MX_TIM4_Init();
 8000d58:	f000 fc48 	bl	80015ec <MX_TIM4_Init>
  MX_ADC1_Init();
 8000d5c:	f000 f9f2 	bl	8001144 <MX_ADC1_Init>
  MX_IWDG1_Init();
 8000d60:	f000 fa6a 	bl	8001238 <MX_IWDG1_Init>
  MX_TIM5_Init();
 8000d64:	f000 fc92 	bl	800168c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000d68:	f000 fbf0 	bl	800154c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000d6c:	f00d f93a 	bl	800dfe4 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8000d70:	f000 fa80 	bl	8001274 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);	//LED 3 turned on to see system resets in case of IWDG1(Watchdog)
 8000d74:	2201      	movs	r2, #1
 8000d76:	2104      	movs	r1, #4
 8000d78:	485f      	ldr	r0, [pc, #380]	; (8000ef8 <main+0x1d0>)
 8000d7a:	f004 fab5 	bl	80052e8 <HAL_GPIO_WritePin>
  error = 3;
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <main+0x1d4>)
 8000d80:	2203      	movs	r2, #3
 8000d82:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);					//Start TIM4
 8000d84:	485e      	ldr	r0, [pc, #376]	; (8000f00 <main+0x1d8>)
 8000d86:	f008 fdab 	bl	80098e0 <HAL_TIM_Base_Start_IT>


  HAL_TIM_Base_Start_IT(&htim2);					//Start TIM2
 8000d8a:	485e      	ldr	r0, [pc, #376]	; (8000f04 <main+0x1dc>)
 8000d8c:	f008 fda8 	bl	80098e0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start_IT(&htim3);					//Start TIM3
 8000d90:	485d      	ldr	r0, [pc, #372]	; (8000f08 <main+0x1e0>)
 8000d92:	f008 fda5 	bl	80098e0 <HAL_TIM_Base_Start_IT>
//  for ( int i = 0;  i < 50; ++ i) //1195		//Wait for a certain amount of microseconds
//  {
//	  //empty loop, to adjust the phase of Tim1 to Tim2
//  }
  //Starting Tim1 means starting the PWM Timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		//Start TIM1_Channel1_positive
 8000d96:	2100      	movs	r1, #0
 8000d98:	485c      	ldr	r0, [pc, #368]	; (8000f0c <main+0x1e4>)
 8000d9a:	f008 fe39 	bl	8009a10 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);	//Start TIM1_Channel1_negative
 8000d9e:	2100      	movs	r1, #0
 8000da0:	485a      	ldr	r0, [pc, #360]	; (8000f0c <main+0x1e4>)
 8000da2:	f009 ffbd 	bl	800ad20 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		//Start TIM1_Channel2_positive
 8000da6:	2104      	movs	r1, #4
 8000da8:	4858      	ldr	r0, [pc, #352]	; (8000f0c <main+0x1e4>)
 8000daa:	f008 fe31 	bl	8009a10 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);  //Start TIM1_Channel2_negative
 8000dae:	2104      	movs	r1, #4
 8000db0:	4856      	ldr	r0, [pc, #344]	; (8000f0c <main+0x1e4>)
 8000db2:	f009 ffb5 	bl	800ad20 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		//Start TIM1_Channel3_positive
 8000db6:	2108      	movs	r1, #8
 8000db8:	4854      	ldr	r0, [pc, #336]	; (8000f0c <main+0x1e4>)
 8000dba:	f008 fe29 	bl	8009a10 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);  //Start TIM1_Channel3_negative
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4852      	ldr	r0, [pc, #328]	; (8000f0c <main+0x1e4>)
 8000dc2:	f009 ffad 	bl	800ad20 <HAL_TIMEx_PWMN_Start>


  ADC_Init ();									//Initialise own ADC
 8000dc6:	f7ff fe87 	bl	8000ad8 <ADC_Init>
  ADC_Start();									//Start own ADC
 8000dca:	f7ff fde5 	bl	8000998 <ADC_Start>


  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0); //LED 3 gets turned off again to see whether the system resets in case of IWDG1(Watchdog)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <main+0x1d0>)
 8000dd4:	f004 fa88 	bl	80052e8 <HAL_GPIO_WritePin>
  error = 0;
 8000dd8:	4b48      	ldr	r3, [pc, #288]	; (8000efc <main+0x1d4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000dde:	213c      	movs	r1, #60	; 0x3c
 8000de0:	484b      	ldr	r0, [pc, #300]	; (8000f10 <main+0x1e8>)
 8000de2:	f008 ff8d 	bl	8009d00 <HAL_TIM_Encoder_Start>

  //Wechselberger Kirchhoff below
  UEB_StatusType uebstatus = {
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2228      	movs	r2, #40	; 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f00d ff06 	bl	800ec00 <memset>
 8000df4:	2303      	movs	r3, #3
 8000df6:	733b      	strb	r3, [r7, #12]
 8000df8:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <main+0x1ec>)
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000e0c:	623b      	str	r3, [r7, #32]
 8000e0e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
 8000e14:	2314      	movs	r3, #20
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  getNewStatus(&uebstatus);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fce3 	bl	80037e8 <getNewStatus>
	  setParameters(&uebstatus);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff30 	bl	8000c8c <setParameters>

	  // Main Queue - Priority 1
	  if(Q_Main != NULL){
 8000e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00d      	beq.n	8000e4e <main+0x126>
		  Event evt = getEvent(Q_Main);
 8000e32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000e34:	f00b fc8b 	bl	800c74e <getEvent>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	813b      	strh	r3, [r7, #8]
		  switch(evt.source){
 8000e3c:	7a7b      	ldrb	r3, [r7, #9]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <main+0x120>
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d002      	beq.n	8000e4c <main+0x124>
		  case 1:

			  break;

		  default:
			  break;
 8000e46:	e002      	b.n	8000e4e <main+0x126>
			  break;
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <main+0x126>
			  break;
 8000e4c:	bf00      	nop
		  }
	  }
	  // USB - Queue Priority 2
	  if(Q_USB != NULL){
 8000e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00e      	beq.n	8000e72 <main+0x14a>
		  Event evt = getEvent(Q_USB);
 8000e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e56:	4618      	mov	r0, r3
 8000e58:	f00b fc79 	bl	800c74e <getEvent>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	80bb      	strh	r3, [r7, #4]
		  switch(evt.source){
 8000e60:	797b      	ldrb	r3, [r7, #5]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <main+0x144>
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d002      	beq.n	8000e70 <main+0x148>
		  case 1:

			  break;

		  default:
			  break;
 8000e6a:	e002      	b.n	8000e72 <main+0x14a>
			  break;
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <main+0x14a>
			  break;
 8000e70:	bf00      	nop
		  }
	  }
	  // Data Transmission - Queue Priority 3
	  if(Q_DataTransmission != NULL){
 8000e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d025      	beq.n	8000ec4 <main+0x19c>
		  Event evt = getEvent(Q_DataTransmission);
 8000e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00b fc67 	bl	800c74e <getEvent>
 8000e80:	4603      	mov	r3, r0
 8000e82:	803b      	strh	r3, [r7, #0]
		  DT_status status;
		  switch(evt.source){
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d01b      	beq.n	8000ec2 <main+0x19a>
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d000      	beq.n	8000e90 <main+0x168>
				 DT_main();
				 break;
			 }
			  break;
		  default:
			  break;
 8000e8e:	e019      	b.n	8000ec4 <main+0x19c>
			 status = DT_Start();
 8000e90:	f002 fd32 	bl	80038f8 <DT_Start>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			 switch(status){
 8000e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10b      	bne.n	8000eba <main+0x192>
				 evt.class = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	703b      	strb	r3, [r7, #0]
				 evt.source  =0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	707b      	strb	r3, [r7, #1]
				 addEvent(&Q_USB, &evt);
 8000eaa:	463a      	mov	r2, r7
 8000eac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00b fc26 	bl	800c704 <addEvent>
				 break;
 8000eb8:	e002      	b.n	8000ec0 <main+0x198>
				 DT_main();
 8000eba:	f002 fd31 	bl	8003920 <DT_main>
				 break;
 8000ebe:	bf00      	nop
			  break;
 8000ec0:	e000      	b.n	8000ec4 <main+0x19c>
			  break;
 8000ec2:	bf00      	nop
		  }
	  }

	  // if button pressed run dataset
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <main+0x1f0>)
 8000eca:	f004 f9f5 	bl	80052b8 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d1a1      	bne.n	8000e18 <main+0xf0>
		  Event *evt = malloc (sizeof(Event));
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f00d fe75 	bl	800ebc4 <malloc>
 8000eda:	4603      	mov	r3, r0
 8000edc:	63fb      	str	r3, [r7, #60]	; 0x3c
		  (*evt).class = 0;
 8000ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
		  (*evt).source = 0;
 8000ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	705a      	strb	r2, [r3, #1]

		  addEvent(&Q_DataTransmission, evt);
 8000eea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00b fc07 	bl	800c704 <addEvent>
	  getNewStatus(&uebstatus);
 8000ef6:	e78f      	b.n	8000e18 <main+0xf0>
 8000ef8:	58021400 	.word	0x58021400
 8000efc:	24003ec0 	.word	0x24003ec0
 8000f00:	24003dfc 	.word	0x24003dfc
 8000f04:	24003d64 	.word	0x24003d64
 8000f08:	24003db0 	.word	0x24003db0
 8000f0c:	24003d18 	.word	0x24003d18
 8000f10:	24003e48 	.word	0x24003e48
 8000f14:	41200000 	.word	0x41200000
 8000f18:	58020800 	.word	0x58020800

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0cc      	sub	sp, #304	; 0x130
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f26:	224c      	movs	r2, #76	; 0x4c
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f00d fe68 	bl	800ec00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f34:	2220      	movs	r2, #32
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00d fe61 	bl	800ec00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f46:	4618      	mov	r0, r3
 8000f48:	23bc      	movs	r3, #188	; 0xbc
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	f00d fe57 	bl	800ec00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f52:	2002      	movs	r0, #2
 8000f54:	f005 fc38 	bl	80067c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	4b74      	ldr	r3, [pc, #464]	; (8001138 <SystemClock_Config+0x21c>)
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	4a73      	ldr	r2, [pc, #460]	; (8001138 <SystemClock_Config+0x21c>)
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f70:	4b71      	ldr	r3, [pc, #452]	; (8001138 <SystemClock_Config+0x21c>)
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	f003 0201 	and.w	r2, r3, #1
 8000f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	4b6e      	ldr	r3, [pc, #440]	; (800113c <SystemClock_Config+0x220>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f8a:	4a6c      	ldr	r2, [pc, #432]	; (800113c <SystemClock_Config+0x220>)
 8000f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b6a      	ldr	r3, [pc, #424]	; (800113c <SystemClock_Config+0x220>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fac:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fae:	bf00      	nop
 8000fb0:	4b62      	ldr	r3, [pc, #392]	; (800113c <SystemClock_Config+0x220>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fbc:	d1f8      	bne.n	8000fb0 <SystemClock_Config+0x94>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000fbe:	4b60      	ldr	r3, [pc, #384]	; (8001140 <SystemClock_Config+0x224>)
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	4a5f      	ldr	r2, [pc, #380]	; (8001140 <SystemClock_Config+0x224>)
 8000fc4:	f023 0303 	bic.w	r3, r3, #3
 8000fc8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000fca:	232a      	movs	r3, #42	; 0x2a
 8000fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd6:	2340      	movs	r3, #64	; 0x40
 8000fd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000ffa:	231e      	movs	r3, #30
 8000ffc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001012:	230c      	movs	r3, #12
 8001014:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fc17 	bl	800685c <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001034:	f000 fcc8 	bl	80019c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	233f      	movs	r3, #63	; 0x3f
 800103a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	2303      	movs	r3, #3
 8001040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800104a:	2308      	movs	r3, #8
 800104c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001050:	2340      	movs	r3, #64	; 0x40
 8001052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001068:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f006 f802 	bl	8007078 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x162>
  {
    Error_Handler();
 800107a:	f000 fca5 	bl	80019c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_ADC
 800107e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001082:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001086:	f44f 2241 	mov.w	r2, #790528	; 0xc1000
 800108a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800108c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001090:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001094:	2204      	movs	r2, #4
 8001096:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800109c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010a0:	220a      	movs	r2, #10
 80010a2:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80010a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010ac:	2201      	movs	r2, #1
 80010ae:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010b8:	2202      	movs	r2, #2
 80010ba:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010c4:	2202      	movs	r2, #2
 80010c6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010d0:	22c0      	movs	r2, #192	; 0xc0
 80010d2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80010d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010dc:	2220      	movs	r2, #32
 80010de:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010f4:	2200      	movs	r2, #0
 80010f6:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80010f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001100:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800110c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001110:	2200      	movs	r2, #0
 8001112:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4618      	mov	r0, r3
 800111c:	f006 fb0c 	bl	8007738 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x20e>
  {
    Error_Handler();
 8001126:	f000 fc4f 	bl	80019c8 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800112a:	f005 fb87 	bl	800683c <HAL_PWREx_EnableUSBVoltageDetector>
}
 800112e:	bf00      	nop
 8001130:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	58000400 	.word	0x58000400
 800113c:	58024800 	.word	0x58024800
 8001140:	58024400 	.word	0x58024400

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <MX_ADC1_Init+0xe8>)
 800116a:	4a31      	ldr	r2, [pc, #196]	; (8001230 <MX_ADC1_Init+0xec>)
 800116c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <MX_ADC1_Init+0xe8>)
 8001170:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001174:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_ADC1_Init+0xe8>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_ADC1_Init+0xe8>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_ADC1_Init+0xe8>)
 8001184:	2204      	movs	r2, #4
 8001186:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <MX_ADC1_Init+0xe8>)
 800118a:	2200      	movs	r2, #0
 800118c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <MX_ADC1_Init+0xe8>)
 8001190:	2200      	movs	r2, #0
 8001192:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <MX_ADC1_Init+0xe8>)
 8001196:	2201      	movs	r2, #1
 8001198:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <MX_ADC1_Init+0xe8>)
 800119c:	2200      	movs	r2, #0
 800119e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <MX_ADC1_Init+0xe8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <MX_ADC1_Init+0xe8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_ADC1_Init+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_ADC1_Init+0xe8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_ADC1_Init+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_ADC1_Init+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c6:	4819      	ldr	r0, [pc, #100]	; (800122c <MX_ADC1_Init+0xe8>)
 80011c8:	f002 fef8 	bl	8003fbc <HAL_ADC_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011d2:	f000 fbf9 	bl	80019c8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4812      	ldr	r0, [pc, #72]	; (800122c <MX_ADC1_Init+0xe8>)
 80011e2:	f003 fccf 	bl	8004b84 <HAL_ADCEx_MultiModeConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011ec:	f000 fbec 	bl	80019c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_ADC1_Init+0xf0>)
 80011f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f4:	2306      	movs	r3, #6
 80011f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001200:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001202:	2304      	movs	r3, #4
 8001204:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_ADC1_Init+0xe8>)
 8001214:	f003 f872 	bl	80042fc <HAL_ADC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800121e:	f000 fbd3 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	24003c1c 	.word	0x24003c1c
 8001230:	40022000 	.word	0x40022000
 8001234:	10c00010 	.word	0x10c00010

08001238 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_IWDG1_Init+0x34>)
 800123e:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <MX_IWDG1_Init+0x38>)
 8001240:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_IWDG1_Init+0x34>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 799;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_IWDG1_Init+0x34>)
 800124a:	f240 321f 	movw	r2, #799	; 0x31f
 800124e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 799;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_IWDG1_Init+0x34>)
 8001252:	f240 321f 	movw	r2, #799	; 0x31f
 8001256:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_IWDG1_Init+0x34>)
 800125a:	f004 f883 	bl	8005364 <HAL_IWDG_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001264:	f000 fbb0 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	24003c80 	.word	0x24003c80
 8001270:	58004800 	.word	0x58004800

08001274 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <MX_SPI2_Init+0xa4>)
 800127a:	4a28      	ldr	r2, [pc, #160]	; (800131c <MX_SPI2_Init+0xa8>)
 800127c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <MX_SPI2_Init+0xa4>)
 8001280:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001284:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <MX_SPI2_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_SPI2_Init+0xa4>)
 800128e:	2203      	movs	r2, #3
 8001290:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_SPI2_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_SPI2_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_SPI2_Init+0xa4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_SPI2_Init+0xa4>)
 8001304:	f008 f982 	bl	800960c <HAL_SPI_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800130e:	f000 fb5b 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	24003c90 	.word	0x24003c90
 800131c:	40003800 	.word	0x40003800

08001320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b09a      	sub	sp, #104	; 0x68
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001340:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	222c      	movs	r2, #44	; 0x2c
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f00d fc50 	bl	800ec00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001360:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001362:	4a50      	ldr	r2, [pc, #320]	; (80014a4 <MX_TIM1_Init+0x184>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001366:	4b4e      	ldr	r3, [pc, #312]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800136c:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <MX_TIM1_Init+0x180>)
 800136e:	2220      	movs	r2, #32
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = counterperiod_TIM1;
 8001372:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <MX_TIM1_Init+0x188>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a4a      	ldr	r2, [pc, #296]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001378:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <MX_TIM1_Init+0x180>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001386:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138c:	4844      	ldr	r0, [pc, #272]	; (80014a0 <MX_TIM1_Init+0x180>)
 800138e:	f008 fa50 	bl	8009832 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001398:	f000 fb16 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a6:	4619      	mov	r1, r3
 80013a8:	483d      	ldr	r0, [pc, #244]	; (80014a0 <MX_TIM1_Init+0x180>)
 80013aa:	f008 ff67 	bl	800a27c <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013b4:	f000 fb08 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b8:	4839      	ldr	r0, [pc, #228]	; (80014a0 <MX_TIM1_Init+0x180>)
 80013ba:	f008 fac7 	bl	800994c <HAL_TIM_PWM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013c4:	f000 fb00 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013d8:	4619      	mov	r1, r3
 80013da:	4831      	ldr	r0, [pc, #196]	; (80014a0 <MX_TIM1_Init+0x180>)
 80013dc:	f009 fd20 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013e6:	f000 faef 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ea:	2360      	movs	r3, #96	; 0x60
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	4824      	ldr	r0, [pc, #144]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001410:	f008 fe24 	bl	800a05c <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800141a:	f000 fad5 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800141e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001422:	2204      	movs	r2, #4
 8001424:	4619      	mov	r1, r3
 8001426:	481e      	ldr	r0, [pc, #120]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001428:	f008 fe18 	bl	800a05c <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001432:	f000 fac9 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800143a:	2208      	movs	r2, #8
 800143c:	4619      	mov	r1, r3
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001440:	f008 fe0c 	bl	800a05c <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800144a:	f000 fabd 	bl	80019c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001466:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001484:	f009 fd54 	bl	800af30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800148e:	f000 fa9b 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM1_Init+0x180>)
 8001494:	f000 fc56 	bl	8001d44 <HAL_TIM_MspPostInit>

}
 8001498:	bf00      	nop
 800149a:	3768      	adds	r7, #104	; 0x68
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	24003d18 	.word	0x24003d18
 80014a4:	40010000 	.word	0x40010000
 80014a8:	2400002c 	.word	0x2400002c

080014ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_TIM2_Init+0x98>)
 80014cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_TIM2_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_TIM2_Init+0x98>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = counterperiod_TIM2;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_TIM2_Init+0x9c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a18      	ldr	r2, [pc, #96]	; (8001544 <MX_TIM2_Init+0x98>)
 80014e4:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_TIM2_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_TIM2_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <MX_TIM2_Init+0x98>)
 80014f4:	f008 f99d 	bl	8009832 <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014fe:	f000 fa63 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_TIM2_Init+0x98>)
 8001510:	f008 feb4 	bl	800a27c <HAL_TIM_ConfigClockSource>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800151a:	f000 fa55 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_TIM2_Init+0x98>)
 800152c:	f009 fc78 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001536:	f000 fa47 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24003d64 	.word	0x24003d64
 8001548:	24000030 	.word	0x24000030

0800154c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_TIM3_Init+0x94>)
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <MX_TIM3_Init+0x98>)
 800156e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_TIM3_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_TIM3_Init+0x94>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = counterperiod_TIM3;
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_TIM3_Init+0x9c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <MX_TIM3_Init+0x94>)
 8001582:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_TIM3_Init+0x94>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_TIM3_Init+0x94>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <MX_TIM3_Init+0x94>)
 8001592:	f008 f94e 	bl	8009832 <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800159c:	f000 fa14 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_TIM3_Init+0x94>)
 80015ae:	f008 fe65 	bl	800a27c <HAL_TIM_ConfigClockSource>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015b8:	f000 fa06 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_TIM3_Init+0x94>)
 80015ca:	f009 fc29 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015d4:	f000 f9f8 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24003db0 	.word	0x24003db0
 80015e4:	40000400 	.word	0x40000400
 80015e8:	24000034 	.word	0x24000034

080015ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_TIM4_Init+0x94>)
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <MX_TIM4_Init+0x98>)
 800160e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_TIM4_Init+0x94>)
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_TIM4_Init+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = counterperiod_TIM4;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_TIM4_Init+0x9c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <MX_TIM4_Init+0x94>)
 8001622:	60d3      	str	r3, [r2, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_TIM4_Init+0x94>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_TIM4_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <MX_TIM4_Init+0x94>)
 8001632:	f008 f8fe 	bl	8009832 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800163c:	f000 f9c4 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_TIM4_Init+0x94>)
 800164e:	f008 fe15 	bl	800a27c <HAL_TIM_ConfigClockSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001658:	f000 f9b6 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_TIM4_Init+0x94>)
 800166a:	f009 fbd9 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001674:	f000 f9a8 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	24003dfc 	.word	0x24003dfc
 8001684:	40000800 	.word	0x40000800
 8001688:	24000038 	.word	0x24000038

0800168c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2224      	movs	r2, #36	; 0x24
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f00d fab0 	bl	800ec00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_TIM5_Init+0xa4>)
 80016ac:	4a21      	ldr	r2, [pc, #132]	; (8001734 <MX_TIM5_Init+0xa8>)
 80016ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <MX_TIM5_Init+0xa4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_TIM5_Init+0xa4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4096;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_TIM5_Init+0xa4>)
 80016be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM5_Init+0xa4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM5_Init+0xa4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016d0:	2303      	movs	r3, #3
 80016d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d8:	2301      	movs	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80016e0:	230a      	movs	r3, #10
 80016e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e8:	2301      	movs	r3, #1
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80016f0:	230a      	movs	r3, #10
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_TIM5_Init+0xa4>)
 80016fc:	f008 fa5a 	bl	8009bb4 <HAL_TIM_Encoder_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001706:	f000 f95f 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_TIM5_Init+0xa4>)
 8001718:	f009 fb82 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001722:	f000 f951 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3730      	adds	r7, #48	; 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	24003e48 	.word	0x24003e48
 8001734:	40000c00 	.word	0x40000c00

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	; 0x38
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800174e:	4b95      	ldr	r3, [pc, #596]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	4a93      	ldr	r2, [pc, #588]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175e:	4b91      	ldr	r3, [pc, #580]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800176c:	4b8d      	ldr	r3, [pc, #564]	; (80019a4 <MX_GPIO_Init+0x26c>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001772:	4a8c      	ldr	r2, [pc, #560]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800177c:	4b89      	ldr	r3, [pc, #548]	; (80019a4 <MX_GPIO_Init+0x26c>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800178a:	4b86      	ldr	r3, [pc, #536]	; (80019a4 <MX_GPIO_Init+0x26c>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001790:	4a84      	ldr	r2, [pc, #528]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001792:	f043 0320 	orr.w	r3, r3, #32
 8001796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800179a:	4b82      	ldr	r3, [pc, #520]	; (80019a4 <MX_GPIO_Init+0x26c>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a8:	4b7e      	ldr	r3, [pc, #504]	; (80019a4 <MX_GPIO_Init+0x26c>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ae:	4a7d      	ldr	r2, [pc, #500]	; (80019a4 <MX_GPIO_Init+0x26c>)
 80017b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b8:	4b7a      	ldr	r3, [pc, #488]	; (80019a4 <MX_GPIO_Init+0x26c>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <MX_GPIO_Init+0x26c>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017cc:	4a75      	ldr	r2, [pc, #468]	; (80019a4 <MX_GPIO_Init+0x26c>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <MX_GPIO_Init+0x26c>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <MX_GPIO_Init+0x26c>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ea:	4a6e      	ldr	r2, [pc, #440]	; (80019a4 <MX_GPIO_Init+0x26c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f4:	4b6b      	ldr	r3, [pc, #428]	; (80019a4 <MX_GPIO_Init+0x26c>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b68      	ldr	r3, [pc, #416]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001808:	4a66      	ldr	r2, [pc, #408]	; (80019a4 <MX_GPIO_Init+0x26c>)
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001820:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001826:	4a5f      	ldr	r2, [pc, #380]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001830:	4b5c      	ldr	r3, [pc, #368]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	4a57      	ldr	r2, [pc, #348]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184e:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <MX_GPIO_Init+0x26c>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Test_pulse_Pin|EN_BRUECKE_1_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f248 0120 	movw	r1, #32800	; 0x8020
 8001862:	4851      	ldr	r0, [pc, #324]	; (80019a8 <MX_GPIO_Init+0x270>)
 8001864:	f003 fd40 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001868:	2200      	movs	r2, #0
 800186a:	21ff      	movs	r1, #255	; 0xff
 800186c:	484f      	ldr	r0, [pc, #316]	; (80019ac <MX_GPIO_Init+0x274>)
 800186e:	f003 fd3b 	bl	80052e8 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, R_F_W_UC_Pin|R_F_V_UC_Pin|R_F_U_UC_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001878:	484d      	ldr	r0, [pc, #308]	; (80019b0 <MX_GPIO_Init+0x278>)
 800187a:	f003 fd35 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRANSMITTER1_GPIO_Port, TRANSMITTER1_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	2102      	movs	r1, #2
 8001882:	484c      	ldr	r0, [pc, #304]	; (80019b4 <MX_GPIO_Init+0x27c>)
 8001884:	f003 fd30 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Test_pulse_Pin EN_BRUECKE_1_Pin */
  GPIO_InitStruct.Pin = Test_pulse_Pin|EN_BRUECKE_1_Pin;
 8001888:	f248 0320 	movw	r3, #32800	; 0x8020
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	4841      	ldr	r0, [pc, #260]	; (80019a8 <MX_GPIO_Init+0x270>)
 80018a2:	f003 fb59 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIPSW1_Pin DIPSW2_Pin DIPSW3_Pin DIPSW4_Pin */
  GPIO_InitStruct.Pin = DIPSW1_Pin|DIPSW2_Pin|DIPSW3_Pin|DIPSW4_Pin;
 80018a6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	483f      	ldr	r0, [pc, #252]	; (80019b8 <MX_GPIO_Init+0x280>)
 80018bc:	f003 fb4c 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80018c0:	23ff      	movs	r3, #255	; 0xff
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	4835      	ldr	r0, [pc, #212]	; (80019ac <MX_GPIO_Init+0x274>)
 80018d8:	f003 fb3e 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reference_Signal_Pin */
  GPIO_InitStruct.Pin = Reference_Signal_Pin;
 80018dc:	2304      	movs	r3, #4
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018e4:	2302      	movs	r3, #2
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Reference_Signal_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	4619      	mov	r1, r3
 80018ee:	4833      	ldr	r0, [pc, #204]	; (80019bc <MX_GPIO_Init+0x284>)
 80018f0:	f003 fb32 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_F_W_UC_Pin R_F_V_UC_Pin R_F_U_UC_Pin */
  GPIO_InitStruct.Pin = R_F_W_UC_Pin|R_F_V_UC_Pin|R_F_U_UC_Pin;
 80018f4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	4828      	ldr	r0, [pc, #160]	; (80019b0 <MX_GPIO_Init+0x278>)
 800190e:	f003 fb23 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRKIN_W_Pin BRKIN_V_Pin BRKIN_U_Pin */
  GPIO_InitStruct.Pin = BRKIN_W_Pin|BRKIN_V_Pin|BRKIN_U_Pin;
 8001912:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <MX_GPIO_Init+0x288>)
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001924:	4619      	mov	r1, r3
 8001926:	4822      	ldr	r0, [pc, #136]	; (80019b0 <MX_GPIO_Init+0x278>)
 8001928:	f003 fb16 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRANSMITTER1_Pin */
  GPIO_InitStruct.Pin = TRANSMITTER1_Pin;
 800192c:	2302      	movs	r3, #2
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TRANSMITTER1_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_GPIO_Init+0x27c>)
 8001944:	f003 fb08 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECIVER7_Pin RECIVER6_Pin RECIVER5_Pin RECIVER4_Pin
                           RECIVER3_Pin RECIVER2_Pin */
  GPIO_InitStruct.Pin = RECIVER7_Pin|RECIVER6_Pin|RECIVER5_Pin|RECIVER4_Pin
 8001948:	23fc      	movs	r3, #252	; 0xfc
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
                          |RECIVER3_Pin|RECIVER2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001950:	2301      	movs	r3, #1
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	4816      	ldr	r0, [pc, #88]	; (80019b4 <MX_GPIO_Init+0x27c>)
 800195c:	f003 fafc 	bl	8004f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECIVER1_Pin */
  GPIO_InitStruct.Pin = RECIVER1_Pin;
 8001960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196a:	2301      	movs	r3, #1
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RECIVER1_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	4813      	ldr	r0, [pc, #76]	; (80019c4 <MX_GPIO_Init+0x28c>)
 8001976:	f003 faef 	bl	8004f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2101      	movs	r1, #1
 800197e:	2017      	movs	r0, #23
 8001980:	f003 fab5 	bl	8004eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001984:	2017      	movs	r0, #23
 8001986:	f003 facc 	bl	8004f22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2101      	movs	r1, #1
 800198e:	2028      	movs	r0, #40	; 0x28
 8001990:	f003 faad 	bl	8004eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001994:	2028      	movs	r0, #40	; 0x28
 8001996:	f003 fac4 	bl	8004f22 <HAL_NVIC_EnableIRQ>

}
 800199a:	bf00      	nop
 800199c:	3738      	adds	r7, #56	; 0x38
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400
 80019a8:	58021000 	.word	0x58021000
 80019ac:	58021400 	.word	0x58021400
 80019b0:	58021c00 	.word	0x58021c00
 80019b4:	58020c00 	.word	0x58020c00
 80019b8:	58022000 	.word	0x58022000
 80019bc:	58020000 	.word	0x58020000
 80019c0:	11110000 	.word	0x11110000
 80019c4:	58021800 	.word	0x58021800

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_MspInit+0x30>)
 80019e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019e4:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_MspInit+0x30>)
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_MspInit+0x30>)
 80019f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	58024400 	.word	0x58024400

08001a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a25      	ldr	r2, [pc, #148]	; (8001ac0 <HAL_ADC_MspInit+0xb4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d144      	bne.n	8001ab8 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_ADC_MspInit+0xb8>)
 8001a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a34:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <HAL_ADC_MspInit+0xb8>)
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_ADC_MspInit+0xb8>)
 8001a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_ADC_MspInit+0xb8>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a52:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <HAL_ADC_MspInit+0xb8>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_ADC_MspInit+0xb8>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_ADC_MspInit+0xb8>)
 8001a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_ADC_MspInit+0xb8>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_ADC_MspInit+0xb8>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = IHB1_UC_Pin|IHB2_UC_Pin;
 8001a88:	2350      	movs	r3, #80	; 0x50
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <HAL_ADC_MspInit+0xbc>)
 8001a9c:	f003 fa5c 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IHB3_UC_Pin;
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IHB3_UC_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <HAL_ADC_MspInit+0xc0>)
 8001ab4:	f003 fa50 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	; 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	58020000 	.word	0x58020000
 8001acc:	58020800 	.word	0x58020800

08001ad0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2a      	ldr	r2, [pc, #168]	; (8001b98 <HAL_SPI_MspInit+0xc8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d14d      	bne.n	8001b8e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af8:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b16:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b4c:	2306      	movs	r3, #6
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <HAL_SPI_MspInit+0xd0>)
 8001b68:	f003 f9f6 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b7e:	2305      	movs	r3, #5
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <HAL_SPI_MspInit+0xd4>)
 8001b8a:	f003 f9e5 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40003800 	.word	0x40003800
 8001b9c:	58024400 	.word	0x58024400
 8001ba0:	58020800 	.word	0x58020800
 8001ba4:	58020400 	.word	0x58020400

08001ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a36      	ldr	r2, [pc, #216]	; (8001c90 <HAL_TIM_Base_MspInit+0xe8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10f      	bne.n	8001bda <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bba:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc0:	4a34      	ldr	r2, [pc, #208]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bd8:	e055      	b.n	8001c86 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be2:	d117      	bne.n	8001c14 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bea:	4a2a      	ldr	r2, [pc, #168]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	201c      	movs	r0, #28
 8001c08:	f003 f971 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c0c:	201c      	movs	r0, #28
 8001c0e:	f003 f988 	bl	8004f22 <HAL_NVIC_EnableIRQ>
}
 8001c12:	e038      	b.n	8001c86 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_TIM_Base_MspInit+0xf0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d117      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c24:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	201d      	movs	r0, #29
 8001c42:	f003 f954 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c46:	201d      	movs	r0, #29
 8001c48:	f003 f96b 	bl	8004f22 <HAL_NVIC_EnableIRQ>
}
 8001c4c:	e01b      	b.n	8001c86 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <HAL_TIM_Base_MspInit+0xf4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d116      	bne.n	8001c86 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_TIM_Base_MspInit+0xec>)
 8001c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2101      	movs	r1, #1
 8001c7a:	201e      	movs	r0, #30
 8001c7c:	f003 f937 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c80:	201e      	movs	r0, #30
 8001c82:	f003 f94e 	bl	8004f22 <HAL_NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40010000 	.word	0x40010000
 8001c94:	58024400 	.word	0x58024400
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800

08001ca0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x98>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d135      	bne.n	8001d2e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce6:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4809      	ldr	r0, [pc, #36]	; (8001d40 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001d1a:	f003 f91d 	bl	8004f58 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2032      	movs	r0, #50	; 0x32
 8001d24:	f003 f8e3 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d28:	2032      	movs	r0, #50	; 0x32
 8001d2a:	f003 f8fa 	bl	8004f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40000c00 	.word	0x40000c00
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	58020000 	.word	0x58020000

08001d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <HAL_TIM_MspPostInit+0xa8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d13e      	bne.n	8001de4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_TIM_MspPostInit+0xac>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	4a20      	ldr	r2, [pc, #128]	; (8001df0 <HAL_TIM_MspPostInit+0xac>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_TIM_MspPostInit+0xac>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_TIM_MspPostInit+0xac>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <HAL_TIM_MspPostInit+0xac>)
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_TIM_MspPostInit+0xac>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HB2L_1_Pin|HB3L_1_Pin;
 8001da2:	2303      	movs	r3, #3
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <HAL_TIM_MspPostInit+0xb0>)
 8001dbe:	f003 f8cb 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HB1L_1_Pin|HB1H_1_Pin|HB2H_1_Pin|HB3H_1_Pin;
 8001dc2:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <HAL_TIM_MspPostInit+0xb4>)
 8001de0:	f003 f8ba 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40010000 	.word	0x40010000
 8001df0:	58024400 	.word	0x58024400
 8001df4:	58020400 	.word	0x58020400
 8001df8:	58021000 	.word	0x58021000

08001dfc <max>:
//variables for the watchdog
extern IWDG_HandleTypeDef 	hiwdg1;

//the following four functions are needed for calculating the third harmonic
float max(float a, float b)//returns the higher value
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e06:	edc7 0a00 	vstr	s1, [r7]
    if (a>b)
 8001e0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e0e:	edd7 7a00 	vldr	s15, [r7]
 8001e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1a:	dd01      	ble.n	8001e20 <max+0x24>
        return a;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	e000      	b.n	8001e22 <max+0x26>
    else
        return b;
 8001e20:	683b      	ldr	r3, [r7, #0]
}
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <min>:
float min(float a, float b)//returns the lower value
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e3e:	edc7 0a00 	vstr	s1, [r7]
    if (a<b)
 8001e42:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e46:	edd7 7a00 	vldr	s15, [r7]
 8001e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	d501      	bpl.n	8001e58 <min+0x24>
        return a;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	e000      	b.n	8001e5a <min+0x26>
    else
        return b;
 8001e58:	683b      	ldr	r3, [r7, #0]
}
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <max3>:
float max3(float a, float b, float c)//returns the highest value
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e76:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e7a:	ed87 1a01 	vstr	s2, [r7, #4]
	return max(max(a, b),c);
 8001e7e:	edd7 0a02 	vldr	s1, [r7, #8]
 8001e82:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e86:	f7ff ffb9 	bl	8001dfc <max>
 8001e8a:	eef0 7a40 	vmov.f32	s15, s0
 8001e8e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001e92:	eeb0 0a67 	vmov.f32	s0, s15
 8001e96:	f7ff ffb1 	bl	8001dfc <max>
 8001e9a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <min3>:
float min3(float a, float b, float c)//returns the lowest value
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	ed87 0a03 	vstr	s0, [r7, #12]
 8001eb2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001eb6:	ed87 1a01 	vstr	s2, [r7, #4]
	return min(min(a, b),c);
 8001eba:	edd7 0a02 	vldr	s1, [r7, #8]
 8001ebe:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ec2:	f7ff ffb7 	bl	8001e34 <min>
 8001ec6:	eef0 7a40 	vmov.f32	s15, s0
 8001eca:	edd7 0a01 	vldr	s1, [r7, #4]
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	f7ff ffaf 	bl	8001e34 <min>
 8001ed6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001eda:	eeb0 0a67 	vmov.f32	s0, s15
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f001 fe64 	bl	8003c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001f44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f48:	f003 f9e7 	bl	800531a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f56:	48a6      	ldr	r0, [pc, #664]	; (80021f0 <TIM2_IRQHandler+0x2a0>)
 8001f58:	f007 ff60 	bl	8009e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //With turning on the pin PE4 at this point, you can check with the oscilloscope at which time TIM2 starts.
  //At the end of TIM2 the Pin gets turned off, so you can see how much time the calculation of TIM2 took.
  HAL_GPIO_WritePin(Test_pulse_GPIO_Port, Test_pulse_Pin, 1);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2120      	movs	r1, #32
 8001f60:	48a4      	ldr	r0, [pc, #656]	; (80021f4 <TIM2_IRQHandler+0x2a4>)
 8001f62:	f003 f9c1 	bl	80052e8 <HAL_GPIO_WritePin>

  //calculating the average of the current measured in the three phases
  for(int counter=0; counter<numberOfAveragedValues; counter++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e040      	b.n	8001fee <TIM2_IRQHandler+0x9e>
  {
	  bufferSum_IHB1 += buffer[counter][0];
 8001f6c:	49a2      	ldr	r1, [pc, #648]	; (80021f8 <TIM2_IRQHandler+0x2a8>)
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f84:	4b9d      	ldr	r3, [pc, #628]	; (80021fc <TIM2_IRQHandler+0x2ac>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8e:	4b9b      	ldr	r3, [pc, #620]	; (80021fc <TIM2_IRQHandler+0x2ac>)
 8001f90:	edc3 7a00 	vstr	s15, [r3]
	  bufferSum_IHB2 += buffer[counter][1];
 8001f94:	4998      	ldr	r1, [pc, #608]	; (80021f8 <TIM2_IRQHandler+0x2a8>)
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fae:	4b94      	ldr	r3, [pc, #592]	; (8002200 <TIM2_IRQHandler+0x2b0>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb8:	4b91      	ldr	r3, [pc, #580]	; (8002200 <TIM2_IRQHandler+0x2b0>)
 8001fba:	edc3 7a00 	vstr	s15, [r3]
	  bufferSum_IHB3 += buffer[counter][2];
 8001fbe:	498e      	ldr	r1, [pc, #568]	; (80021f8 <TIM2_IRQHandler+0x2a8>)
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3308      	adds	r3, #8
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd8:	4b8a      	ldr	r3, [pc, #552]	; (8002204 <TIM2_IRQHandler+0x2b4>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	4b88      	ldr	r3, [pc, #544]	; (8002204 <TIM2_IRQHandler+0x2b4>)
 8001fe4:	edc3 7a00 	vstr	s15, [r3]
  for(int counter=0; counter<numberOfAveragedValues; counter++)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3301      	adds	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4b85      	ldr	r3, [pc, #532]	; (8002208 <TIM2_IRQHandler+0x2b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d3b9      	bcc.n	8001f6c <TIM2_IRQHandler+0x1c>
  }
  bufferAverage_IHB1 = bufferSum_IHB1/numberOfAveragedValues;
 8001ff8:	4b80      	ldr	r3, [pc, #512]	; (80021fc <TIM2_IRQHandler+0x2ac>)
 8001ffa:	edd3 6a00 	vldr	s13, [r3]
 8001ffe:	4b82      	ldr	r3, [pc, #520]	; (8002208 <TIM2_IRQHandler+0x2b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800200a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200e:	4b7f      	ldr	r3, [pc, #508]	; (800220c <TIM2_IRQHandler+0x2bc>)
 8002010:	edc3 7a00 	vstr	s15, [r3]
  bufferAverage_IHB2 = bufferSum_IHB2/numberOfAveragedValues;
 8002014:	4b7a      	ldr	r3, [pc, #488]	; (8002200 <TIM2_IRQHandler+0x2b0>)
 8002016:	edd3 6a00 	vldr	s13, [r3]
 800201a:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <TIM2_IRQHandler+0x2b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800202a:	4b79      	ldr	r3, [pc, #484]	; (8002210 <TIM2_IRQHandler+0x2c0>)
 800202c:	edc3 7a00 	vstr	s15, [r3]
  bufferAverage_IHB3 = bufferSum_IHB3/numberOfAveragedValues;
 8002030:	4b74      	ldr	r3, [pc, #464]	; (8002204 <TIM2_IRQHandler+0x2b4>)
 8002032:	edd3 6a00 	vldr	s13, [r3]
 8002036:	4b74      	ldr	r3, [pc, #464]	; (8002208 <TIM2_IRQHandler+0x2b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <TIM2_IRQHandler+0x2c4>)
 8002048:	edc3 7a00 	vstr	s15, [r3]

  bufferSum_IHB1 = 0;
 800204c:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <TIM2_IRQHandler+0x2ac>)
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
  bufferSum_IHB2 = 0;
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <TIM2_IRQHandler+0x2b0>)
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
  bufferSum_IHB3 = 0;
 800205c:	4b69      	ldr	r3, [pc, #420]	; (8002204 <TIM2_IRQHandler+0x2b4>)
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

  current_IHB1 = (bufferCalibrated1+bufferAverage_IHB1)*amperePerDigits;
 8002064:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <TIM2_IRQHandler+0x2c8>)
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	4b68      	ldr	r3, [pc, #416]	; (800220c <TIM2_IRQHandler+0x2bc>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	4b69      	ldr	r3, [pc, #420]	; (800221c <TIM2_IRQHandler+0x2cc>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	4b68      	ldr	r3, [pc, #416]	; (8002220 <TIM2_IRQHandler+0x2d0>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
  current_IHB2 = (bufferCalibrated2+bufferAverage_IHB2)*amperePerDigits;
 8002084:	4b67      	ldr	r3, [pc, #412]	; (8002224 <TIM2_IRQHandler+0x2d4>)
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <TIM2_IRQHandler+0x2c0>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002094:	4b61      	ldr	r3, [pc, #388]	; (800221c <TIM2_IRQHandler+0x2cc>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	4b62      	ldr	r3, [pc, #392]	; (8002228 <TIM2_IRQHandler+0x2d8>)
 80020a0:	edc3 7a00 	vstr	s15, [r3]
  current_IHB3 = (bufferCalibrated3+bufferAverage_IHB3)*amperePerDigits;
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <TIM2_IRQHandler+0x2dc>)
 80020a6:	ed93 7a00 	vldr	s14, [r3]
 80020aa:	4b5a      	ldr	r3, [pc, #360]	; (8002214 <TIM2_IRQHandler+0x2c4>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <TIM2_IRQHandler+0x2cc>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020be:	4b5c      	ldr	r3, [pc, #368]	; (8002230 <TIM2_IRQHandler+0x2e0>)
 80020c0:	edc3 7a00 	vstr	s15, [r3]

  switch (operationMode)
 80020c4:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <TIM2_IRQHandler+0x2e4>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b63      	cmp	r3, #99	; 0x63
 80020ca:	f000 85fb 	beq.w	8002cc4 <TIM2_IRQHandler+0xd74>
 80020ce:	2b63      	cmp	r3, #99	; 0x63
 80020d0:	f300 85f9 	bgt.w	8002cc6 <TIM2_IRQHandler+0xd76>
 80020d4:	2b1e      	cmp	r3, #30
 80020d6:	dc47      	bgt.n	8002168 <TIM2_IRQHandler+0x218>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f2c0 85f4 	blt.w	8002cc6 <TIM2_IRQHandler+0xd76>
 80020de:	2b1e      	cmp	r3, #30
 80020e0:	f200 85f1 	bhi.w	8002cc6 <TIM2_IRQHandler+0xd76>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <TIM2_IRQHandler+0x19c>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	08002173 	.word	0x08002173
 80020f0:	08002189 	.word	0x08002189
 80020f4:	08002765 	.word	0x08002765
 80020f8:	08002927 	.word	0x08002927
 80020fc:	08002cc7 	.word	0x08002cc7
 8002100:	08002cc7 	.word	0x08002cc7
 8002104:	08002cc7 	.word	0x08002cc7
 8002108:	08002cc7 	.word	0x08002cc7
 800210c:	08002999 	.word	0x08002999
 8002110:	08002cc7 	.word	0x08002cc7
 8002114:	080021b3 	.word	0x080021b3
 8002118:	08002cc7 	.word	0x08002cc7
 800211c:	08002cc7 	.word	0x08002cc7
 8002120:	08002cc7 	.word	0x08002cc7
 8002124:	08002cc7 	.word	0x08002cc7
 8002128:	08002cc7 	.word	0x08002cc7
 800212c:	08002cc7 	.word	0x08002cc7
 8002130:	08002cc7 	.word	0x08002cc7
 8002134:	08002cc7 	.word	0x08002cc7
 8002138:	08002cc7 	.word	0x08002cc7
 800213c:	08002797 	.word	0x08002797
 8002140:	08002cc7 	.word	0x08002cc7
 8002144:	08002cc7 	.word	0x08002cc7
 8002148:	08002cc7 	.word	0x08002cc7
 800214c:	08002cc7 	.word	0x08002cc7
 8002150:	08002cc7 	.word	0x08002cc7
 8002154:	08002cc7 	.word	0x08002cc7
 8002158:	08002cc7 	.word	0x08002cc7
 800215c:	08002cc7 	.word	0x08002cc7
 8002160:	08002cc7 	.word	0x08002cc7
 8002164:	08002939 	.word	0x08002939
 8002168:	2b50      	cmp	r3, #80	; 0x50
 800216a:	f000 8433 	beq.w	80029d4 <TIM2_IRQHandler+0xa84>
 800216e:	f000 bdaa 	b.w	8002cc6 <TIM2_IRQHandler+0xd76>
      {
  	  	  case turnOff://Dip 0000 -> turn off the motor
		  {
			  HAL_GPIO_WritePin(EN_BRUECKE_1_GPIO_Port, EN_BRUECKE_1_Pin, 0); //disable bridge
 8002172:	2200      	movs	r2, #0
 8002174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002178:	481e      	ldr	r0, [pc, #120]	; (80021f4 <TIM2_IRQHandler+0x2a4>)
 800217a:	f003 f8b5 	bl	80052e8 <HAL_GPIO_WritePin>
			  operationMode = do_nothing;
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <TIM2_IRQHandler+0x2e4>)
 8002180:	2263      	movs	r2, #99	; 0x63
 8002182:	701a      	strb	r2, [r3, #0]
		  }
  	  	  case do_nothing://after turning the motor off -> do nothing
		  {
			  break;
 8002184:	f000 bd9e 	b.w	8002cc4 <TIM2_IRQHandler+0xd74>

  		  case start_threePhaseMode://Dip 1000 -> initialisation of three phase PWM mode
		  {
			  //if the softstarter is enabled, the value of the factor "softstarter" starts at 0. It slowly rises to 1
			  //if the soststarter is disabled, the value of the factor "softstarter" automatically is at 1. It won't rise.
			  softstarter = !enableSoftstarter;
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <TIM2_IRQHandler+0x2e8>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	f083 0301 	eor.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <TIM2_IRQHandler+0x2ec>)
 800219c:	edc3 7a00 	vstr	s15, [r3]
			  HAL_GPIO_WritePin(EN_BRUECKE_1_GPIO_Port, EN_BRUECKE_1_Pin, 1);//enable Bridge
 80021a0:	2201      	movs	r2, #1
 80021a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a6:	4813      	ldr	r0, [pc, #76]	; (80021f4 <TIM2_IRQHandler+0x2a4>)
 80021a8:	f003 f89e 	bl	80052e8 <HAL_GPIO_WritePin>
			  operationMode = do_threePhaseMode;
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <TIM2_IRQHandler+0x2e4>)
 80021ae:	220a      	movs	r2, #10
 80021b0:	701a      	strb	r2, [r3, #0]
		  }
  	  	  case do_threePhaseMode://after initialisation of three phase PWM mode is finished -> working in three phase PWM mode
		  {
			  if(softstarter < 1)//the factor "softstarter" slowly rises from 0 to 1
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <TIM2_IRQHandler+0x2ec>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	d540      	bpl.n	8002248 <TIM2_IRQHandler+0x2f8>
			  {
				  softstarter = softstarter + 1/(pwmFrequency*softstarterDuration);
 80021c6:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <TIM2_IRQHandler+0x2f0>)
 80021c8:	ed93 7a00 	vldr	s14, [r3]
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <TIM2_IRQHandler+0x2f4>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <TIM2_IRQHandler+0x2ec>)
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <TIM2_IRQHandler+0x2ec>)
 80021ea:	edc3 7a00 	vstr	s15, [r3]
 80021ee:	e02f      	b.n	8002250 <TIM2_IRQHandler+0x300>
 80021f0:	24003d64 	.word	0x24003d64
 80021f4:	58021000 	.word	0x58021000
 80021f8:	24003ecc 	.word	0x24003ecc
 80021fc:	24003e98 	.word	0x24003e98
 8002200:	24003e9c 	.word	0x24003e9c
 8002204:	24003ea0 	.word	0x24003ea0
 8002208:	24000014 	.word	0x24000014
 800220c:	24003ea4 	.word	0x24003ea4
 8002210:	24003ea8 	.word	0x24003ea8
 8002214:	24003eac 	.word	0x24003eac
 8002218:	24000020 	.word	0x24000020
 800221c:	2400001c 	.word	0x2400001c
 8002220:	24003eb0 	.word	0x24003eb0
 8002224:	24000024 	.word	0x24000024
 8002228:	24003eb4 	.word	0x24003eb4
 800222c:	24000028 	.word	0x24000028
 8002230:	24003eb8 	.word	0x24003eb8
 8002234:	24004382 	.word	0x24004382
 8002238:	24003e95 	.word	0x24003e95
 800223c:	24004384 	.word	0x24004384
 8002240:	08011ed8 	.word	0x08011ed8
 8002244:	24000010 	.word	0x24000010
			  }
			  else
				  softstarter = 1;
 8002248:	4b49      	ldr	r3, [pc, #292]	; (8002370 <TIM2_IRQHandler+0x420>)
 800224a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800224e:	601a      	str	r2, [r3, #0]
			  2. Enable or disable the variable "roationDirectionCW"
			  if "rotationDirectionCW" == true , the value in this bracket is +1
			  if "rotationDirectionCW" == false, the value in this bracket is -1
			  so its just another factor multiplied with the frequency.*/
			  angle1 = angle1
					  + (2*pi*frequency*(1/pwmFrequency)
 8002250:	eddf 7a48 	vldr	s15, [pc, #288]	; 8002374 <TIM2_IRQHandler+0x424>
 8002254:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002258:	4b47      	ldr	r3, [pc, #284]	; (8002378 <TIM2_IRQHandler+0x428>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002262:	4b46      	ldr	r3, [pc, #280]	; (800237c <TIM2_IRQHandler+0x42c>)
 8002264:	edd3 6a00 	vldr	s13, [r3]
 8002268:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800226c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002270:	ee27 7a27 	vmul.f32	s14, s14, s15
					  * (-1+2*rotationDirectionCW) //if rotationDirectionCW==true  ->  1
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <TIM2_IRQHandler+0x430>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	3b01      	subs	r3, #1
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002284:	ee27 7a27 	vmul.f32	s14, s14, s15
					  	  	  	  	  	  	  	   //if rotationDirectionCW==false -> -1
					  * softstarter);			   //value between 0 and 1
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <TIM2_IRQHandler+0x420>)
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	ee27 7a27 	vmul.f32	s14, s14, s15
					  + (2*pi*frequency*(1/pwmFrequency)
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <TIM2_IRQHandler+0x434>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
			  angle1 = angle1
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <TIM2_IRQHandler+0x434>)
 800229e:	edc3 7a00 	vstr	s15, [r3]

			  if(angle1 > 2*pi) //This ensures, that the angle stays in the range of values from 0 to 2*pi while the angle increases
 80022a2:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002374 <TIM2_IRQHandler+0x424>
 80022a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <TIM2_IRQHandler+0x434>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	d50b      	bpl.n	80022d2 <TIM2_IRQHandler+0x382>
			  {
				  angle1 = angle1 - 2*pi;
 80022ba:	4b32      	ldr	r3, [pc, #200]	; (8002384 <TIM2_IRQHandler+0x434>)
 80022bc:	ed93 7a00 	vldr	s14, [r3]
 80022c0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8002374 <TIM2_IRQHandler+0x424>
 80022c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <TIM2_IRQHandler+0x434>)
 80022ce:	edc3 7a00 	vstr	s15, [r3]
			  }
			  if(angle1 < 0) //This ensures, that the angle stays in the range of values from 0 to 2*pi while the angle decreases
 80022d2:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <TIM2_IRQHandler+0x434>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e0:	d50b      	bpl.n	80022fa <TIM2_IRQHandler+0x3aa>
			  {
				  angle1 = angle1 + 2*pi;
 80022e2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002374 <TIM2_IRQHandler+0x424>
 80022e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <TIM2_IRQHandler+0x434>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <TIM2_IRQHandler+0x434>)
 80022f6:	edc3 7a00 	vstr	s15, [r3]
			  //Therefore in the range from 240° to <360° = 4*pi/3 to <2*pi
			  //The angle2 is always 120° = 2*pi/3 out of phase with angle1
			  //to ensure that angle2 never leaves the range from 0 to 2*pi
			  //if angle1 is between 120 and <360° = 2*pi/3 to <2*pi   the angle2 is 120° = 2*pi/3 lower  than angle1
			  //if angle1 is between   0 and <120° =      0 to <2*pi   the angle2 is 240° = 4*pi/3 higher than angle1
			  if(angle1 > phaseShift)//
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <TIM2_IRQHandler+0x434>)
 80022fc:	ed93 7a00 	vldr	s14, [r3]
 8002300:	4b21      	ldr	r3, [pc, #132]	; (8002388 <TIM2_IRQHandler+0x438>)
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	dd0b      	ble.n	8002328 <TIM2_IRQHandler+0x3d8>
			  {
				  angle2 = angle1-phaseShift;
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <TIM2_IRQHandler+0x434>)
 8002312:	ed93 7a00 	vldr	s14, [r3]
 8002316:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <TIM2_IRQHandler+0x438>)
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <TIM2_IRQHandler+0x43c>)
 8002322:	edc3 7a00 	vstr	s15, [r3]
 8002326:	e00c      	b.n	8002342 <TIM2_IRQHandler+0x3f2>
			  }
			  else
			  {
				  angle2 = angle1+2*phaseShift;
 8002328:	4b17      	ldr	r3, [pc, #92]	; (8002388 <TIM2_IRQHandler+0x438>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <TIM2_IRQHandler+0x434>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <TIM2_IRQHandler+0x43c>)
 800233e:	edc3 7a00 	vstr	s15, [r3]
			  }
			  //calculating angle3
			  //same ratio as angle1 to angle2
			  if(angle2 > phaseShift)
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <TIM2_IRQHandler+0x43c>)
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <TIM2_IRQHandler+0x438>)
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002356:	dd1d      	ble.n	8002394 <TIM2_IRQHandler+0x444>
			  {
				  angle3 = angle2-phaseShift;
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <TIM2_IRQHandler+0x43c>)
 800235a:	ed93 7a00 	vldr	s14, [r3]
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <TIM2_IRQHandler+0x438>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <TIM2_IRQHandler+0x440>)
 800236a:	edc3 7a00 	vstr	s15, [r3]
 800236e:	e01e      	b.n	80023ae <TIM2_IRQHandler+0x45e>
 8002370:	24004384 	.word	0x24004384
 8002374:	40490fdb 	.word	0x40490fdb
 8002378:	24000000 	.word	0x24000000
 800237c:	08011ed8 	.word	0x08011ed8
 8002380:	24003e94 	.word	0x24003e94
 8002384:	24004388 	.word	0x24004388
 8002388:	24003888 	.word	0x24003888
 800238c:	24003880 	.word	0x24003880
 8002390:	24003884 	.word	0x24003884
			  }
			  else
			  {
				  angle3 = angle2+2*phaseShift;
 8002394:	4bcc      	ldr	r3, [pc, #816]	; (80026c8 <TIM2_IRQHandler+0x778>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800239e:	4bcb      	ldr	r3, [pc, #812]	; (80026cc <TIM2_IRQHandler+0x77c>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a8:	4bc9      	ldr	r3, [pc, #804]	; (80026d0 <TIM2_IRQHandler+0x780>)
 80023aa:	edc3 7a00 	vstr	s15, [r3]
//				  {
//					  angle3 = angle3 - 2*pi;
//				  }

			  //The current angles get transformed into the according place in the table of sine values
			  uint32_t tablePosition1 = angle1*(numberOfSineValues/(2*pi));//the sine table has 1800 values
 80023ae:	4bc9      	ldr	r3, [pc, #804]	; (80026d4 <TIM2_IRQHandler+0x784>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ba:	eddf 7ac7 	vldr	s15, [pc, #796]	; 80026d8 <TIM2_IRQHandler+0x788>
 80023be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023c6:	4bc5      	ldr	r3, [pc, #788]	; (80026dc <TIM2_IRQHandler+0x78c>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d4:	ee17 3a90 	vmov	r3, s15
 80023d8:	60bb      	str	r3, [r7, #8]
			  uint32_t tablePosition2 = angle2*(numberOfSineValues/(2*pi));
 80023da:	4bbe      	ldr	r3, [pc, #760]	; (80026d4 <TIM2_IRQHandler+0x784>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023e6:	eddf 7abc 	vldr	s15, [pc, #752]	; 80026d8 <TIM2_IRQHandler+0x788>
 80023ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023f2:	4bb6      	ldr	r3, [pc, #728]	; (80026cc <TIM2_IRQHandler+0x77c>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002400:	ee17 3a90 	vmov	r3, s15
 8002404:	607b      	str	r3, [r7, #4]
			  uint32_t tablePosition3 = angle3*(numberOfSineValues/(2*pi));
 8002406:	4bb3      	ldr	r3, [pc, #716]	; (80026d4 <TIM2_IRQHandler+0x784>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002412:	eddf 7ab1 	vldr	s15, [pc, #708]	; 80026d8 <TIM2_IRQHandler+0x788>
 8002416:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800241a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241e:	4bac      	ldr	r3, [pc, #688]	; (80026d0 <TIM2_IRQHandler+0x780>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800242c:	ee17 3a90 	vmov	r3, s15
 8002430:	603b      	str	r3, [r7, #0]

			  pulseWidth1 = sineTable[tablePosition1];
 8002432:	4aab      	ldr	r2, [pc, #684]	; (80026e0 <TIM2_IRQHandler+0x790>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f7fe fa29 	bl	8000898 <__aeabi_ul2f>
 8002446:	4603      	mov	r3, r0
 8002448:	4aa6      	ldr	r2, [pc, #664]	; (80026e4 <TIM2_IRQHandler+0x794>)
 800244a:	6013      	str	r3, [r2, #0]
			  pulseWidth2 = sineTable[tablePosition2];
 800244c:	4aa4      	ldr	r2, [pc, #656]	; (80026e0 <TIM2_IRQHandler+0x790>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f7fe fa1c 	bl	8000898 <__aeabi_ul2f>
 8002460:	4603      	mov	r3, r0
 8002462:	4aa1      	ldr	r2, [pc, #644]	; (80026e8 <TIM2_IRQHandler+0x798>)
 8002464:	6013      	str	r3, [r2, #0]
			  pulseWidth3 = sineTable[tablePosition3];
 8002466:	4a9e      	ldr	r2, [pc, #632]	; (80026e0 <TIM2_IRQHandler+0x790>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fa0f 	bl	8000898 <__aeabi_ul2f>
 800247a:	4603      	mov	r3, r0
 800247c:	4a9b      	ldr	r2, [pc, #620]	; (80026ec <TIM2_IRQHandler+0x79c>)
 800247e:	6013      	str	r3, [r2, #0]

			  //adding the third harmonic
			  //setting the range of table values from (0)-(+1800) to (-900)-(+900)

			  if(true == enableThirdHarmonic)
 8002480:	4b9b      	ldr	r3, [pc, #620]	; (80026f0 <TIM2_IRQHandler+0x7a0>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a6 	beq.w	80025d6 <TIM2_IRQHandler+0x686>
			  {
				  //setting the range of table values from (0)-(+1800) to (-900)-(+900)
				  //this is needed in the further functions
				  pulseWidth1 = pulseWidth1-(rangeOfSineValues/2);
 800248a:	4b96      	ldr	r3, [pc, #600]	; (80026e4 <TIM2_IRQHandler+0x794>)
 800248c:	ed93 7a00 	vldr	s14, [r3]
 8002490:	4b98      	ldr	r3, [pc, #608]	; (80026f4 <TIM2_IRQHandler+0x7a4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a2:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <TIM2_IRQHandler+0x794>)
 80024a4:	edc3 7a00 	vstr	s15, [r3]
				  pulseWidth2 = pulseWidth2-(rangeOfSineValues/2);
 80024a8:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <TIM2_IRQHandler+0x798>)
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <TIM2_IRQHandler+0x7a4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c0:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <TIM2_IRQHandler+0x798>)
 80024c2:	edc3 7a00 	vstr	s15, [r3]
				  pulseWidth3 = pulseWidth3-(rangeOfSineValues/2);
 80024c6:	4b89      	ldr	r3, [pc, #548]	; (80026ec <TIM2_IRQHandler+0x79c>)
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	4b89      	ldr	r3, [pc, #548]	; (80026f4 <TIM2_IRQHandler+0x7a4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024de:	4b83      	ldr	r3, [pc, #524]	; (80026ec <TIM2_IRQHandler+0x79c>)
 80024e0:	edc3 7a00 	vstr	s15, [r3]

				  //calculating the highest pulse with
				  SG_max = max3(pulseWidth1,pulseWidth2,pulseWidth3);
 80024e4:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <TIM2_IRQHandler+0x794>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	4b7f      	ldr	r3, [pc, #508]	; (80026e8 <TIM2_IRQHandler+0x798>)
 80024ec:	ed93 7a00 	vldr	s14, [r3]
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <TIM2_IRQHandler+0x79c>)
 80024f2:	edd3 6a00 	vldr	s13, [r3]
 80024f6:	eeb0 1a66 	vmov.f32	s2, s13
 80024fa:	eef0 0a47 	vmov.f32	s1, s14
 80024fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002502:	f7ff fcb3 	bl	8001e6c <max3>
 8002506:	eef0 7a40 	vmov.f32	s15, s0
 800250a:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <TIM2_IRQHandler+0x7a8>)
 800250c:	edc3 7a00 	vstr	s15, [r3]
				  //calculating the lowest pulse with
				  SG_min = min3(pulseWidth1,pulseWidth2,pulseWidth3);
 8002510:	4b74      	ldr	r3, [pc, #464]	; (80026e4 <TIM2_IRQHandler+0x794>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	4b74      	ldr	r3, [pc, #464]	; (80026e8 <TIM2_IRQHandler+0x798>)
 8002518:	ed93 7a00 	vldr	s14, [r3]
 800251c:	4b73      	ldr	r3, [pc, #460]	; (80026ec <TIM2_IRQHandler+0x79c>)
 800251e:	edd3 6a00 	vldr	s13, [r3]
 8002522:	eeb0 1a66 	vmov.f32	s2, s13
 8002526:	eef0 0a47 	vmov.f32	s1, s14
 800252a:	eeb0 0a67 	vmov.f32	s0, s15
 800252e:	f7ff fcbb 	bl	8001ea8 <min3>
 8002532:	eef0 7a40 	vmov.f32	s15, s0
 8002536:	4b71      	ldr	r3, [pc, #452]	; (80026fc <TIM2_IRQHandler+0x7ac>)
 8002538:	edc3 7a00 	vstr	s15, [r3]
				  //calculating the harmonic part
				  U_harm = -(SG_min + SG_max)*0.5;
 800253c:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <TIM2_IRQHandler+0x7ac>)
 800253e:	ed93 7a00 	vldr	s14, [r3]
 8002542:	4b6d      	ldr	r3, [pc, #436]	; (80026f8 <TIM2_IRQHandler+0x7a8>)
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254c:	eef1 7a67 	vneg.f32	s15, s15
 8002550:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002558:	4b69      	ldr	r3, [pc, #420]	; (8002700 <TIM2_IRQHandler+0x7b0>)
 800255a:	edc3 7a00 	vstr	s15, [r3]

				  //setting the range of table values back to (0)-(+1800)
				  //and adding the harmonic proportion
				  pulseWidth1 = pulseWidth1+(rangeOfSineValues/2)+U_harm;
 800255e:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <TIM2_IRQHandler+0x7a4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800256c:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <TIM2_IRQHandler+0x794>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002576:	4b62      	ldr	r3, [pc, #392]	; (8002700 <TIM2_IRQHandler+0x7b0>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <TIM2_IRQHandler+0x794>)
 8002582:	edc3 7a00 	vstr	s15, [r3]
				  pulseWidth2 = pulseWidth2+(rangeOfSineValues/2)+U_harm;
 8002586:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <TIM2_IRQHandler+0x7a4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002594:	4b54      	ldr	r3, [pc, #336]	; (80026e8 <TIM2_IRQHandler+0x798>)
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	4b58      	ldr	r3, [pc, #352]	; (8002700 <TIM2_IRQHandler+0x7b0>)
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <TIM2_IRQHandler+0x798>)
 80025aa:	edc3 7a00 	vstr	s15, [r3]
				  pulseWidth3 = pulseWidth3+(rangeOfSineValues/2)+U_harm;
 80025ae:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <TIM2_IRQHandler+0x7a4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025bc:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <TIM2_IRQHandler+0x79c>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c6:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <TIM2_IRQHandler+0x7b0>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	4b46      	ldr	r3, [pc, #280]	; (80026ec <TIM2_IRQHandler+0x79c>)
 80025d2:	edc3 7a00 	vstr	s15, [r3]
			  }
			  //adjusting the current duty cycles of the PWM signals

			  //adjusting angle1
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 80025d6:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <TIM2_IRQHandler+0x794>)
 80025d8:	ed93 7a00 	vldr	s14, [r3]
 80025dc:	4b49      	ldr	r3, [pc, #292]	; (8002704 <TIM2_IRQHandler+0x7b4>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e6:	4b48      	ldr	r3, [pc, #288]	; (8002708 <TIM2_IRQHandler+0x7b8>)
 80025e8:	ed93 6a00 	vldr	s12, [r3]
 80025ec:	4b47      	ldr	r3, [pc, #284]	; (800270c <TIM2_IRQHandler+0x7bc>)
 80025ee:	edd3 6a00 	vldr	s13, [r3]
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <TIM2_IRQHandler+0x7c0>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025fc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002604:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002608:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <TIM2_IRQHandler+0x7a4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002614:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80026c0 <TIM2_IRQHandler+0x770>
 8002618:	ee27 5b05 	vmul.f64	d5, d7, d5
 800261c:	4b39      	ldr	r3, [pc, #228]	; (8002704 <TIM2_IRQHandler+0x7b4>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002626:	ee25 7b07 	vmul.f64	d7, d5, d7
 800262a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <TIM2_IRQHandler+0x7c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002636:	ee17 2a90 	vmov	r2, s15
 800263a:	635a      	str	r2, [r3, #52]	; 0x34
					  pulseWidth1*pwmPeriodConversion
					  *(voltage_ref/(v_bridge_uf*maxTensionRelationship))
					  +0.05*rangeOfSineValues*pwmPeriodConversion);
			  //adjusting angle2
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <TIM2_IRQHandler+0x798>)
 800263e:	ed93 7a00 	vldr	s14, [r3]
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <TIM2_IRQHandler+0x7b4>)
 8002644:	edd3 7a00 	vldr	s15, [r3]
 8002648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800264c:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <TIM2_IRQHandler+0x7b8>)
 800264e:	ed93 6a00 	vldr	s12, [r3]
 8002652:	4b2e      	ldr	r3, [pc, #184]	; (800270c <TIM2_IRQHandler+0x7bc>)
 8002654:	edd3 6a00 	vldr	s13, [r3]
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <TIM2_IRQHandler+0x7c0>)
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002662:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <TIM2_IRQHandler+0x7a4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800267a:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80026c0 <TIM2_IRQHandler+0x770>
 800267e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <TIM2_IRQHandler+0x7b4>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800268c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002690:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <TIM2_IRQHandler+0x7c4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800269c:	ee17 2a90 	vmov	r2, s15
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
					 pulseWidth2*pwmPeriodConversion
					 *(voltage_ref/(v_bridge_uf*maxTensionRelationship))
					 +0.05*rangeOfSineValues*pwmPeriodConversion);
			  //adjusting angle3
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <TIM2_IRQHandler+0x79c>)
 80026a4:	ed93 7a00 	vldr	s14, [r3]
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <TIM2_IRQHandler+0x7b4>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <TIM2_IRQHandler+0x7b8>)
 80026b4:	ed93 6a00 	vldr	s12, [r3]
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <TIM2_IRQHandler+0x7bc>)
 80026ba:	edd3 6a00 	vldr	s13, [r3]
 80026be:	e02b      	b.n	8002718 <TIM2_IRQHandler+0x7c8>
 80026c0:	9999999a 	.word	0x9999999a
 80026c4:	3fa99999 	.word	0x3fa99999
 80026c8:	24003888 	.word	0x24003888
 80026cc:	24003880 	.word	0x24003880
 80026d0:	24003884 	.word	0x24003884
 80026d4:	08011edc 	.word	0x08011edc
 80026d8:	40490fdb 	.word	0x40490fdb
 80026dc:	24004388 	.word	0x24004388
 80026e0:	24000040 	.word	0x24000040
 80026e4:	24004398 	.word	0x24004398
 80026e8:	2400439c 	.word	0x2400439c
 80026ec:	240043a0 	.word	0x240043a0
 80026f0:	2400000c 	.word	0x2400000c
 80026f4:	08011ee0 	.word	0x08011ee0
 80026f8:	2400438c 	.word	0x2400438c
 80026fc:	24004390 	.word	0x24004390
 8002700:	24004394 	.word	0x24004394
 8002704:	2400003c 	.word	0x2400003c
 8002708:	24000008 	.word	0x24000008
 800270c:	24000004 	.word	0x24000004
 8002710:	24000018 	.word	0x24000018
 8002714:	24003d18 	.word	0x24003d18
 8002718:	4bb7      	ldr	r3, [pc, #732]	; (80029f8 <TIM2_IRQHandler+0xaa8>)
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002722:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800272e:	4bb3      	ldr	r3, [pc, #716]	; (80029fc <TIM2_IRQHandler+0xaac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800273a:	ed9f 5bad 	vldr	d5, [pc, #692]	; 80029f0 <TIM2_IRQHandler+0xaa0>
 800273e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002742:	4baf      	ldr	r3, [pc, #700]	; (8002a00 <TIM2_IRQHandler+0xab0>)
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800274c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002750:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002754:	4bab      	ldr	r3, [pc, #684]	; (8002a04 <TIM2_IRQHandler+0xab4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800275c:	ee17 2a90 	vmov	r2, s15
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c
					 pulseWidth3*pwmPeriodConversion
					 *(voltage_ref/(v_bridge_uf*maxTensionRelationship))
					 +0.05*rangeOfSineValues*pwmPeriodConversion);
			  break;
 8002762:	e2b0      	b.n	8002cc6 <TIM2_IRQHandler+0xd76>

  	  	  case start_DCMode://Dip 0100 -> initialisation of DC Mode
		  {
			  //if the softstarter is enabled, the value of the factor "softstarter" starts at 0. It slowly rises to 1
			  //if the softstarter is disabled, the value of the factor "softstarter" automtically is at 1. It will not rise.
			  softstarter = !enableSoftstarter;
 8002764:	4ba8      	ldr	r3, [pc, #672]	; (8002a08 <TIM2_IRQHandler+0xab8>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	f083 0301 	eor.w	r3, r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002776:	4ba5      	ldr	r3, [pc, #660]	; (8002a0c <TIM2_IRQHandler+0xabc>)
 8002778:	edc3 7a00 	vstr	s15, [r3]
			  HAL_GPIO_WritePin(EN_BRUECKE_1_GPIO_Port, EN_BRUECKE_1_Pin, 1);
 800277c:	2201      	movs	r2, #1
 800277e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002782:	48a3      	ldr	r0, [pc, #652]	; (8002a10 <TIM2_IRQHandler+0xac0>)
 8002784:	f002 fdb0 	bl	80052e8 <HAL_GPIO_WritePin>
			  operationMode = do_DCMode;
 8002788:	4ba2      	ldr	r3, [pc, #648]	; (8002a14 <TIM2_IRQHandler+0xac4>)
 800278a:	2214      	movs	r2, #20
 800278c:	701a      	strb	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800278e:	4b9d      	ldr	r3, [pc, #628]	; (8002a04 <TIM2_IRQHandler+0xab4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c
		  }
  	  	  case do_DCMode://after Initialisation of DC mode is finished -> working DC mode
		  {
			  if(softstarter < 1)//the factor "softstarter" slowly rises from 0 to 1
 8002796:	4b9d      	ldr	r3, [pc, #628]	; (8002a0c <TIM2_IRQHandler+0xabc>)
 8002798:	edd3 7a00 	vldr	s15, [r3]
 800279c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	d514      	bpl.n	80027d4 <TIM2_IRQHandler+0x884>
			  {
				  softstarter = softstarter + 1/(pwmFrequency*softstarterDuration);
 80027aa:	4b9b      	ldr	r3, [pc, #620]	; (8002a18 <TIM2_IRQHandler+0xac8>)
 80027ac:	ed93 7a00 	vldr	s14, [r3]
 80027b0:	4b9a      	ldr	r3, [pc, #616]	; (8002a1c <TIM2_IRQHandler+0xacc>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027c2:	4b92      	ldr	r3, [pc, #584]	; (8002a0c <TIM2_IRQHandler+0xabc>)
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027cc:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <TIM2_IRQHandler+0xabc>)
 80027ce:	edc3 7a00 	vstr	s15, [r3]
 80027d2:	e003      	b.n	80027dc <TIM2_IRQHandler+0x88c>
			  }
			  else
			  {
				  softstarter = 1;
 80027d4:	4b8d      	ldr	r3, [pc, #564]	; (8002a0c <TIM2_IRQHandler+0xabc>)
 80027d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027da:	601a      	str	r2, [r3, #0]
			  }
			  if(false == rotationDirectionCW) 								//motor rotates counterclockwise
 80027dc:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <TIM2_IRQHandler+0xad0>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	f083 0301 	eor.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d04e      	beq.n	8002888 <TIM2_IRQHandler+0x938>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,				//Adjusting x7_U as 0V
 80027ea:	4b84      	ldr	r3, [pc, #528]	; (80029fc <TIM2_IRQHandler+0xaac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027f6:	4b82      	ldr	r3, [pc, #520]	; (8002a00 <TIM2_IRQHandler+0xab0>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002804:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80029f0 <TIM2_IRQHandler+0xaa0>
 8002808:	ee27 7b06 	vmul.f64	d7, d7, d6
 800280c:	4b7d      	ldr	r3, [pc, #500]	; (8002a04 <TIM2_IRQHandler+0xab4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002814:	ee17 2a90 	vmov	r2, s15
 8002818:	635a      	str	r2, [r3, #52]	; 0x34
						  rangeOfSineValues*pwmPeriodConversion*0.05);

				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,				//Adjusting x7_V as the voltage_ref of DC Motor
 800281a:	4b78      	ldr	r3, [pc, #480]	; (80029fc <TIM2_IRQHandler+0xaac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <TIM2_IRQHandler+0xab0>)
 8002828:	edd3 7a00 	vldr	s15, [r3]
 800282c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002830:	4b7c      	ldr	r3, [pc, #496]	; (8002a24 <TIM2_IRQHandler+0xad4>)
 8002832:	edd3 6a00 	vldr	s13, [r3]
 8002836:	4b75      	ldr	r3, [pc, #468]	; (8002a0c <TIM2_IRQHandler+0xabc>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002840:	4b79      	ldr	r3, [pc, #484]	; (8002a28 <TIM2_IRQHandler+0xad8>)
 8002842:	edd3 6a00 	vldr	s13, [r3]
 8002846:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800284a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002852:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <TIM2_IRQHandler+0xaac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800285e:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <TIM2_IRQHandler+0xab0>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002868:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800286c:	ed9f 5b60 	vldr	d5, [pc, #384]	; 80029f0 <TIM2_IRQHandler+0xaa0>
 8002870:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002874:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002878:	4b62      	ldr	r3, [pc, #392]	; (8002a04 <TIM2_IRQHandler+0xab4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002880:	ee17 2a90 	vmov	r2, s15
 8002884:	639a      	str	r2, [r3, #56]	; 0x38

				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,				//Adjusting x7_V as 0V
						  rangeOfSineValues*pwmPeriodConversion*0.05);
			  }

			  break;
 8002886:	e21e      	b.n	8002cc6 <TIM2_IRQHandler+0xd76>
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,				//Adjusting x7_U as the voltage_ref of DC Motor
 8002888:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <TIM2_IRQHandler+0xaac>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	ee07 3a90 	vmov	s15, r3
 8002890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002894:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <TIM2_IRQHandler+0xab0>)
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <TIM2_IRQHandler+0xad4>)
 80028a0:	edd3 6a00 	vldr	s13, [r3]
 80028a4:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <TIM2_IRQHandler+0xabc>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80028ae:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <TIM2_IRQHandler+0xad8>)
 80028b0:	edd3 6a00 	vldr	s13, [r3]
 80028b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80028c0:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <TIM2_IRQHandler+0xaac>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028cc:	4b4c      	ldr	r3, [pc, #304]	; (8002a00 <TIM2_IRQHandler+0xab0>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028da:	ed9f 5b45 	vldr	d5, [pc, #276]	; 80029f0 <TIM2_IRQHandler+0xaa0>
 80028de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80028e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <TIM2_IRQHandler+0xab4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80028ee:	ee17 2a90 	vmov	r2, s15
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,				//Adjusting x7_V as 0V
 80028f4:	4b41      	ldr	r3, [pc, #260]	; (80029fc <TIM2_IRQHandler+0xaac>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <TIM2_IRQHandler+0xab0>)
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800290e:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80029f0 <TIM2_IRQHandler+0xaa0>
 8002912:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002916:	4b3b      	ldr	r3, [pc, #236]	; (8002a04 <TIM2_IRQHandler+0xab4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800291e:	ee17 2a90 	vmov	r2, s15
 8002922:	639a      	str	r2, [r3, #56]	; 0x38
			  break;
 8002924:	e1cf      	b.n	8002cc6 <TIM2_IRQHandler+0xd76>
		  }
  	  	  case start_calibrateADC:
		  {
			  HAL_GPIO_WritePin(EN_BRUECKE_1_GPIO_Port, EN_BRUECKE_1_Pin, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800292c:	4838      	ldr	r0, [pc, #224]	; (8002a10 <TIM2_IRQHandler+0xac0>)
 800292e:	f002 fcdb 	bl	80052e8 <HAL_GPIO_WritePin>
			  operationMode = do_calibrateADC;
 8002932:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <TIM2_IRQHandler+0xac4>)
 8002934:	221e      	movs	r2, #30
 8002936:	701a      	strb	r2, [r3, #0]
		  }
  	  	  case do_calibrateADC:
  	  	  {
			  bufferCalibrated1 = - bufferAverage_IHB1;
 8002938:	4b3c      	ldr	r3, [pc, #240]	; (8002a2c <TIM2_IRQHandler+0xadc>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	eef1 7a67 	vneg.f32	s15, s15
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <TIM2_IRQHandler+0xae0>)
 8002944:	edc3 7a00 	vstr	s15, [r3]
			  bufferCalibrated2 = - bufferAverage_IHB2;
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <TIM2_IRQHandler+0xae4>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	eef1 7a67 	vneg.f32	s15, s15
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <TIM2_IRQHandler+0xae8>)
 8002954:	edc3 7a00 	vstr	s15, [r3]
			  bufferCalibrated3 = - bufferAverage_IHB3;
 8002958:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <TIM2_IRQHandler+0xaec>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eef1 7a67 	vneg.f32	s15, s15
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <TIM2_IRQHandler+0xaf0>)
 8002964:	edc3 7a00 	vstr	s15, [r3]
			  WDHTR = overCurrentThreshold/amperePerDigits-bufferCalibrated1;
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <TIM2_IRQHandler+0xaf4>)
 800296a:	edd3 6a00 	vldr	s13, [r3]
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <TIM2_IRQHandler+0xaf8>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <TIM2_IRQHandler+0xae0>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002986:	ee17 2a90 	vmov	r2, s15
 800298a:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <TIM2_IRQHandler+0xafc>)
 800298c:	601a      	str	r2, [r3, #0]
			  ADC1->HTR1 = WDHTR;
 800298e:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <TIM2_IRQHandler+0xb00>)
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <TIM2_IRQHandler+0xafc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6253      	str	r3, [r2, #36]	; 0x24
			  break;
 8002996:	e196      	b.n	8002cc6 <TIM2_IRQHandler+0xd76>
  	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
  	  	  }*/

  	  	case start_control: //Dip 0001: initialization of the controller, enables the bridge delayed to prevent effects from the dip switches
  	  	  	  	  {
  	  	  	  		  if(countTimeDelay < 4000)
 8002998:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <TIM2_IRQHandler+0xb04>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80029a0:	da05      	bge.n	80029ae <TIM2_IRQHandler+0xa5e>
  	  	  	  		  {
  	  	  	  			  countTimeDelay++;
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <TIM2_IRQHandler+0xb04>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <TIM2_IRQHandler+0xb04>)
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e012      	b.n	80029d4 <TIM2_IRQHandler+0xa84>
  	  	  	  		  }
  	  	  	  		  else
  	  	  	  		  {
  	  	  	  			  HAL_GPIO_WritePin(EN_BRUECKE_1_GPIO_Port, EN_BRUECKE_1_Pin, 1);
 80029ae:	2201      	movs	r2, #1
 80029b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b4:	4816      	ldr	r0, [pc, #88]	; (8002a10 <TIM2_IRQHandler+0xac0>)
 80029b6:	f002 fc97 	bl	80052e8 <HAL_GPIO_WritePin>
  	  	  	  		  	  operationMode = do_control;
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <TIM2_IRQHandler+0xac4>)
 80029bc:	2250      	movs	r2, #80	; 0x50
 80029be:	701a      	strb	r2, [r3, #0]
  	  	  	  		  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <TIM2_IRQHandler+0xab4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
  	  	  	  		  	  countTimeDelay = 0;
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <TIM2_IRQHandler+0xb04>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
  	  	  	  		  	  referenceValue = 0.4;
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <TIM2_IRQHandler+0xb08>)
 80029d0:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <TIM2_IRQHandler+0xb0c>)
 80029d2:	601a      	str	r2, [r3, #0]
  	  	  	  		  }
  	  	  	  	  }
  	  	  case do_control: //routine of the controller
  	  	  {
  	  		  if(countJump < 100000) //simulating a current jump after a certain time
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <TIM2_IRQHandler+0xb10>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <TIM2_IRQHandler+0xb14>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	dc44      	bgt.n	8002a68 <TIM2_IRQHandler+0xb18>
  	  		  {
  	  		  	  countJump++;
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <TIM2_IRQHandler+0xb10>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <TIM2_IRQHandler+0xb10>)
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	e041      	b.n	8002a6e <TIM2_IRQHandler+0xb1e>
 80029ea:	bf00      	nop
 80029ec:	f3af 8000 	nop.w
 80029f0:	9999999a 	.word	0x9999999a
 80029f4:	3fa99999 	.word	0x3fa99999
 80029f8:	24000018 	.word	0x24000018
 80029fc:	08011ee0 	.word	0x08011ee0
 8002a00:	2400003c 	.word	0x2400003c
 8002a04:	24003d18 	.word	0x24003d18
 8002a08:	24003e95 	.word	0x24003e95
 8002a0c:	24004384 	.word	0x24004384
 8002a10:	58021000 	.word	0x58021000
 8002a14:	24004382 	.word	0x24004382
 8002a18:	08011ed8 	.word	0x08011ed8
 8002a1c:	24000010 	.word	0x24000010
 8002a20:	24003e94 	.word	0x24003e94
 8002a24:	24000008 	.word	0x24000008
 8002a28:	24000004 	.word	0x24000004
 8002a2c:	24003ea4 	.word	0x24003ea4
 8002a30:	24000020 	.word	0x24000020
 8002a34:	24003ea8 	.word	0x24003ea8
 8002a38:	24000024 	.word	0x24000024
 8002a3c:	24003eac 	.word	0x24003eac
 8002a40:	24000028 	.word	0x24000028
 8002a44:	08011ed4 	.word	0x08011ed4
 8002a48:	2400001c 	.word	0x2400001c
 8002a4c:	24003ebc 	.word	0x24003ebc
 8002a50:	40022000 	.word	0x40022000
 8002a54:	240043b4 	.word	0x240043b4
 8002a58:	2400389c 	.word	0x2400389c
 8002a5c:	3ecccccd 	.word	0x3ecccccd
 8002a60:	240043b8 	.word	0x240043b8
 8002a64:	0001869f 	.word	0x0001869f
  	  		  }
  	  		  	  else
  	  		  {
  	  		  	  referenceValue = 0.6;
 8002a68:	4b9f      	ldr	r3, [pc, #636]	; (8002ce8 <TIM2_IRQHandler+0xd98>)
 8002a6a:	4aa0      	ldr	r2, [pc, #640]	; (8002cec <TIM2_IRQHandler+0xd9c>)
 8002a6c:	601a      	str	r2, [r3, #0]
  	  		  }
  	  		  timeConstant = 0.03; 		//TA(inductivity, resistance); //(equation to calculate or value for the time constant);
 8002a6e:	4ba0      	ldr	r3, [pc, #640]	; (8002cf0 <TIM2_IRQHandler+0xda0>)
 8002a70:	4aa0      	ldr	r2, [pc, #640]	; (8002cf4 <TIM2_IRQHandler+0xda4>)
 8002a72:	601a      	str	r2, [r3, #0]
  	  		  amplification = 0.730;		//VR(inductivity, damping, samplingTime); //(equation to calculate or value for the amplification);
 8002a74:	4ba0      	ldr	r3, [pc, #640]	; (8002cf8 <TIM2_IRQHandler+0xda8>)
 8002a76:	4aa1      	ldr	r2, [pc, #644]	; (8002cfc <TIM2_IRQHandler+0xdac>)
 8002a78:	601a      	str	r2, [r3, #0]
  	  		  controlDeviationOld = controlDeviation;		//saving the last measured value
 8002a7a:	4ba1      	ldr	r3, [pc, #644]	; (8002d00 <TIM2_IRQHandler+0xdb0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4aa1      	ldr	r2, [pc, #644]	; (8002d04 <TIM2_IRQHandler+0xdb4>)
 8002a80:	6013      	str	r3, [r2, #0]
  	  		  if(false == rotationDirectionCW)  //take the current depending on the rotation direction
 8002a82:	4ba1      	ldr	r3, [pc, #644]	; (8002d08 <TIM2_IRQHandler+0xdb8>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <TIM2_IRQHandler+0xb58>
  	  		  {
  	  			controlDeviation = referenceValue - current_IHB2;
 8002a90:	4b95      	ldr	r3, [pc, #596]	; (8002ce8 <TIM2_IRQHandler+0xd98>)
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	4b9d      	ldr	r3, [pc, #628]	; (8002d0c <TIM2_IRQHandler+0xdbc>)
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa0:	4b97      	ldr	r3, [pc, #604]	; (8002d00 <TIM2_IRQHandler+0xdb0>)
 8002aa2:	edc3 7a00 	vstr	s15, [r3]
 8002aa6:	e00a      	b.n	8002abe <TIM2_IRQHandler+0xb6e>
  	  		  }
  	  		  else
  	  		  {
  	  			controlDeviation = referenceValue - current_IHB1;
 8002aa8:	4b8f      	ldr	r3, [pc, #572]	; (8002ce8 <TIM2_IRQHandler+0xd98>)
 8002aaa:	ed93 7a00 	vldr	s14, [r3]
 8002aae:	4b98      	ldr	r3, [pc, #608]	; (8002d10 <TIM2_IRQHandler+0xdc0>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab8:	4b91      	ldr	r3, [pc, #580]	; (8002d00 <TIM2_IRQHandler+0xdb0>)
 8002aba:	edc3 7a00 	vstr	s15, [r3]
  	  		  }
  	  		  controlValueOld = controlValue;	//save last output value
 8002abe:	4b95      	ldr	r3, [pc, #596]	; (8002d14 <TIM2_IRQHandler+0xdc4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a95      	ldr	r2, [pc, #596]	; (8002d18 <TIM2_IRQHandler+0xdc8>)
 8002ac4:	6013      	str	r3, [r2, #0]

  	  		  //equation of our controller to calculate the output value
  	  		  controlValue = controlValueOld + amplification * (controlDeviation - controlDeviationOld) + (amplification / timeConstant) * samplingTime * (controlDeviation + controlDeviationOld) / 2;
 8002ac6:	4b8e      	ldr	r3, [pc, #568]	; (8002d00 <TIM2_IRQHandler+0xdb0>)
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	4b8d      	ldr	r3, [pc, #564]	; (8002d04 <TIM2_IRQHandler+0xdb4>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ad6:	4b88      	ldr	r3, [pc, #544]	; (8002cf8 <TIM2_IRQHandler+0xda8>)
 8002ad8:	edd3 7a00 	vldr	s15, [r3]
 8002adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae0:	4b8d      	ldr	r3, [pc, #564]	; (8002d18 <TIM2_IRQHandler+0xdc8>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aea:	4b83      	ldr	r3, [pc, #524]	; (8002cf8 <TIM2_IRQHandler+0xda8>)
 8002aec:	ed93 6a00 	vldr	s12, [r3]
 8002af0:	4b7f      	ldr	r3, [pc, #508]	; (8002cf0 <TIM2_IRQHandler+0xda0>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <TIM2_IRQHandler+0xdcc>)
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <TIM2_IRQHandler+0xdb0>)
 8002b06:	ed93 6a00 	vldr	s12, [r3]
 8002b0a:	4b7e      	ldr	r3, [pc, #504]	; (8002d04 <TIM2_IRQHandler+0xdb4>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002b14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b18:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002b1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b24:	4b7b      	ldr	r3, [pc, #492]	; (8002d14 <TIM2_IRQHandler+0xdc4>)
 8002b26:	edc3 7a00 	vstr	s15, [r3]
  	  		  //boundaries for the output value, limited by the voltage of the power supply
  	  		  if (controlValue > v_bridge_uf)
 8002b2a:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <TIM2_IRQHandler+0xdc4>)
 8002b2c:	ed93 7a00 	vldr	s14, [r3]
 8002b30:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <TIM2_IRQHandler+0xdd0>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	dd04      	ble.n	8002b4a <TIM2_IRQHandler+0xbfa>
  	  		  {
  	  			  controlValue = v_bridge_uf;
 8002b40:	4b77      	ldr	r3, [pc, #476]	; (8002d20 <TIM2_IRQHandler+0xdd0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a73      	ldr	r2, [pc, #460]	; (8002d14 <TIM2_IRQHandler+0xdc4>)
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e014      	b.n	8002b74 <TIM2_IRQHandler+0xc24>
  	  		  }
  	  		  else if (controlValue < -v_bridge_uf)
 8002b4a:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <TIM2_IRQHandler+0xdd0>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	eeb1 7a67 	vneg.f32	s14, s15
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <TIM2_IRQHandler+0xdc4>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b62:	dd07      	ble.n	8002b74 <TIM2_IRQHandler+0xc24>
  	  		  {
  	  			  controlValue = -v_bridge_uf;
 8002b64:	4b6e      	ldr	r3, [pc, #440]	; (8002d20 <TIM2_IRQHandler+0xdd0>)
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	eef1 7a67 	vneg.f32	s15, s15
 8002b6e:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <TIM2_IRQHandler+0xdc4>)
 8002b70:	edc3 7a00 	vstr	s15, [r3]
  	  		  }
  	  		  //normalization of the output value to get a new duty cycle for the PWM signal
  	  		  controlValuePWM = maxDutyCycle *(controlValue +v_bridge_uf) / (2 * v_bridge_uf);
 8002b74:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <TIM2_IRQHandler+0xdc4>)
 8002b76:	ed93 7a00 	vldr	s14, [r3]
 8002b7a:	4b69      	ldr	r3, [pc, #420]	; (8002d20 <TIM2_IRQHandler+0xdd0>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b84:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <TIM2_IRQHandler+0xdd4>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b8e:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <TIM2_IRQHandler+0xdd0>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9c:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <TIM2_IRQHandler+0xdd8>)
 8002b9e:	edc3 7a00 	vstr	s15, [r3]


  	  		  if(false == rotationDirectionCW) 								//motor rotates counterclockwise
 8002ba2:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <TIM2_IRQHandler+0xdb8>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	f083 0301 	eor.w	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d044      	beq.n	8002c3a <TIM2_IRQHandler+0xcea>
  	  		  {
  	  						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,				//Adjusting x7_U as 0V
 8002bb0:	4b5e      	ldr	r3, [pc, #376]	; (8002d2c <TIM2_IRQHandler+0xddc>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bbc:	4b5c      	ldr	r3, [pc, #368]	; (8002d30 <TIM2_IRQHandler+0xde0>)
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bca:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002ce0 <TIM2_IRQHandler+0xd90>
 8002bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bd2:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <TIM2_IRQHandler+0xde4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002bda:	ee17 2a90 	vmov	r2, s15
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
  	  								  rangeOfSineValues*pwmPeriodConversion*0.05);

  	  						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,				//Adjusting x7_V as the voltage_ref of DC Motor
 8002be0:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <TIM2_IRQHandler+0xddc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <TIM2_IRQHandler+0xde0>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf6:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <TIM2_IRQHandler+0xdd8>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c00:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002c04:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <TIM2_IRQHandler+0xddc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c10:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <TIM2_IRQHandler+0xde0>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c1e:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8002ce0 <TIM2_IRQHandler+0xd90>
 8002c22:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002c26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c2a:	4b42      	ldr	r3, [pc, #264]	; (8002d34 <TIM2_IRQHandler+0xde4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c32:	ee17 2a90 	vmov	r2, s15
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38
  	  								+(rangeOfSineValues*pwmPeriodConversion*0.05));

  	  						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,				//Adjusting x7_V as 0V
  	  								  rangeOfSineValues*pwmPeriodConversion*0.05);
  	  		  }
  	  		  break;
 8002c38:	e045      	b.n	8002cc6 <TIM2_IRQHandler+0xd76>
  	  						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,				//Adjusting x7_U as the voltage_ref of DC Motor
 8002c3a:	4b3c      	ldr	r3, [pc, #240]	; (8002d2c <TIM2_IRQHandler+0xddc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c46:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <TIM2_IRQHandler+0xde0>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c50:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <TIM2_IRQHandler+0xdd8>)
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002c5e:	4b33      	ldr	r3, [pc, #204]	; (8002d2c <TIM2_IRQHandler+0xddc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c6a:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <TIM2_IRQHandler+0xde0>)
 8002c6c:	edd3 7a00 	vldr	s15, [r3]
 8002c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c78:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8002ce0 <TIM2_IRQHandler+0xd90>
 8002c7c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002c80:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <TIM2_IRQHandler+0xde4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c8c:	ee17 2a90 	vmov	r2, s15
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
  	  						  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,				//Adjusting x7_V as 0V
 8002c92:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <TIM2_IRQHandler+0xddc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <TIM2_IRQHandler+0xde0>)
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cac:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002ce0 <TIM2_IRQHandler+0xd90>
 8002cb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <TIM2_IRQHandler+0xde4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cbc:	ee17 2a90 	vmov	r2, s15
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38
  	  		  break;
 8002cc2:	e000      	b.n	8002cc6 <TIM2_IRQHandler+0xd76>
			  break;
 8002cc4:	bf00      	nop
  	  	  }

      }

  	  HAL_GPIO_WritePin(Test_pulse_GPIO_Port, Test_pulse_Pin, 0);//turn off PE4
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2120      	movs	r1, #32
 8002cca:	481b      	ldr	r0, [pc, #108]	; (8002d38 <TIM2_IRQHandler+0xde8>)
 8002ccc:	f002 fb0c 	bl	80052e8 <HAL_GPIO_WritePin>
  	  HAL_IWDG_Refresh(&hiwdg1); //refresh the watchdog
 8002cd0:	481a      	ldr	r0, [pc, #104]	; (8002d3c <TIM2_IRQHandler+0xdec>)
 8002cd2:	f002 fb8d 	bl	80053f0 <HAL_IWDG_Refresh>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	9999999a 	.word	0x9999999a
 8002ce4:	3fa99999 	.word	0x3fa99999
 8002ce8:	2400389c 	.word	0x2400389c
 8002cec:	3f19999a 	.word	0x3f19999a
 8002cf0:	240043ac 	.word	0x240043ac
 8002cf4:	3cf5c28f 	.word	0x3cf5c28f
 8002cf8:	240043b0 	.word	0x240043b0
 8002cfc:	3f3ae148 	.word	0x3f3ae148
 8002d00:	240043bc 	.word	0x240043bc
 8002d04:	240043c0 	.word	0x240043c0
 8002d08:	24003e94 	.word	0x24003e94
 8002d0c:	24003eb4 	.word	0x24003eb4
 8002d10:	24003eb0 	.word	0x24003eb0
 8002d14:	240043c4 	.word	0x240043c4
 8002d18:	240043c8 	.word	0x240043c8
 8002d1c:	24003898 	.word	0x24003898
 8002d20:	24000004 	.word	0x24000004
 8002d24:	240038a0 	.word	0x240038a0
 8002d28:	240043cc 	.word	0x240043cc
 8002d2c:	08011ee0 	.word	0x08011ee0
 8002d30:	2400003c 	.word	0x2400003c
 8002d34:	24003d18 	.word	0x24003d18
 8002d38:	58021000 	.word	0x58021000
 8002d3c:	24003c80 	.word	0x24003c80

08002d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d44:	481a      	ldr	r0, [pc, #104]	; (8002db0 <TIM3_IRQHandler+0x70>)
 8002d46:	f007 f869 	bl	8009e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  if(startInc == 0)	//first value of the incremental encoder
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <TIM3_IRQHandler+0x74>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <TIM3_IRQHandler+0x1e>
  {
	  startInc = TIM5 -> CNT;
 8002d52:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <TIM3_IRQHandler+0x78>)
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <TIM3_IRQHandler+0x74>)
 8002d5a:	601a      	str	r2, [r3, #0]
	  actInc = TIM5 -> CNT;	//actual value of the encoder
	  rotVelo = (actInc - startInc) / totalIncrement * secToMin / period; //calculation of the rotation velocity in rotations per minute
	  startInc = actInc;	//setting the actual number of increments as the last number of increments
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8002d5c:	e026      	b.n	8002dac <TIM3_IRQHandler+0x6c>
	  actInc = TIM5 -> CNT;	//actual value of the encoder
 8002d5e:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <TIM3_IRQHandler+0x78>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <TIM3_IRQHandler+0x7c>)
 8002d66:	601a      	str	r2, [r3, #0]
	  rotVelo = (actInc - startInc) / totalIncrement * secToMin / period; //calculation of the rotation velocity in rotations per minute
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <TIM3_IRQHandler+0x7c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <TIM3_IRQHandler+0x74>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <TIM3_IRQHandler+0x80>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <TIM3_IRQHandler+0x84>)
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <TIM3_IRQHandler+0x88>)
 8002d90:	ed93 7a00 	vldr	s14, [r3]
 8002d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d9c:	ee17 2a90 	vmov	r2, s15
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <TIM3_IRQHandler+0x8c>)
 8002da2:	601a      	str	r2, [r3, #0]
	  startInc = actInc;	//setting the actual number of increments as the last number of increments
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <TIM3_IRQHandler+0x7c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a02      	ldr	r2, [pc, #8]	; (8002db4 <TIM3_IRQHandler+0x74>)
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	24003db0 	.word	0x24003db0
 8002db4:	240043a4 	.word	0x240043a4
 8002db8:	40000c00 	.word	0x40000c00
 8002dbc:	240043a8 	.word	0x240043a8
 8002dc0:	24003890 	.word	0x24003890
 8002dc4:	24003894 	.word	0x24003894
 8002dc8:	2400388c 	.word	0x2400388c
 8002dcc:	2400437c 	.word	0x2400437c

08002dd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002dd4:	4882      	ldr	r0, [pc, #520]	; (8002fe0 <TIM4_IRQHandler+0x210>)
 8002dd6:	f007 f821 	bl	8009e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  dipPositionPrevious = dipPositionCurrent;
 8002dda:	4b82      	ldr	r3, [pc, #520]	; (8002fe4 <TIM4_IRQHandler+0x214>)
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	4b82      	ldr	r3, [pc, #520]	; (8002fe8 <TIM4_IRQHandler+0x218>)
 8002de0:	701a      	strb	r2, [r3, #0]
  dipPositionCurrent = 		HAL_GPIO_ReadPin(DIPSW1_GPIO_Port, DIPSW1_Pin)   +
 8002de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002de6:	4881      	ldr	r0, [pc, #516]	; (8002fec <TIM4_IRQHandler+0x21c>)
 8002de8:	f002 fa66 	bl	80052b8 <HAL_GPIO_ReadPin>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461d      	mov	r5, r3
		  	  	  	  	    HAL_GPIO_ReadPin(DIPSW2_GPIO_Port, DIPSW2_Pin)*2 +
						    HAL_GPIO_ReadPin(DIPSW3_GPIO_Port, DIPSW3_Pin)*4 +
 8002df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002df4:	487d      	ldr	r0, [pc, #500]	; (8002fec <TIM4_IRQHandler+0x21c>)
 8002df6:	f002 fa5f 	bl	80052b8 <HAL_GPIO_ReadPin>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461c      	mov	r4, r3
							HAL_GPIO_ReadPin(DIPSW4_GPIO_Port, DIPSW4_Pin)*8;
 8002dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e02:	487a      	ldr	r0, [pc, #488]	; (8002fec <TIM4_IRQHandler+0x21c>)
 8002e04:	f002 fa58 	bl	80052b8 <HAL_GPIO_ReadPin>
 8002e08:	4603      	mov	r3, r0
						    HAL_GPIO_ReadPin(DIPSW3_GPIO_Port, DIPSW3_Pin)*4 +
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	4423      	add	r3, r4
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	b2dc      	uxtb	r4, r3
		  	  	  	  	    HAL_GPIO_ReadPin(DIPSW2_GPIO_Port, DIPSW2_Pin)*2 +
 8002e16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e1a:	4874      	ldr	r0, [pc, #464]	; (8002fec <TIM4_IRQHandler+0x21c>)
 8002e1c:	f002 fa4c 	bl	80052b8 <HAL_GPIO_ReadPin>
 8002e20:	4603      	mov	r3, r0
						    HAL_GPIO_ReadPin(DIPSW3_GPIO_Port, DIPSW3_Pin)*4 +
 8002e22:	4423      	add	r3, r4
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	442b      	add	r3, r5
 8002e2c:	b2da      	uxtb	r2, r3
  dipPositionCurrent = 		HAL_GPIO_ReadPin(DIPSW1_GPIO_Port, DIPSW1_Pin)   +
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	; (8002fe4 <TIM4_IRQHandler+0x214>)
 8002e30:	701a      	strb	r2, [r3, #0]
  if(no_Error == error)
 8002e32:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <TIM4_IRQHandler+0x220>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d132      	bne.n	8002ea0 <TIM4_IRQHandler+0xd0>
  {
	if(dipPositionCurrent != dipPositionPrevious)
 8002e3a:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <TIM4_IRQHandler+0x214>)
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <TIM4_IRQHandler+0x218>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d079      	beq.n	8002f3a <TIM4_IRQHandler+0x16a>
	  {
		  switch (dipPositionCurrent)
 8002e46:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <TIM4_IRQHandler+0x214>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d876      	bhi.n	8002f3c <TIM4_IRQHandler+0x16c>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <TIM4_IRQHandler+0x84>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e79 	.word	0x08002e79
 8002e58:	08002e81 	.word	0x08002e81
 8002e5c:	08002e89 	.word	0x08002e89
 8002e60:	08002e91 	.word	0x08002e91
 8002e64:	08002f3d 	.word	0x08002f3d
 8002e68:	08002f3d 	.word	0x08002f3d
 8002e6c:	08002f3d 	.word	0x08002f3d
 8002e70:	08002f3d 	.word	0x08002f3d
 8002e74:	08002e99 	.word	0x08002e99
		  {
			  case 0:
			  {
				  operationMode = turnOff;
 8002e78:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <TIM4_IRQHandler+0x224>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
				  break;
 8002e7e:	e05d      	b.n	8002f3c <TIM4_IRQHandler+0x16c>
			  }
			  case 1:
			  {
				  operationMode = start_threePhaseMode;
 8002e80:	4b5c      	ldr	r3, [pc, #368]	; (8002ff4 <TIM4_IRQHandler+0x224>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
				  break;
 8002e86:	e059      	b.n	8002f3c <TIM4_IRQHandler+0x16c>
			  }
			  case 2:
			  {
				  operationMode = start_DCMode;
 8002e88:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <TIM4_IRQHandler+0x224>)
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
				  break;
 8002e8e:	e055      	b.n	8002f3c <TIM4_IRQHandler+0x16c>
			  }
			  case 3:
			  {
				  operationMode = start_calibrateADC;
 8002e90:	4b58      	ldr	r3, [pc, #352]	; (8002ff4 <TIM4_IRQHandler+0x224>)
 8002e92:	2203      	movs	r2, #3
 8002e94:	701a      	strb	r2, [r3, #0]
				  break;
 8002e96:	e051      	b.n	8002f3c <TIM4_IRQHandler+0x16c>
			  }
			  case 8:
			  {
				  operationMode = start_control;
 8002e98:	4b56      	ldr	r3, [pc, #344]	; (8002ff4 <TIM4_IRQHandler+0x224>)
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	701a      	strb	r2, [r3, #0]
				  break;
 8002e9e:	e04d      	b.n	8002f3c <TIM4_IRQHandler+0x16c>
		  }
	  }
  }
  else
  {
	  HAL_GPIO_WritePin(EN_BRUECKE_1_GPIO_Port, EN_BRUECKE_1_Pin, 0);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ea6:	4854      	ldr	r0, [pc, #336]	; (8002ff8 <TIM4_IRQHandler+0x228>)
 8002ea8:	f002 fa1e 	bl	80052e8 <HAL_GPIO_WritePin>
	  switch(error)
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <TIM4_IRQHandler+0x220>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d822      	bhi.n	8002efc <TIM4_IRQHandler+0x12c>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <TIM4_IRQHandler+0xec>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002ed9 	.word	0x08002ed9
 8002ec4:	08002ee5 	.word	0x08002ee5
 8002ec8:	08002ef1 	.word	0x08002ef1
	  {
		  case invalidValues_Error://one of the entered variables lies outside the permitted range of values
		  {
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	2101      	movs	r1, #1
 8002ed0:	484a      	ldr	r0, [pc, #296]	; (8002ffc <TIM4_IRQHandler+0x22c>)
 8002ed2:	f002 fa09 	bl	80052e8 <HAL_GPIO_WritePin>
			  break;
 8002ed6:	e011      	b.n	8002efc <TIM4_IRQHandler+0x12c>
		  }
		  case overcurrent_Error://too high current
		  {
			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2102      	movs	r1, #2
 8002edc:	4847      	ldr	r0, [pc, #284]	; (8002ffc <TIM4_IRQHandler+0x22c>)
 8002ede:	f002 fa03 	bl	80052e8 <HAL_GPIO_WritePin>
			  break;
 8002ee2:	e00b      	b.n	8002efc <TIM4_IRQHandler+0x12c>
		  }
		  case watchdog_Error://watchdog of TIM2
		  {
			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	4844      	ldr	r0, [pc, #272]	; (8002ffc <TIM4_IRQHandler+0x22c>)
 8002eea:	f002 f9fd 	bl	80052e8 <HAL_GPIO_WritePin>
			  break;
 8002eee:	e005      	b.n	8002efc <TIM4_IRQHandler+0x12c>
		  }
		  case opticalFiber_Error://The optical fibers aren't correctly connected
		  {
			  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2108      	movs	r1, #8
 8002ef4:	4841      	ldr	r0, [pc, #260]	; (8002ffc <TIM4_IRQHandler+0x22c>)
 8002ef6:	f002 f9f7 	bl	80052e8 <HAL_GPIO_WritePin>
			  break;
 8002efa:	bf00      	nop
		  }
	  }
	  if(0 == dipPositionCurrent)//acknowledge the error message
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <TIM4_IRQHandler+0x214>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d11b      	bne.n	8002f3c <TIM4_IRQHandler+0x16c>
	  {
		  error = no_Error;
 8002f04:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <TIM4_IRQHandler+0x220>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	483b      	ldr	r0, [pc, #236]	; (8002ffc <TIM4_IRQHandler+0x22c>)
 8002f10:	f002 f9ea 	bl	80052e8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2102      	movs	r1, #2
 8002f18:	4838      	ldr	r0, [pc, #224]	; (8002ffc <TIM4_IRQHandler+0x22c>)
 8002f1a:	f002 f9e5 	bl	80052e8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2104      	movs	r1, #4
 8002f22:	4836      	ldr	r0, [pc, #216]	; (8002ffc <TIM4_IRQHandler+0x22c>)
 8002f24:	f002 f9e0 	bl	80052e8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2108      	movs	r1, #8
 8002f2c:	4833      	ldr	r0, [pc, #204]	; (8002ffc <TIM4_IRQHandler+0x22c>)
 8002f2e:	f002 f9db 	bl	80052e8 <HAL_GPIO_WritePin>
		  operationMode = turnOff;
 8002f32:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <TIM4_IRQHandler+0x224>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e000      	b.n	8002f3c <TIM4_IRQHandler+0x16c>
	  }
 8002f3a:	bf00      	nop
	  }
  }
//  checking if all user values are in permitted range
  if((voltage_ref > maxTensionRelationship* v_bridge_uf)
 8002f3c:	4b30      	ldr	r3, [pc, #192]	; (8003000 <TIM4_IRQHandler+0x230>)
 8002f3e:	ed93 7a00 	vldr	s14, [r3]
 8002f42:	4b30      	ldr	r3, [pc, #192]	; (8003004 <TIM4_IRQHandler+0x234>)
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f4c:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <TIM4_IRQHandler+0x238>)
 8002f4e:	edd3 7a00 	vldr	s15, [r3]
 8002f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5a:	d435      	bmi.n	8002fc8 <TIM4_IRQHandler+0x1f8>
   ||(v_bridge_uf <  10)
 8002f5c:	4b29      	ldr	r3, [pc, #164]	; (8003004 <TIM4_IRQHandler+0x234>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	d42b      	bmi.n	8002fc8 <TIM4_IRQHandler+0x1f8>
   ||(v_bridge_uf > 60)
 8002f70:	4b24      	ldr	r3, [pc, #144]	; (8003004 <TIM4_IRQHandler+0x234>)
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800300c <TIM4_IRQHandler+0x23c>
 8002f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f82:	dc21      	bgt.n	8002fc8 <TIM4_IRQHandler+0x1f8>
   ||(frequency <-200  )
 8002f84:	4b22      	ldr	r3, [pc, #136]	; (8003010 <TIM4_IRQHandler+0x240>)
 8002f86:	edd3 7a00 	vldr	s15, [r3]
 8002f8a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003014 <TIM4_IRQHandler+0x244>
 8002f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	d417      	bmi.n	8002fc8 <TIM4_IRQHandler+0x1f8>
   ||(frequency > 200  )
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <TIM4_IRQHandler+0x240>)
 8002f9a:	edd3 7a00 	vldr	s15, [r3]
 8002f9e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003018 <TIM4_IRQHandler+0x248>
 8002fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002faa:	dc0d      	bgt.n	8002fc8 <TIM4_IRQHandler+0x1f8>
   ||(overCurrentThreshold > 15)//square(2)*10+noise
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <TIM4_IRQHandler+0x24c>)
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbe:	dc03      	bgt.n	8002fc8 <TIM4_IRQHandler+0x1f8>
   ||(numberOfAveragedValues > 100))
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <TIM4_IRQHandler+0x250>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b64      	cmp	r3, #100	; 0x64
 8002fc6:	d908      	bls.n	8002fda <TIM4_IRQHandler+0x20a>
  {
	  HAL_GPIO_WritePin(EN_BRUECKE_1_GPIO_Port, EN_BRUECKE_1_Pin, 0); //disable bridge
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fce:	480a      	ldr	r0, [pc, #40]	; (8002ff8 <TIM4_IRQHandler+0x228>)
 8002fd0:	f002 f98a 	bl	80052e8 <HAL_GPIO_WritePin>
	  error = invalidValues_Error;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <TIM4_IRQHandler+0x220>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	24003dfc 	.word	0x24003dfc
 8002fe4:	24004381 	.word	0x24004381
 8002fe8:	24004380 	.word	0x24004380
 8002fec:	58022000 	.word	0x58022000
 8002ff0:	24003ec0 	.word	0x24003ec0
 8002ff4:	24004382 	.word	0x24004382
 8002ff8:	58021000 	.word	0x58021000
 8002ffc:	58021400 	.word	0x58021400
 8003000:	24000018 	.word	0x24000018
 8003004:	24000004 	.word	0x24000004
 8003008:	24000008 	.word	0x24000008
 800300c:	42700000 	.word	0x42700000
 8003010:	24000000 	.word	0x24000000
 8003014:	c3480000 	.word	0xc3480000
 8003018:	43480000 	.word	0x43480000
 800301c:	08011ed4 	.word	0x08011ed4
 8003020:	24000014 	.word	0x24000014

08003024 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003028:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800302c:	f002 f975 	bl	800531a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003030:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003034:	f002 f971 	bl	800531a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}

0800303c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <TIM5_IRQHandler+0x10>)
 8003042:	f006 feeb 	bl	8009e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	24003e48 	.word	0x24003e48

08003050 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <OTG_FS_IRQHandler+0x10>)
 8003056:	f002 fb32 	bl	80056be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	24006164 	.word	0x24006164

08003064 <DMA1_Stream0_IRQHandler>:

/* USER CODE BEGIN 1 */

void DMA1_Stream0_IRQHandler (void)									// DMA RX
 {
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
 DMA1->LIFCR = DMA_LIFCR_CTCIF0;									// clear DMA stream complete interrupt
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <DMA1_Stream0_IRQHandler+0x28>)
 800306a:	2220      	movs	r2, #32
 800306c:	609a      	str	r2, [r3, #8]
 DMA1_Stream0->M0AR = (uint32_t)(&(buffer[0][0]));					// this when NDTR = 300 (buffer 100 * sequences 3)
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <DMA1_Stream0_IRQHandler+0x2c>)
 8003070:	4a08      	ldr	r2, [pc, #32]	; (8003094 <DMA1_Stream0_IRQHandler+0x30>)
 8003072:	60da      	str	r2, [r3, #12]
 DMA1_Stream0->CR |= DMA_SxCR_EN;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <DMA1_Stream0_IRQHandler+0x2c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a05      	ldr	r2, [pc, #20]	; (8003090 <DMA1_Stream0_IRQHandler+0x2c>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6013      	str	r3, [r2, #0]
 }
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40020000 	.word	0x40020000
 8003090:	40020010 	.word	0x40020010
 8003094:	24003ecc 	.word	0x24003ecc

08003098 <ADC_IRQHandler>:
//the modules U16, U17 and U18 (MCR1101-50-3) measure the three currents that flow into the motor (range of possible measured values: -20V to 20V).
//Proportional to the flowing current, each module generates a tension in the range from 0.33V to 2.97V.
//The ADC_IRQHandler is reading out this tension from the pins: PA4(IHB1_UC), PA6(IHB2_UC), PC4(IHB3_UC) and makes an AD conversion
//Than the digits get converted to the actual current values.
//If the current exceeds the "overCurrentThreshold" (max. 10A) the bridge gets disabled.
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
//		    bufferFlag = 0;
//		}
//	}
	//HAL_GPIO_WritePin(Test_pulse_GPIO_Port, Test_pulse_Pin, 0);

	if (ADC1->ISR & ADC_ISR_AWD1) //Analog Watchdog, if overCurrentThreshold is reached
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <ADC_IRQHandler+0x34>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00e      	beq.n	80030c6 <ADC_IRQHandler+0x2e>
	  {
		ADC1->ISR |= ADC_ISR_AWD1;										// clear by writing 1
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <ADC_IRQHandler+0x34>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a07      	ldr	r2, [pc, #28]	; (80030cc <ADC_IRQHandler+0x34>)
 80030ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b2:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(EN_BRUECKE_1_GPIO_Port, EN_BRUECKE_1_Pin, 0); //the bridge gets disabled
 80030b4:	2200      	movs	r2, #0
 80030b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <ADC_IRQHandler+0x38>)
 80030bc:	f002 f914 	bl	80052e8 <HAL_GPIO_WritePin>
		error = overcurrent_Error;
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <ADC_IRQHandler+0x3c>)
 80030c2:	2202      	movs	r2, #2
 80030c4:	701a      	strb	r2, [r3, #0]
	  }
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	58021000 	.word	0x58021000
 80030d4:	24003ec0 	.word	0x24003ec0

080030d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
	return 1;
 80030dc:	2301      	movs	r3, #1
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <_kill>:

int _kill(int pid, int sig)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030f2:	f00b fd3d 	bl	800eb70 <__errno>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2216      	movs	r2, #22
 80030fa:	601a      	str	r2, [r3, #0]
	return -1;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <_exit>:

void _exit (int status)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ffe7 	bl	80030e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800311a:	e7fe      	b.n	800311a <_exit+0x12>

0800311c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	e00a      	b.n	8003144 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800312e:	f3af 8000 	nop.w
 8003132:	4601      	mov	r1, r0
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	60ba      	str	r2, [r7, #8]
 800313a:	b2ca      	uxtb	r2, r1
 800313c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	dbf0      	blt.n	800312e <_read+0x12>
	}

return len;
 800314c:	687b      	ldr	r3, [r7, #4]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e009      	b.n	800317c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	60ba      	str	r2, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3301      	adds	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	dbf1      	blt.n	8003168 <_write+0x12>
	}
	return len;
 8003184:	687b      	ldr	r3, [r7, #4]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <_close>:

int _close(int file)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
	return -1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031b6:	605a      	str	r2, [r3, #4]
	return 0;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <_isatty>:

int _isatty(int file)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
	return 1;
 80031ce:	2301      	movs	r3, #1
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
	return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <_sbrk+0x5c>)
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <_sbrk+0x60>)
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <_sbrk+0x64>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <_sbrk+0x64>)
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <_sbrk+0x68>)
 8003218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	429a      	cmp	r2, r3
 8003226:	d207      	bcs.n	8003238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003228:	f00b fca2 	bl	800eb70 <__errno>
 800322c:	4603      	mov	r3, r0
 800322e:	220c      	movs	r2, #12
 8003230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295
 8003236:	e009      	b.n	800324c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <_sbrk+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <_sbrk+0x64>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <_sbrk+0x64>)
 8003248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	24080000 	.word	0x24080000
 8003258:	00000400 	.word	0x00000400
 800325c:	240043d0 	.word	0x240043d0
 8003260:	24006580 	.word	0x24006580

08003264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003268:	4b39      	ldr	r3, [pc, #228]	; (8003350 <SystemInit+0xec>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	4a38      	ldr	r2, [pc, #224]	; (8003350 <SystemInit+0xec>)
 8003270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <SystemInit+0xf0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	2b06      	cmp	r3, #6
 8003282:	d807      	bhi.n	8003294 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003284:	4b33      	ldr	r3, [pc, #204]	; (8003354 <SystemInit+0xf0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 030f 	bic.w	r3, r3, #15
 800328c:	4a31      	ldr	r2, [pc, #196]	; (8003354 <SystemInit+0xf0>)
 800328e:	f043 0307 	orr.w	r3, r3, #7
 8003292:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003294:	4b30      	ldr	r3, [pc, #192]	; (8003358 <SystemInit+0xf4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2f      	ldr	r2, [pc, #188]	; (8003358 <SystemInit+0xf4>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032a0:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <SystemInit+0xf4>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80032a6:	4b2c      	ldr	r3, [pc, #176]	; (8003358 <SystemInit+0xf4>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	492b      	ldr	r1, [pc, #172]	; (8003358 <SystemInit+0xf4>)
 80032ac:	4b2b      	ldr	r3, [pc, #172]	; (800335c <SystemInit+0xf8>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <SystemInit+0xf0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <SystemInit+0xf0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 030f 	bic.w	r3, r3, #15
 80032c6:	4a23      	ldr	r2, [pc, #140]	; (8003354 <SystemInit+0xf0>)
 80032c8:	f043 0307 	orr.w	r3, r3, #7
 80032cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032ce:	4b22      	ldr	r3, [pc, #136]	; (8003358 <SystemInit+0xf4>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032d4:	4b20      	ldr	r3, [pc, #128]	; (8003358 <SystemInit+0xf4>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032da:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <SystemInit+0xf4>)
 80032dc:	2200      	movs	r2, #0
 80032de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <SystemInit+0xf4>)
 80032e2:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <SystemInit+0xfc>)
 80032e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <SystemInit+0xf4>)
 80032e8:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <SystemInit+0x100>)
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032ec:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <SystemInit+0xf4>)
 80032ee:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <SystemInit+0x104>)
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <SystemInit+0xf4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032f8:	4b17      	ldr	r3, [pc, #92]	; (8003358 <SystemInit+0xf4>)
 80032fa:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <SystemInit+0x104>)
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <SystemInit+0xf4>)
 8003300:	2200      	movs	r2, #0
 8003302:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <SystemInit+0xf4>)
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <SystemInit+0x104>)
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <SystemInit+0xf4>)
 800330c:	2200      	movs	r2, #0
 800330e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <SystemInit+0xf4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a10      	ldr	r2, [pc, #64]	; (8003358 <SystemInit+0xf4>)
 8003316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <SystemInit+0xf4>)
 800331e:	2200      	movs	r2, #0
 8003320:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <SystemInit+0x108>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <SystemInit+0x10c>)
 8003328:	4013      	ands	r3, r2
 800332a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800332e:	d202      	bcs.n	8003336 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <SystemInit+0x110>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <SystemInit+0x114>)
 8003338:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800333c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800333e:	4b04      	ldr	r3, [pc, #16]	; (8003350 <SystemInit+0xec>)
 8003340:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003344:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003346:	bf00      	nop
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00
 8003354:	52002000 	.word	0x52002000
 8003358:	58024400 	.word	0x58024400
 800335c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003360:	02020200 	.word	0x02020200
 8003364:	01ff0000 	.word	0x01ff0000
 8003368:	01010280 	.word	0x01010280
 800336c:	5c001000 	.word	0x5c001000
 8003370:	ffff0000 	.word	0xffff0000
 8003374:	51008108 	.word	0x51008108
 8003378:	52004000 	.word	0x52004000

0800337c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800337c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033b4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003380:	f7ff ff70 	bl	8003264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003386:	e003      	b.n	8003390 <LoopCopyDataInit>

08003388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800338a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800338c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800338e:	3104      	adds	r1, #4

08003390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003390:	480a      	ldr	r0, [pc, #40]	; (80033bc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003398:	d3f6      	bcc.n	8003388 <CopyDataInit>
  ldr  r2, =_sbss
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800339c:	e002      	b.n	80033a4 <LoopFillZerobss>

0800339e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800339e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033a0:	f842 3b04 	str.w	r3, [r2], #4

080033a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80033a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033a8:	d3f9      	bcc.n	800339e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033aa:	f00b fbe7 	bl	800eb7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ae:	f7fd fcbb 	bl	8000d28 <main>
  bx  lr    
 80033b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033b4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80033b8:	08012498 	.word	0x08012498
  ldr  r0, =_sdata
 80033bc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80033c0:	24003c00 	.word	0x24003c00
  ldr  r2, =_sbss
 80033c4:	24003c00 	.word	0x24003c00
  ldr  r3, = _ebss
 80033c8:	2400657c 	.word	0x2400657c

080033cc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033cc:	e7fe      	b.n	80033cc <ADC3_IRQHandler>

080033ce <getFloatOfMessage>:




void getFloatOfMessage(char *message, char *commandstring, float value)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	ed87 0a01 	vstr	s0, [r7, #4]
	char *s;
	s = strstr(message, commandstring);      // search for searchedstring in message
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f00b fd67 	bl	800eeb2 <strstr>
 80033e4:	6178      	str	r0, [r7, #20]
	s =  s + strlen(commandstring);// index of s in buff can be found by pointer subtraction
 80033e6:	68b8      	ldr	r0, [r7, #8]
 80033e8:	f7fc ff7a 	bl	80002e0 <strlen>
 80033ec:	4602      	mov	r2, r0
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4413      	add	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
	value = (float_t)strtod(s, NULL);
 80033f4:	2100      	movs	r1, #0
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f00c fb44 	bl	800fa84 <strtod>
 80033fc:	eeb0 7b40 	vmov.f64	d7, d0
 8003400:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003404:	edc7 7a01 	vstr	s15, [r7, #4]
}
 8003408:	bf00      	nop
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <setUEBValues>:

void setUEBValues(char *message)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	if(strstr(message, SETVCCVOLTAGE) != NULL){
 8003418:	4956      	ldr	r1, [pc, #344]	; (8003574 <setUEBValues+0x164>)
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f00b fd49 	bl	800eeb2 <strstr>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <setUEBValues+0x2a>
		getFloatOfMessage(message, (char *)SETVCCVOLTAGE, pUEB_status.vccvoltage);
 8003426:	4b54      	ldr	r3, [pc, #336]	; (8003578 <setUEBValues+0x168>)
 8003428:	edd3 7a01 	vldr	s15, [r3, #4]
 800342c:	eeb0 0a67 	vmov.f32	s0, s15
 8003430:	4950      	ldr	r1, [pc, #320]	; (8003574 <setUEBValues+0x164>)
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ffcb 	bl	80033ce <getFloatOfMessage>
	} else if(strstr(message, SETNUMAVERAGED) != NULL){
		getFloatOfMessage(message, (char *)SETNUMAVERAGED, pUEB_status.averagenum);
	} else {
		setBuffer((uint8_t*)"Error: Wrong Command\r", strlen("Error: Wrong Command\r"));
	}
}
 8003438:	e098      	b.n	800356c <setUEBValues+0x15c>
	} else if(strstr(message, SETOUTVOLTAGE) != NULL){
 800343a:	4950      	ldr	r1, [pc, #320]	; (800357c <setUEBValues+0x16c>)
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f00b fd38 	bl	800eeb2 <strstr>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <setUEBValues+0x4c>
		getFloatOfMessage(message, (char *)SETOUTVOLTAGE, pUEB_status.outvoltage);
 8003448:	4b4b      	ldr	r3, [pc, #300]	; (8003578 <setUEBValues+0x168>)
 800344a:	edd3 7a02 	vldr	s15, [r3, #8]
 800344e:	eeb0 0a67 	vmov.f32	s0, s15
 8003452:	494a      	ldr	r1, [pc, #296]	; (800357c <setUEBValues+0x16c>)
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ffba 	bl	80033ce <getFloatOfMessage>
}
 800345a:	e087      	b.n	800356c <setUEBValues+0x15c>
	} else if(strstr(message, SETFREQUENCY) != NULL){
 800345c:	4948      	ldr	r1, [pc, #288]	; (8003580 <setUEBValues+0x170>)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f00b fd27 	bl	800eeb2 <strstr>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <setUEBValues+0x6e>
		getFloatOfMessage(message, (char *)SETFREQUENCY, pUEB_status.frequency);
 800346a:	4b43      	ldr	r3, [pc, #268]	; (8003578 <setUEBValues+0x168>)
 800346c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003470:	eeb0 0a67 	vmov.f32	s0, s15
 8003474:	4942      	ldr	r1, [pc, #264]	; (8003580 <setUEBValues+0x170>)
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ffa9 	bl	80033ce <getFloatOfMessage>
}
 800347c:	e076      	b.n	800356c <setUEBValues+0x15c>
	} else if(strstr(message, SETROTATION) != NULL){
 800347e:	4941      	ldr	r1, [pc, #260]	; (8003584 <setUEBValues+0x174>)
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f00b fd16 	bl	800eeb2 <strstr>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <setUEBValues+0x98>
		getFloatOfMessage(message, (char *)SETROTATION, pUEB_status.rotationdirection);
 800348c:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <setUEBValues+0x168>)
 800348e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349a:	eeb0 0a67 	vmov.f32	s0, s15
 800349e:	4939      	ldr	r1, [pc, #228]	; (8003584 <setUEBValues+0x174>)
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff94 	bl	80033ce <getFloatOfMessage>
}
 80034a6:	e061      	b.n	800356c <setUEBValues+0x15c>
	} else if(strstr(message, SETTHIRDHARMONIC) != NULL){
 80034a8:	4937      	ldr	r1, [pc, #220]	; (8003588 <setUEBValues+0x178>)
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f00b fd01 	bl	800eeb2 <strstr>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <setUEBValues+0xc0>
		getFloatOfMessage(message, (char *)SETTHIRDHARMONIC, pUEB_status.thirdharmonic);
 80034b6:	4b30      	ldr	r3, [pc, #192]	; (8003578 <setUEBValues+0x168>)
 80034b8:	7c1b      	ldrb	r3, [r3, #16]
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c2:	eeb0 0a67 	vmov.f32	s0, s15
 80034c6:	4930      	ldr	r1, [pc, #192]	; (8003588 <setUEBValues+0x178>)
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff80 	bl	80033ce <getFloatOfMessage>
}
 80034ce:	e04d      	b.n	800356c <setUEBValues+0x15c>
	} else if(strstr(message, SETSOFTSTART) != NULL){
 80034d0:	492e      	ldr	r1, [pc, #184]	; (800358c <setUEBValues+0x17c>)
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f00b fced 	bl	800eeb2 <strstr>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <setUEBValues+0xe8>
		getFloatOfMessage(message, (char *)SETSOFTSTART, pUEB_status.softstart);
 80034de:	4b26      	ldr	r3, [pc, #152]	; (8003578 <setUEBValues+0x168>)
 80034e0:	7c5b      	ldrb	r3, [r3, #17]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	eeb0 0a67 	vmov.f32	s0, s15
 80034ee:	4927      	ldr	r1, [pc, #156]	; (800358c <setUEBValues+0x17c>)
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff ff6c 	bl	80033ce <getFloatOfMessage>
}
 80034f6:	e039      	b.n	800356c <setUEBValues+0x15c>
	} else if(strstr(message, SETSOFTSTARTDURATION) != NULL){
 80034f8:	4925      	ldr	r1, [pc, #148]	; (8003590 <setUEBValues+0x180>)
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f00b fcd9 	bl	800eeb2 <strstr>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <setUEBValues+0x10a>
		getFloatOfMessage(message, (char *)SETSOFTSTARTDURATION, pUEB_status.softstartduration);
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <setUEBValues+0x168>)
 8003508:	edd3 7a05 	vldr	s15, [r3, #20]
 800350c:	eeb0 0a67 	vmov.f32	s0, s15
 8003510:	491f      	ldr	r1, [pc, #124]	; (8003590 <setUEBValues+0x180>)
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ff5b 	bl	80033ce <getFloatOfMessage>
}
 8003518:	e028      	b.n	800356c <setUEBValues+0x15c>
	} else if(strstr(message, SETMAXCURRENT) != NULL){
 800351a:	491e      	ldr	r1, [pc, #120]	; (8003594 <setUEBValues+0x184>)
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f00b fcc8 	bl	800eeb2 <strstr>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <setUEBValues+0x12c>
		getFloatOfMessage(message, (char *)SETMAXCURRENT, pUEB_status.maxcurrent);
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <setUEBValues+0x168>)
 800352a:	edd3 7a06 	vldr	s15, [r3, #24]
 800352e:	eeb0 0a67 	vmov.f32	s0, s15
 8003532:	4918      	ldr	r1, [pc, #96]	; (8003594 <setUEBValues+0x184>)
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff4a 	bl	80033ce <getFloatOfMessage>
}
 800353a:	e017      	b.n	800356c <setUEBValues+0x15c>
	} else if(strstr(message, SETNUMAVERAGED) != NULL){
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <setUEBValues+0x188>)
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f00b fcb7 	bl	800eeb2 <strstr>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <setUEBValues+0x154>
		getFloatOfMessage(message, (char *)SETNUMAVERAGED, pUEB_status.averagenum);
 800354a:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <setUEBValues+0x168>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003556:	eeb0 0a67 	vmov.f32	s0, s15
 800355a:	490f      	ldr	r1, [pc, #60]	; (8003598 <setUEBValues+0x188>)
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff36 	bl	80033ce <getFloatOfMessage>
}
 8003562:	e003      	b.n	800356c <setUEBValues+0x15c>
		setBuffer((uint8_t*)"Error: Wrong Command\r", strlen("Error: Wrong Command\r"));
 8003564:	2115      	movs	r1, #21
 8003566:	480d      	ldr	r0, [pc, #52]	; (800359c <setUEBValues+0x18c>)
 8003568:	f000 fa4a 	bl	8003a00 <setBuffer>
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	08011f48 	.word	0x08011f48
 8003578:	240047d8 	.word	0x240047d8
 800357c:	08011f54 	.word	0x08011f54
 8003580:	08011f60 	.word	0x08011f60
 8003584:	08011f6c 	.word	0x08011f6c
 8003588:	08011f78 	.word	0x08011f78
 800358c:	08011f88 	.word	0x08011f88
 8003590:	08011f98 	.word	0x08011f98
 8003594:	08011fa8 	.word	0x08011fa8
 8003598:	08011fb8 	.word	0x08011fb8
 800359c:	08011dd0 	.word	0x08011dd0

080035a0 <decodeMessage>:
//	s = s + strlen(commandstring);
//	value = (uint32_t)strtod(s, NULL);
//}

void decodeMessage(char *message)
{
 80035a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a2:	b09b      	sub	sp, #108	; 0x6c
 80035a4:	af14      	add	r7, sp, #80	; 0x50
 80035a6:	60f8      	str	r0, [r7, #12]
	if (strstr(message, UEBREADY) != NULL) {
 80035a8:	213f      	movs	r1, #63	; 0x3f
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f00b fc6c 	bl	800ee88 <strchr>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <decodeMessage+0x20>
		setBuffer((uint8_t*)UEB_VERSION, strlen(UEB_VERSION));
 80035b6:	210f      	movs	r1, #15
 80035b8:	4860      	ldr	r0, [pc, #384]	; (800373c <decodeMessage+0x19c>)
 80035ba:	f000 fa21 	bl	8003a00 <setBuffer>
				break;
		}
	} else {
		setUEBValues(message);
	}
}
 80035be:	e0b9      	b.n	8003734 <decodeMessage+0x194>
	} else if(strstr(message, GETMEASURES) != NULL){
 80035c0:	495f      	ldr	r1, [pc, #380]	; (8003740 <decodeMessage+0x1a0>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f00b fc75 	bl	800eeb2 <strstr>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <decodeMessage+0x36>
		pUEB_status.status = UEB_RUN;
 80035ce:	4b5d      	ldr	r3, [pc, #372]	; (8003744 <decodeMessage+0x1a4>)
 80035d0:	2202      	movs	r2, #2
 80035d2:	701a      	strb	r2, [r3, #0]
}
 80035d4:	e0ae      	b.n	8003734 <decodeMessage+0x194>
	} else if(strstr(message, STOPMEASURES) != NULL){
 80035d6:	495c      	ldr	r1, [pc, #368]	; (8003748 <decodeMessage+0x1a8>)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f00b fc6a 	bl	800eeb2 <strstr>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <decodeMessage+0x4c>
		pUEB_status.status = UEB_STOP;
 80035e4:	4b57      	ldr	r3, [pc, #348]	; (8003744 <decodeMessage+0x1a4>)
 80035e6:	2203      	movs	r2, #3
 80035e8:	701a      	strb	r2, [r3, #0]
}
 80035ea:	e0a3      	b.n	8003734 <decodeMessage+0x194>
	} else if(strstr(message, GETPARAMETERS) != NULL){
 80035ec:	4957      	ldr	r1, [pc, #348]	; (800374c <decodeMessage+0x1ac>)
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f00b fc5f 	bl	800eeb2 <strstr>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d07a      	beq.n	80036f0 <decodeMessage+0x150>
		string = malloc(1024);
 80035fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035fe:	f00b fae1 	bl	800ebc4 <malloc>
 8003602:	4603      	mov	r3, r0
 8003604:	617b      	str	r3, [r7, #20]
				GETSTATUS, (uint8_t)pUEB_status.status, SETVCCVOLTAGE, (uint8_t)pUEB_status.vccvoltage,
 8003606:	4b4f      	ldr	r3, [pc, #316]	; (8003744 <decodeMessage+0x1a4>)
 8003608:	781b      	ldrb	r3, [r3, #0]
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 800360a:	461a      	mov	r2, r3
				GETSTATUS, (uint8_t)pUEB_status.status, SETVCCVOLTAGE, (uint8_t)pUEB_status.vccvoltage,
 800360c:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <decodeMessage+0x1a4>)
 800360e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003616:	edc7 7a02 	vstr	s15, [r7, #8]
 800361a:	7a3b      	ldrb	r3, [r7, #8]
 800361c:	b2db      	uxtb	r3, r3
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 800361e:	4619      	mov	r1, r3
				SETOUTVOLTAGE, (uint8_t)pUEB_status.outvoltage, SETFREQUENCY, (uint8_t)pUEB_status.frequency,
 8003620:	4b48      	ldr	r3, [pc, #288]	; (8003744 <decodeMessage+0x1a4>)
 8003622:	edd3 7a02 	vldr	s15, [r3, #8]
 8003626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362a:	edc7 7a02 	vstr	s15, [r7, #8]
 800362e:	7a3b      	ldrb	r3, [r7, #8]
 8003630:	b2db      	uxtb	r3, r3
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 8003632:	4618      	mov	r0, r3
				SETOUTVOLTAGE, (uint8_t)pUEB_status.outvoltage, SETFREQUENCY, (uint8_t)pUEB_status.frequency,
 8003634:	4b43      	ldr	r3, [pc, #268]	; (8003744 <decodeMessage+0x1a4>)
 8003636:	edd3 7a03 	vldr	s15, [r3, #12]
 800363a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800363e:	edc7 7a02 	vstr	s15, [r7, #8]
 8003642:	7a3b      	ldrb	r3, [r7, #8]
 8003644:	b2db      	uxtb	r3, r3
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 8003646:	461c      	mov	r4, r3
				SETROTATION, (uint8_t)pUEB_status.rotationdirection, SETTHIRDHARMONIC, (uint8_t)pUEB_status.thirdharmonic,
 8003648:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <decodeMessage+0x1a4>)
 800364a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 800364e:	461d      	mov	r5, r3
				SETROTATION, (uint8_t)pUEB_status.rotationdirection, SETTHIRDHARMONIC, (uint8_t)pUEB_status.thirdharmonic,
 8003650:	4b3c      	ldr	r3, [pc, #240]	; (8003744 <decodeMessage+0x1a4>)
 8003652:	7c1b      	ldrb	r3, [r3, #16]
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 8003654:	461e      	mov	r6, r3
				SETSOFTSTART, (uint8_t)pUEB_status.softstart, SETSOFTSTARTDURATION, (uint8_t)pUEB_status.softstartduration,
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <decodeMessage+0x1a4>)
 8003658:	7c5b      	ldrb	r3, [r3, #17]
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 800365a:	60bb      	str	r3, [r7, #8]
				SETSOFTSTART, (uint8_t)pUEB_status.softstart, SETSOFTSTARTDURATION, (uint8_t)pUEB_status.softstartduration,
 800365c:	4b39      	ldr	r3, [pc, #228]	; (8003744 <decodeMessage+0x1a4>)
 800365e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003666:	edc7 7a01 	vstr	s15, [r7, #4]
 800366a:	793b      	ldrb	r3, [r7, #4]
 800366c:	b2db      	uxtb	r3, r3
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 800366e:	607b      	str	r3, [r7, #4]
				SETMAXCURRENT, (uint8_t)pUEB_status.maxcurrent, SETNUMAVERAGED, (uint8_t)pUEB_status.averagenum);
 8003670:	4b34      	ldr	r3, [pc, #208]	; (8003744 <decodeMessage+0x1a4>)
 8003672:	edd3 7a06 	vldr	s15, [r3, #24]
 8003676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800367a:	edc7 7a00 	vstr	s15, [r7]
 800367e:	783b      	ldrb	r3, [r7, #0]
 8003680:	b2db      	uxtb	r3, r3
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 8003682:	603b      	str	r3, [r7, #0]
				SETMAXCURRENT, (uint8_t)pUEB_status.maxcurrent, SETNUMAVERAGED, (uint8_t)pUEB_status.averagenum);
 8003684:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <decodeMessage+0x1a4>)
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	b2db      	uxtb	r3, r3
		snprintf((char*)string, 1024, "%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d;%s%d\r",
 800368a:	9312      	str	r3, [sp, #72]	; 0x48
 800368c:	4b30      	ldr	r3, [pc, #192]	; (8003750 <decodeMessage+0x1b0>)
 800368e:	9311      	str	r3, [sp, #68]	; 0x44
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	9310      	str	r3, [sp, #64]	; 0x40
 8003694:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <decodeMessage+0x1b4>)
 8003696:	930f      	str	r3, [sp, #60]	; 0x3c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	930e      	str	r3, [sp, #56]	; 0x38
 800369c:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <decodeMessage+0x1b8>)
 800369e:	930d      	str	r3, [sp, #52]	; 0x34
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	930c      	str	r3, [sp, #48]	; 0x30
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <decodeMessage+0x1bc>)
 80036a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80036a8:	960a      	str	r6, [sp, #40]	; 0x28
 80036aa:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <decodeMessage+0x1c0>)
 80036ac:	9309      	str	r3, [sp, #36]	; 0x24
 80036ae:	9508      	str	r5, [sp, #32]
 80036b0:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <decodeMessage+0x1c4>)
 80036b2:	9307      	str	r3, [sp, #28]
 80036b4:	9406      	str	r4, [sp, #24]
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <decodeMessage+0x1c8>)
 80036b8:	9305      	str	r3, [sp, #20]
 80036ba:	9004      	str	r0, [sp, #16]
 80036bc:	4b2b      	ldr	r3, [pc, #172]	; (800376c <decodeMessage+0x1cc>)
 80036be:	9303      	str	r3, [sp, #12]
 80036c0:	9102      	str	r1, [sp, #8]
 80036c2:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <decodeMessage+0x1d0>)
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	9200      	str	r2, [sp, #0]
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <decodeMessage+0x1d4>)
 80036ca:	4a2b      	ldr	r2, [pc, #172]	; (8003778 <decodeMessage+0x1d8>)
 80036cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036d0:	6978      	ldr	r0, [r7, #20]
 80036d2:	f00b fba5 	bl	800ee20 <sniprintf>
		setBuffer(string, strlen((char*)string));
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7fc fe02 	bl	80002e0 <strlen>
 80036dc:	4603      	mov	r3, r0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	4619      	mov	r1, r3
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f000 f98c 	bl	8003a00 <setBuffer>
		free(string);
 80036e8:	6978      	ldr	r0, [r7, #20]
 80036ea:	f00b fa73 	bl	800ebd4 <free>
}
 80036ee:	e021      	b.n	8003734 <decodeMessage+0x194>
	} else if(strstr(message, SETPARAMETERS) != NULL){
 80036f0:	4922      	ldr	r1, [pc, #136]	; (800377c <decodeMessage+0x1dc>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f00b fbdd 	bl	800eeb2 <strstr>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <decodeMessage+0x18c>
		switch (pUEB_status.status) {
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <decodeMessage+0x1a4>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <decodeMessage+0x16c>
 8003706:	2b03      	cmp	r3, #3
 8003708:	d008      	beq.n	800371c <decodeMessage+0x17c>
				break;
 800370a:	e013      	b.n	8003734 <decodeMessage+0x194>
				pUEB_status.status = UEB_INIT_FINISH;
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <decodeMessage+0x1a4>)
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
				setBuffer((uint8_t*)UEB_CONFIG_SAVED, strlen(UEB_CONFIG_SAVED));
 8003712:	2110      	movs	r1, #16
 8003714:	481a      	ldr	r0, [pc, #104]	; (8003780 <decodeMessage+0x1e0>)
 8003716:	f000 f973 	bl	8003a00 <setBuffer>
				break;
 800371a:	e00b      	b.n	8003734 <decodeMessage+0x194>
				pUEB_status.status = UEB_INIT;
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <decodeMessage+0x1a4>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
				setBuffer((uint8_t*)UEB_IN_CONFIG_MODE, strlen(UEB_IN_CONFIG_MODE));
 8003722:	2112      	movs	r1, #18
 8003724:	4817      	ldr	r0, [pc, #92]	; (8003784 <decodeMessage+0x1e4>)
 8003726:	f000 f96b 	bl	8003a00 <setBuffer>
				break;
 800372a:	e003      	b.n	8003734 <decodeMessage+0x194>
		setUEBValues(message);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff fe6f 	bl	8003410 <setUEBValues>
}
 8003732:	e7ff      	b.n	8003734 <decodeMessage+0x194>
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800373c:	08011fd0 	.word	0x08011fd0
 8003740:	08011ef4 	.word	0x08011ef4
 8003744:	240047d8 	.word	0x240047d8
 8003748:	08011f08 	.word	0x08011f08
 800374c:	08011f1c 	.word	0x08011f1c
 8003750:	08011fb8 	.word	0x08011fb8
 8003754:	08011fa8 	.word	0x08011fa8
 8003758:	08011f98 	.word	0x08011f98
 800375c:	08011f88 	.word	0x08011f88
 8003760:	08011f78 	.word	0x08011f78
 8003764:	08011f6c 	.word	0x08011f6c
 8003768:	08011f60 	.word	0x08011f60
 800376c:	08011f54 	.word	0x08011f54
 8003770:	08011f48 	.word	0x08011f48
 8003774:	08011f2c 	.word	0x08011f2c
 8003778:	08011de8 	.word	0x08011de8
 800377c:	08011f38 	.word	0x08011f38
 8003780:	08011ff4 	.word	0x08011ff4
 8003784:	08011fe0 	.word	0x08011fe0

08003788 <divideMessage>:

void divideMessage(uint8_t *USBbuffer, const char *delimiter)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
	strcpy(tokenizebuffer, (const char *)USBbuffer);
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4812      	ldr	r0, [pc, #72]	; (80037e0 <divideMessage+0x58>)
 8003796:	f00b fb84 	bl	800eea2 <strcpy>
	uint8_t i = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
	token = strtok(tokenizebuffer, delimiter);
 800379e:	6839      	ldr	r1, [r7, #0]
 80037a0:	480f      	ldr	r0, [pc, #60]	; (80037e0 <divideMessage+0x58>)
 80037a2:	f00c f97b 	bl	800fa9c <strtok>
 80037a6:	4603      	mov	r3, r0
 80037a8:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <divideMessage+0x5c>)
 80037aa:	6013      	str	r3, [r2, #0]
	while (token != NULL) {
 80037ac:	e00e      	b.n	80037cc <divideMessage+0x44>
		decodeMessage(token);
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <divideMessage+0x5c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fef4 	bl	80035a0 <decodeMessage>
		token = strtok(NULL, delimiter);
 80037b8:	6839      	ldr	r1, [r7, #0]
 80037ba:	2000      	movs	r0, #0
 80037bc:	f00c f96e 	bl	800fa9c <strtok>
 80037c0:	4603      	mov	r3, r0
 80037c2:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <divideMessage+0x5c>)
 80037c4:	6013      	str	r3, [r2, #0]
		i++;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	3301      	adds	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
	while (token != NULL) {
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <divideMessage+0x5c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ec      	bne.n	80037ae <divideMessage+0x26>
	}
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	240043d4 	.word	0x240043d4
 80037e4:	240047d4 	.word	0x240047d4

080037e8 <getNewStatus>:

void getNewStatus(UEB_StatusType *uebstatus)
{
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	pUEB_status = *uebstatus;
 80037f0:	4a11      	ldr	r2, [pc, #68]	; (8003838 <getNewStatus+0x50>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003800:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003804:	e884 0003 	stmia.w	r4, {r0, r1}
	get_Receive_Message(receivebuffer, BUFFERSIZE);
 8003808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800380c:	480b      	ldr	r0, [pc, #44]	; (800383c <getNewStatus+0x54>)
 800380e:	f000 f8c9 	bl	80039a4 <get_Receive_Message>
	if(receivebuffer[0] != '\0') {
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <getNewStatus+0x54>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <getNewStatus+0x46>
		divideMessage(receivebuffer, DELIMITER_FULLMESSAGE);
 800381a:	4909      	ldr	r1, [pc, #36]	; (8003840 <getNewStatus+0x58>)
 800381c:	4807      	ldr	r0, [pc, #28]	; (800383c <getNewStatus+0x54>)
 800381e:	f7ff ffb3 	bl	8003788 <divideMessage>
		memset(receivebuffer, '\0', BUFFERSIZE);
 8003822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003826:	2100      	movs	r1, #0
 8003828:	4804      	ldr	r0, [pc, #16]	; (800383c <getNewStatus+0x54>)
 800382a:	f00b f9e9 	bl	800ec00 <memset>
	}
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bdb0      	pop	{r4, r5, r7, pc}
 8003836:	bf00      	nop
 8003838:	240047d8 	.word	0x240047d8
 800383c:	24004800 	.word	0x24004800
 8003840:	08011fcc 	.word	0x08011fcc

08003844 <DT_Init>:

#include "DT_interface.h"

Dataset DT_list[5];

DT_status DT_Init(void* address, uint32_t size){
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]

	DT_status status = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	73fb      	strb	r3, [r7, #15]

	if(address == NULL) return (DT_status)1000;		// Illegal address for DATA SET
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <DT_Init+0x18>
 8003858:	23e8      	movs	r3, #232	; 0xe8
 800385a:	e044      	b.n	80038e6 <DT_Init+0xa2>

	for(int i = 0; i < (sizeof(DT_list)/sizeof(Dataset)); i++){
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	e03b      	b.n	80038da <DT_Init+0x96>

		if(DT_list[i].Address == NULL){
 8003862:	4924      	ldr	r1, [pc, #144]	; (80038f4 <DT_Init+0xb0>)
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	3304      	adds	r3, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d12a      	bne.n	80038ce <DT_Init+0x8a>
			DT_list[i].ID = i;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	b2d8      	uxtb	r0, r3
 800387c:	491d      	ldr	r1, [pc, #116]	; (80038f4 <DT_Init+0xb0>)
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	4602      	mov	r2, r0
 800388c:	701a      	strb	r2, [r3, #0]
			DT_list[i].Counter = 0;
 800388e:	4919      	ldr	r1, [pc, #100]	; (80038f4 <DT_Init+0xb0>)
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	4613      	mov	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	3301      	adds	r3, #1
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
			DT_list[i].Address = address;
 80038a2:	4914      	ldr	r1, [pc, #80]	; (80038f4 <DT_Init+0xb0>)
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	3304      	adds	r3, #4
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	601a      	str	r2, [r3, #0]
			DT_list[i].Size = size;
 80038b6:	490f      	ldr	r1, [pc, #60]	; (80038f4 <DT_Init+0xb0>)
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3308      	adds	r3, #8
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	601a      	str	r2, [r3, #0]
			status = 1;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
		}
		if(status == 1) break;
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d006      	beq.n	80038e2 <DT_Init+0x9e>
	for(int i = 0; i < (sizeof(DT_list)/sizeof(Dataset)); i++){
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	3301      	adds	r3, #1
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d9c0      	bls.n	8003862 <DT_Init+0x1e>
 80038e0:	e000      	b.n	80038e4 <DT_Init+0xa0>
		if(status == 1) break;
 80038e2:	bf00      	nop
	}
	return status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	24004c00 	.word	0x24004c00

080038f8 <DT_Start>:

DT_status DT_Start(){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0

	DT_status status = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	71fb      	strb	r3, [r7, #7]

	// char* str = (char*)DT_list[0].Address;		//ONLY FOR DEBUGGING

	printf("\nText: %s", (char*)DT_list[0].Address);
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <DT_Start+0x20>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4619      	mov	r1, r3
 8003908:	4804      	ldr	r0, [pc, #16]	; (800391c <DT_Start+0x24>)
 800390a:	f00b fa61 	bl	800edd0 <iprintf>

	return status;
 800390e:	79fb      	ldrb	r3, [r7, #7]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	24004c00 	.word	0x24004c00
 800391c:	08011e1c 	.word	0x08011e1c

08003920 <DT_main>:
 */

#include "DT_runable.h"


void DT_main(void){
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b08f      	sub	sp, #60	; 0x3c
 8003924:	af00      	add	r7, sp, #0

	uint8_t string[50] = "Hello World!";
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <DT_main+0x60>)
 8003928:	463c      	mov	r4, r7
 800392a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800392c:	c407      	stmia	r4!, {r0, r1, r2}
 800392e:	7023      	strb	r3, [r4, #0]
 8003930:	f107 030d 	add.w	r3, r7, #13
 8003934:	2225      	movs	r2, #37	; 0x25
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f00b f961 	bl	800ec00 <memset>
	uint32_t str_size = sizeof(string);
 800393e:	2332      	movs	r3, #50	; 0x32
 8003940:	637b      	str	r3, [r7, #52]	; 0x34

	DT_status status = DT_Init(string,str_size);
 8003942:	463b      	mov	r3, r7
 8003944:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff7c 	bl	8003844 <DT_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(status == 0)
 8003952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <DT_main+0x40>
		printf("\n\nError during data transmission!\nError Code: 0");
 800395a:	480a      	ldr	r0, [pc, #40]	; (8003984 <DT_main+0x64>)
 800395c:	f00b fa38 	bl	800edd0 <iprintf>
	if(status == 1000)
		printf("\n\nError during data transmission!\nError Code: 1000");

	status = DT_Start();
 8003960:	f7ff ffca 	bl	80038f8 <DT_Start>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(status == 0)
 800396a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <DT_main+0x58>
		printf("\n\nError during data transmission!\nError Code: 0");
 8003972:	4804      	ldr	r0, [pc, #16]	; (8003984 <DT_main+0x64>)
 8003974:	f00b fa2c 	bl	800edd0 <iprintf>
}
 8003978:	bf00      	nop
 800397a:	373c      	adds	r7, #60	; 0x3c
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	08011e58 	.word	0x08011e58
 8003984:	08011e28 	.word	0x08011e28

08003988 <is_Receive_Complete>:
uint8_t buffer1status = 1;	//
uint8_t buffer0[BUFFERSIZE];
uint8_t buffer1[BUFFERSIZE];

uint8_t is_Receive_Complete()
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
	return CDC_Receive_Complete_FS();
 800398c:	f00a fcb4 	bl	800e2f8 <CDC_Receive_Complete_FS>
 8003990:	4603      	mov	r3, r0
}
 8003992:	4618      	mov	r0, r3
 8003994:	bd80      	pop	{r7, pc}

08003996 <is_Transmit_Complete>:

uint8_t is_Transmit_Complete()
{
 8003996:	b580      	push	{r7, lr}
 8003998:	af00      	add	r7, sp, #0
	return CDC_Transmit_Complete_FS();
 800399a:	f00a fcb9 	bl	800e310 <CDC_Transmit_Complete_FS>
 800399e:	4603      	mov	r3, r0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <get_Receive_Message>:
 *
 * @param Buffer
 * @param size
 */
void get_Receive_Message(uint8_t *Buffer, uint32_t size)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	if(is_Receive_Complete() != 0) {
 80039ae:	f7ff ffeb 	bl	8003988 <is_Receive_Complete>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01e      	beq.n	80039f6 <get_Receive_Message+0x52>
		if(size > CDC_RX_BUFFER_SIZE){
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039be:	d909      	bls.n	80039d4 <get_Receive_Message+0x30>
			memcpy(Buffer, CDC_Receive_Data(), CDC_RX_BUFFER_SIZE);
 80039c0:	f00a fcb2 	bl	800e328 <CDC_Receive_Data>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f00b f909 	bl	800ebe4 <memcpy>
 80039d2:	e007      	b.n	80039e4 <get_Receive_Message+0x40>
		} else {
			memcpy(Buffer, CDC_Receive_Data(), size);
 80039d4:	f00a fca8 	bl	800e328 <CDC_Receive_Data>
 80039d8:	4603      	mov	r3, r0
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f00b f900 	bl	800ebe4 <memcpy>
		}
		memset(CDC_Receive_Data(), 0x00, CDC_RX_BUFFER_SIZE);
 80039e4:	f00a fca0 	bl	800e328 <CDC_Receive_Data>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f00b f905 	bl	800ec00 <memset>
	}
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <setBuffer>:
	}
	return status;
}

void setBuffer(uint8_t *data, uint8_t size)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
	if(buffer_in_use == 0) {
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <setBuffer+0x60>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10f      	bne.n	8003a34 <setBuffer+0x34>
		memset(buffer1, 0x00, sizeof(buffer1));
 8003a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4812      	ldr	r0, [pc, #72]	; (8003a64 <setBuffer+0x64>)
 8003a1c:	f00b f8f0 	bl	800ec00 <memset>
		memcpy(buffer1, data, size);
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	480f      	ldr	r0, [pc, #60]	; (8003a64 <setBuffer+0x64>)
 8003a28:	f00b f8dc 	bl	800ebe4 <memcpy>
		buffer1status = 1;
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <setBuffer+0x68>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e00e      	b.n	8003a52 <setBuffer+0x52>
	} else {
		memset(buffer0, 0x00, sizeof(buffer0));
 8003a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a38:	2100      	movs	r1, #0
 8003a3a:	480c      	ldr	r0, [pc, #48]	; (8003a6c <setBuffer+0x6c>)
 8003a3c:	f00b f8e0 	bl	800ec00 <memset>
		memcpy(buffer0, data, size);
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	461a      	mov	r2, r3
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4809      	ldr	r0, [pc, #36]	; (8003a6c <setBuffer+0x6c>)
 8003a48:	f00b f8cc 	bl	800ebe4 <memcpy>
		buffer0status = 1;
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <setBuffer+0x70>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
	}
	Transmit_Data();
 8003a52:	f000 f80f 	bl	8003a74 <Transmit_Data>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	24004c3c 	.word	0x24004c3c
 8003a64:	24005040 	.word	0x24005040
 8003a68:	240038ac 	.word	0x240038ac
 8003a6c:	24004c40 	.word	0x24004c40
 8003a70:	24004c3d 	.word	0x24004c3d

08003a74 <Transmit_Data>:

void Transmit_Data()
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
	if(is_Transmit_Complete()) {
 8003a78:	f7ff ff8d 	bl	8003996 <is_Transmit_Complete>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d041      	beq.n	8003b06 <Transmit_Data+0x92>
		if(buffer_in_use == 0 && buffer0status == BUFFER_READY){
 8003a82:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <Transmit_Data+0x98>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11e      	bne.n	8003ac8 <Transmit_Data+0x54>
 8003a8a:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <Transmit_Data+0x9c>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d11a      	bne.n	8003ac8 <Transmit_Data+0x54>
			if(CDC_Transmit_FS(buffer0, BUFFERSIZE) == USBD_OK){
 8003a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a96:	481f      	ldr	r0, [pc, #124]	; (8003b14 <Transmit_Data+0xa0>)
 8003a98:	f00a fbe8 	bl	800e26c <CDC_Transmit_FS>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10c      	bne.n	8003abc <Transmit_Data+0x48>
				buffer_in_use = 1;
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <Transmit_Data+0x98>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
				memset(buffer0, '\0', BUFFERSIZE);
 8003aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aac:	2100      	movs	r1, #0
 8003aae:	4819      	ldr	r0, [pc, #100]	; (8003b14 <Transmit_Data+0xa0>)
 8003ab0:	f00b f8a6 	bl	800ec00 <memset>
				buffer0status = 0;
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <Transmit_Data+0x9c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
			if(CDC_Transmit_FS(buffer0, BUFFERSIZE) == USBD_OK){
 8003aba:	e024      	b.n	8003b06 <Transmit_Data+0x92>
			} else {	//Capture USB Busy Errors and resent the given buffer the second time
				CDC_Transmit_FS(buffer0, BUFFERSIZE);
 8003abc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ac0:	4814      	ldr	r0, [pc, #80]	; (8003b14 <Transmit_Data+0xa0>)
 8003ac2:	f00a fbd3 	bl	800e26c <CDC_Transmit_FS>
			if(CDC_Transmit_FS(buffer0, BUFFERSIZE) == USBD_OK){
 8003ac6:	e01e      	b.n	8003b06 <Transmit_Data+0x92>
			}
		} else if (buffer1status == 1){
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <Transmit_Data+0xa4>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d11a      	bne.n	8003b06 <Transmit_Data+0x92>
			if(CDC_Transmit_FS(buffer1, BUFFERSIZE) == USBD_OK){
 8003ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ad4:	4811      	ldr	r0, [pc, #68]	; (8003b1c <Transmit_Data+0xa8>)
 8003ad6:	f00a fbc9 	bl	800e26c <CDC_Transmit_FS>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10c      	bne.n	8003afa <Transmit_Data+0x86>
				buffer_in_use = 0;
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <Transmit_Data+0x98>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
				memset(buffer1, '\0', BUFFERSIZE);
 8003ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aea:	2100      	movs	r1, #0
 8003aec:	480b      	ldr	r0, [pc, #44]	; (8003b1c <Transmit_Data+0xa8>)
 8003aee:	f00b f887 	bl	800ec00 <memset>
				buffer1status = 0;
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <Transmit_Data+0xa4>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
			} else {	//Capture USB Busy Errors and resent the given buffer the second time
				CDC_Transmit_FS(buffer1, BUFFERSIZE);
			}
		}
	}
}
 8003af8:	e005      	b.n	8003b06 <Transmit_Data+0x92>
				CDC_Transmit_FS(buffer1, BUFFERSIZE);
 8003afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003afe:	4807      	ldr	r0, [pc, #28]	; (8003b1c <Transmit_Data+0xa8>)
 8003b00:	f00a fbb4 	bl	800e26c <CDC_Transmit_FS>
}
 8003b04:	e7ff      	b.n	8003b06 <Transmit_Data+0x92>
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	24004c3c 	.word	0x24004c3c
 8003b10:	24004c3d 	.word	0x24004c3d
 8003b14:	24004c40 	.word	0x24004c40
 8003b18:	240038ac 	.word	0x240038ac
 8003b1c:	24005040 	.word	0x24005040

08003b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b26:	2003      	movs	r0, #3
 8003b28:	f001 f9d6 	bl	8004ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b2c:	f003 fc5a 	bl	80073e4 <HAL_RCC_GetSysClockFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <HAL_Init+0x68>)
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	4913      	ldr	r1, [pc, #76]	; (8003b8c <HAL_Init+0x6c>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
 8003b48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <HAL_Init+0x68>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <HAL_Init+0x6c>)
 8003b54:	5cd3      	ldrb	r3, [r2, r3]
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <HAL_Init+0x70>)
 8003b62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b64:	4a0b      	ldr	r2, [pc, #44]	; (8003b94 <HAL_Init+0x74>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f000 f814 	bl	8003b98 <HAL_InitTick>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e002      	b.n	8003b80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b7a:	f7fd ff2d 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	08011ee4 	.word	0x08011ee4
 8003b90:	240038a8 	.word	0x240038a8
 8003b94:	240038a4 	.word	0x240038a4

08003b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_InitTick+0x60>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e021      	b.n	8003bf0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003bac:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <HAL_InitTick+0x64>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_InitTick+0x60>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f9bb 	bl	8004f3e <HAL_SYSTICK_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00e      	b.n	8003bf0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b0f      	cmp	r3, #15
 8003bd6:	d80a      	bhi.n	8003bee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd8:	2200      	movs	r2, #0
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	f001 f985 	bl	8004eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003be4:	4a06      	ldr	r2, [pc, #24]	; (8003c00 <HAL_InitTick+0x68>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	240038b4 	.word	0x240038b4
 8003bfc:	240038a4 	.word	0x240038a4
 8003c00:	240038b0 	.word	0x240038b0

08003c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_IncTick+0x20>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_IncTick+0x24>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4413      	add	r3, r2
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <HAL_IncTick+0x24>)
 8003c16:	6013      	str	r3, [r2, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	240038b4 	.word	0x240038b4
 8003c28:	24005440 	.word	0x24005440

08003c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <HAL_GetTick+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	24005440 	.word	0x24005440

08003c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c4c:	f7ff ffee 	bl	8003c2c <HAL_GetTick>
 8003c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d005      	beq.n	8003c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <HAL_Delay+0x44>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c6a:	bf00      	nop
 8003c6c:	f7ff ffde 	bl	8003c2c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d8f7      	bhi.n	8003c6c <HAL_Delay+0x28>
  {
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	240038b4 	.word	0x240038b4

08003c8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_GetREVID+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0c1b      	lsrs	r3, r3, #16
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	5c001000 	.word	0x5c001000

08003ca4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	609a      	str	r2, [r3, #8]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3360      	adds	r3, #96	; 0x60
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	611a      	str	r2, [r3, #16]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b087      	sub	sp, #28
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3360      	adds	r3, #96	; 0x60
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	601a      	str	r2, [r3, #0]
  }
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3330      	adds	r3, #48	; 0x30
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	4413      	add	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	211f      	movs	r1, #31
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	401a      	ands	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	0e9b      	lsrs	r3, r3, #26
 8003dec:	f003 011f 	and.w	r1, r3, #31
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	0e5b      	lsrs	r3, r3, #25
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	4413      	add	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	0d1b      	lsrs	r3, r3, #20
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2107      	movs	r1, #7
 8003e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	401a      	ands	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	0d1b      	lsrs	r3, r3, #20
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	401a      	ands	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0318 	and.w	r3, r3, #24
 8003e86:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e88:	40d9      	lsrs	r1, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	400b      	ands	r3, r1
 8003e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	000fffff 	.word	0x000fffff

08003eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <LL_ADC_DisableDeepPowerDown+0x20>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6093      	str	r3, [r2, #8]
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	5fffffc0 	.word	0x5fffffc0

08003ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee4:	d101      	bne.n	8003eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <LL_ADC_EnableInternalRegulator+0x24>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	6fffffc0 	.word	0x6fffffc0

08003f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f34:	d101      	bne.n	8003f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <LL_ADC_IsEnabled+0x18>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <LL_ADC_IsEnabled+0x1a>
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d101      	bne.n	8003f86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d101      	bne.n	8003fac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e18d      	b.n	80042f2 <HAL_ADC_Init+0x336>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7fd fd11 	bl	8001a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff67 	bl	8003ed0 <LL_ADC_IsDeepPowerDownEnabled>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff4d 	bl	8003eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff82 	bl	8003f20 <LL_ADC_IsInternalRegulatorEnabled>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d113      	bne.n	800404a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff66 	bl	8003ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800402c:	4b86      	ldr	r3, [pc, #536]	; (8004248 <HAL_ADC_Init+0x28c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	4a86      	ldr	r2, [pc, #536]	; (800424c <HAL_ADC_Init+0x290>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	099b      	lsrs	r3, r3, #6
 800403a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800403c:	e002      	b.n	8004044 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3b01      	subs	r3, #1
 8004042:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f9      	bne.n	800403e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff ff66 	bl	8003f20 <LL_ADC_IsInternalRegulatorEnabled>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10d      	bne.n	8004076 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f043 0210 	orr.w	r2, r3, #16
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	f043 0201 	orr.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff77 	bl	8003f6e <LL_ADC_REG_IsConversionOngoing>
 8004080:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 8128 	bne.w	80042e0 <HAL_ADC_Init+0x324>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 8124 	bne.w	80042e0 <HAL_ADC_Init+0x324>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040a0:	f043 0202 	orr.w	r2, r3, #2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff4b 	bl	8003f48 <LL_ADC_IsEnabled>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d136      	bne.n	8004126 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a64      	ldr	r2, [pc, #400]	; (8004250 <HAL_ADC_Init+0x294>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_ADC_Init+0x110>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a63      	ldr	r2, [pc, #396]	; (8004254 <HAL_ADC_Init+0x298>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d10e      	bne.n	80040ea <HAL_ADC_Init+0x12e>
 80040cc:	4860      	ldr	r0, [pc, #384]	; (8004250 <HAL_ADC_Init+0x294>)
 80040ce:	f7ff ff3b 	bl	8003f48 <LL_ADC_IsEnabled>
 80040d2:	4604      	mov	r4, r0
 80040d4:	485f      	ldr	r0, [pc, #380]	; (8004254 <HAL_ADC_Init+0x298>)
 80040d6:	f7ff ff37 	bl	8003f48 <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	4323      	orrs	r3, r4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf0c      	ite	eq
 80040e2:	2301      	moveq	r3, #1
 80040e4:	2300      	movne	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e008      	b.n	80040fc <HAL_ADC_Init+0x140>
 80040ea:	485b      	ldr	r0, [pc, #364]	; (8004258 <HAL_ADC_Init+0x29c>)
 80040ec:	f7ff ff2c 	bl	8003f48 <LL_ADC_IsEnabled>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d012      	beq.n	8004126 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a52      	ldr	r2, [pc, #328]	; (8004250 <HAL_ADC_Init+0x294>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_ADC_Init+0x158>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a51      	ldr	r2, [pc, #324]	; (8004254 <HAL_ADC_Init+0x298>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_ADC_Init+0x15c>
 8004114:	4a51      	ldr	r2, [pc, #324]	; (800425c <HAL_ADC_Init+0x2a0>)
 8004116:	e000      	b.n	800411a <HAL_ADC_Init+0x15e>
 8004118:	4a51      	ldr	r2, [pc, #324]	; (8004260 <HAL_ADC_Init+0x2a4>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4619      	mov	r1, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f7ff fdbf 	bl	8003ca4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004126:	f7ff fdb1 	bl	8003c8c <HAL_GetREVID>
 800412a:	4603      	mov	r3, r0
 800412c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004130:	4293      	cmp	r3, r2
 8004132:	d914      	bls.n	800415e <HAL_ADC_Init+0x1a2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b10      	cmp	r3, #16
 800413a:	d110      	bne.n	800415e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	7d5b      	ldrb	r3, [r3, #21]
 8004140:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004146:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800414c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7f1b      	ldrb	r3, [r3, #28]
 8004152:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004154:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004156:	f043 030c 	orr.w	r3, r3, #12
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	e00d      	b.n	800417a <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7d5b      	ldrb	r3, [r3, #21]
 8004162:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004168:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800416e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7f1b      	ldrb	r3, [r3, #28]
 8004174:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	7f1b      	ldrb	r3, [r3, #28]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d106      	bne.n	8004190 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	3b01      	subs	r3, #1
 8004188:	045b      	lsls	r3, r3, #17
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <HAL_ADC_Init+0x2a8>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	69b9      	ldr	r1, [r7, #24]
 80041bc:	430b      	orrs	r3, r1
 80041be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fed2 	bl	8003f6e <LL_ADC_REG_IsConversionOngoing>
 80041ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff fedf 	bl	8003f94 <LL_ADC_INJ_IsConversionOngoing>
 80041d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d15e      	bne.n	800429c <HAL_ADC_Init+0x2e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d15b      	bne.n	800429c <HAL_ADC_Init+0x2e0>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7d1b      	ldrb	r3, [r3, #20]
 80041e8:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_ADC_Init+0x2ac>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	430b      	orrs	r3, r1
 8004204:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800420c:	2b01      	cmp	r3, #1
 800420e:	d12f      	bne.n	8004270 <HAL_ADC_Init+0x2b4>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	4b13      	ldr	r3, [pc, #76]	; (800426c <HAL_ADC_Init+0x2b0>)
 800421e:	4013      	ands	r3, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004224:	3a01      	subs	r2, #1
 8004226:	0411      	lsls	r1, r2, #16
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800422c:	4311      	orrs	r1, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004238:	430a      	orrs	r2, r1
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	611a      	str	r2, [r3, #16]
 8004246:	e01b      	b.n	8004280 <HAL_ADC_Init+0x2c4>
 8004248:	240038a4 	.word	0x240038a4
 800424c:	053e2d63 	.word	0x053e2d63
 8004250:	40022000 	.word	0x40022000
 8004254:	40022100 	.word	0x40022100
 8004258:	58026000 	.word	0x58026000
 800425c:	40022300 	.word	0x40022300
 8004260:	58026300 	.word	0x58026300
 8004264:	fff0c003 	.word	0xfff0c003
 8004268:	ffffbffc 	.word	0xffffbffc
 800426c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fb44 	bl	8004924 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d10c      	bne.n	80042be <HAL_ADC_Init+0x302>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f023 010f 	bic.w	r1, r3, #15
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	1e5a      	subs	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
 80042bc:	e007      	b.n	80042ce <HAL_ADC_Init+0x312>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 020f 	bic.w	r2, r2, #15
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	f043 0201 	orr.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
 80042de:	e007      	b.n	80042f0 <HAL_ADC_Init+0x334>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e4:	f043 0210 	orr.w	r2, r3, #16
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd90      	pop	{r4, r7, pc}
 80042fa:	bf00      	nop

080042fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b099      	sub	sp, #100	; 0x64
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a99      	ldr	r2, [pc, #612]	; (800457c <HAL_ADC_ConfigChannel+0x280>)
 8004316:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x2a>
 8004322:	2302      	movs	r3, #2
 8004324:	e2e6      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x5f8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fe1b 	bl	8003f6e <LL_ADC_REG_IsConversionOngoing>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 82cb 	bne.w	80048d6 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004348:	2b00      	cmp	r3, #0
 800434a:	d108      	bne.n	800435e <HAL_ADC_ConfigChannel+0x62>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	0e9b      	lsrs	r3, r3, #26
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2201      	movs	r2, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	e00f      	b.n	800437e <HAL_ADC_ConfigChannel+0x82>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2201      	movs	r2, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	69d1      	ldr	r1, [r2, #28]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	430b      	orrs	r3, r1
 800438a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	f7ff fd0b 	bl	8003db4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fde3 	bl	8003f6e <LL_ADC_REG_IsConversionOngoing>
 80043a8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fdf0 	bl	8003f94 <LL_ADC_INJ_IsConversionOngoing>
 80043b4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f040 80b3 	bne.w	8004524 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f040 80af 	bne.w	8004524 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6819      	ldr	r1, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f7ff fd1a 	bl	8003e0c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043d8:	4b69      	ldr	r3, [pc, #420]	; (8004580 <HAL_ADC_ConfigChannel+0x284>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043e4:	d10b      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x102>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	e01d      	b.n	800443a <HAL_ADC_ConfigChannel+0x13e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x128>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	e00a      	b.n	800443a <HAL_ADC_ConfigChannel+0x13e>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b04      	cmp	r3, #4
 8004442:	d027      	beq.n	8004494 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6919      	ldr	r1, [r3, #16]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004452:	f7ff fc5b 	bl	8003d0c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6919      	ldr	r1, [r3, #16]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	7e5b      	ldrb	r3, [r3, #25]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d102      	bne.n	800446c <HAL_ADC_ConfigChannel+0x170>
 8004466:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800446a:	e000      	b.n	800446e <HAL_ADC_ConfigChannel+0x172>
 800446c:	2300      	movs	r3, #0
 800446e:	461a      	mov	r2, r3
 8004470:	f7ff fc85 	bl	8003d7e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6919      	ldr	r1, [r3, #16]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	7e1b      	ldrb	r3, [r3, #24]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d102      	bne.n	800448a <HAL_ADC_ConfigChannel+0x18e>
 8004484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004488:	e000      	b.n	800448c <HAL_ADC_ConfigChannel+0x190>
 800448a:	2300      	movs	r3, #0
 800448c:	461a      	mov	r2, r3
 800448e:	f7ff fc5d 	bl	8003d4c <LL_ADC_SetDataRightShift>
 8004492:	e047      	b.n	8004524 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	069b      	lsls	r3, r3, #26
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d107      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044b6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	069b      	lsls	r3, r3, #26
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d107      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044da:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	069b      	lsls	r3, r3, #26
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d107      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044fe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	069b      	lsls	r3, r3, #26
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004522:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fd0d 	bl	8003f48 <LL_ADC_IsEnabled>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	f040 81d9 	bne.w	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	461a      	mov	r2, r3
 8004544:	f7ff fc8e 	bl	8003e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4a0b      	ldr	r2, [pc, #44]	; (800457c <HAL_ADC_ConfigChannel+0x280>)
 800454e:	4293      	cmp	r3, r2
 8004550:	f040 8101 	bne.w	8004756 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10f      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x288>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0e9b      	lsrs	r3, r3, #26
 800456a:	3301      	adds	r3, #1
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	2b09      	cmp	r3, #9
 8004572:	bf94      	ite	ls
 8004574:	2301      	movls	r3, #1
 8004576:	2300      	movhi	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e016      	b.n	80045aa <HAL_ADC_ConfigChannel+0x2ae>
 800457c:	47ff0000 	.word	0x47ff0000
 8004580:	5c001000 	.word	0x5c001000
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	fab3 f383 	clz	r3, r3
 8004598:	b2db      	uxtb	r3, r3
 800459a:	3301      	adds	r3, #1
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2b09      	cmp	r3, #9
 80045a2:	bf94      	ite	ls
 80045a4:	2301      	movls	r3, #1
 80045a6:	2300      	movhi	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d064      	beq.n	8004678 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d107      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x2ce>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	0e9b      	lsrs	r3, r3, #26
 80045c0:	3301      	adds	r3, #1
 80045c2:	069b      	lsls	r3, r3, #26
 80045c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045c8:	e00e      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x2ec>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3301      	adds	r3, #1
 80045e2:	069b      	lsls	r3, r3, #26
 80045e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x30c>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	3301      	adds	r3, #1
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	e010      	b.n	800462a <HAL_ADC_ConfigChannel+0x32e>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	3301      	adds	r3, #1
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2101      	movs	r1, #1
 8004626:	fa01 f303 	lsl.w	r3, r1, r3
 800462a:	ea42 0103 	orr.w	r1, r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x354>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	0e9b      	lsrs	r3, r3, #26
 8004640:	3301      	adds	r3, #1
 8004642:	f003 021f 	and.w	r2, r3, #31
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	051b      	lsls	r3, r3, #20
 800464e:	e011      	b.n	8004674 <HAL_ADC_ConfigChannel+0x378>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	3301      	adds	r3, #1
 8004668:	f003 021f 	and.w	r2, r3, #31
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004674:	430b      	orrs	r3, r1
 8004676:	e069      	b.n	800474c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004680:	2b00      	cmp	r3, #0
 8004682:	d107      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x398>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	0e9b      	lsrs	r3, r3, #26
 800468a:	3301      	adds	r3, #1
 800468c:	069b      	lsls	r3, r3, #26
 800468e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004692:	e00e      	b.n	80046b2 <HAL_ADC_ConfigChannel+0x3b6>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	61fb      	str	r3, [r7, #28]
  return result;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	069b      	lsls	r3, r3, #26
 80046ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x3d6>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	0e9b      	lsrs	r3, r3, #26
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	e010      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x3f8>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	617b      	str	r3, [r7, #20]
  return result;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	3301      	adds	r3, #1
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2101      	movs	r1, #1
 80046f0:	fa01 f303 	lsl.w	r3, r1, r3
 80046f4:	ea42 0103 	orr.w	r1, r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10d      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x424>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	0e9b      	lsrs	r3, r3, #26
 800470a:	3301      	adds	r3, #1
 800470c:	f003 021f 	and.w	r2, r3, #31
 8004710:	4613      	mov	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4413      	add	r3, r2
 8004716:	3b1e      	subs	r3, #30
 8004718:	051b      	lsls	r3, r3, #20
 800471a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800471e:	e014      	b.n	800474a <HAL_ADC_ConfigChannel+0x44e>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	fa93 f3a3 	rbit	r3, r3
 800472c:	60fb      	str	r3, [r7, #12]
  return result;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
 8004736:	3301      	adds	r3, #1
 8004738:	f003 021f 	and.w	r2, r3, #31
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	3b1e      	subs	r3, #30
 8004744:	051b      	lsls	r3, r3, #20
 8004746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800474a:	430b      	orrs	r3, r1
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	6892      	ldr	r2, [r2, #8]
 8004750:	4619      	mov	r1, r3
 8004752:	f7ff fb5b 	bl	8003e0c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f280 80c4 	bge.w	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a65      	ldr	r2, [pc, #404]	; (80048fc <HAL_ADC_ConfigChannel+0x600>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_ADC_ConfigChannel+0x478>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a64      	ldr	r2, [pc, #400]	; (8004900 <HAL_ADC_ConfigChannel+0x604>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x47c>
 8004774:	4b63      	ldr	r3, [pc, #396]	; (8004904 <HAL_ADC_ConfigChannel+0x608>)
 8004776:	e000      	b.n	800477a <HAL_ADC_ConfigChannel+0x47e>
 8004778:	4b63      	ldr	r3, [pc, #396]	; (8004908 <HAL_ADC_ConfigChannel+0x60c>)
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fab8 	bl	8003cf0 <LL_ADC_GetCommonPathInternalCh>
 8004780:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a5d      	ldr	r2, [pc, #372]	; (80048fc <HAL_ADC_ConfigChannel+0x600>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_ADC_ConfigChannel+0x49a>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a5b      	ldr	r2, [pc, #364]	; (8004900 <HAL_ADC_ConfigChannel+0x604>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10e      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x4b8>
 8004796:	4859      	ldr	r0, [pc, #356]	; (80048fc <HAL_ADC_ConfigChannel+0x600>)
 8004798:	f7ff fbd6 	bl	8003f48 <LL_ADC_IsEnabled>
 800479c:	4604      	mov	r4, r0
 800479e:	4858      	ldr	r0, [pc, #352]	; (8004900 <HAL_ADC_ConfigChannel+0x604>)
 80047a0:	f7ff fbd2 	bl	8003f48 <LL_ADC_IsEnabled>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4323      	orrs	r3, r4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e008      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x4ca>
 80047b4:	4855      	ldr	r0, [pc, #340]	; (800490c <HAL_ADC_ConfigChannel+0x610>)
 80047b6:	f7ff fbc7 	bl	8003f48 <LL_ADC_IsEnabled>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d07b      	beq.n	80048c2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a50      	ldr	r2, [pc, #320]	; (8004910 <HAL_ADC_ConfigChannel+0x614>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d12e      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x536>
 80047d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d129      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a4a      	ldr	r2, [pc, #296]	; (800490c <HAL_ADC_ConfigChannel+0x610>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d17f      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a43      	ldr	r2, [pc, #268]	; (80048fc <HAL_ADC_ConfigChannel+0x600>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_ADC_ConfigChannel+0x500>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a42      	ldr	r2, [pc, #264]	; (8004900 <HAL_ADC_ConfigChannel+0x604>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d101      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x504>
 80047fc:	4a41      	ldr	r2, [pc, #260]	; (8004904 <HAL_ADC_ConfigChannel+0x608>)
 80047fe:	e000      	b.n	8004802 <HAL_ADC_ConfigChannel+0x506>
 8004800:	4a41      	ldr	r2, [pc, #260]	; (8004908 <HAL_ADC_ConfigChannel+0x60c>)
 8004802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f7ff fa5d 	bl	8003cca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004810:	4b40      	ldr	r3, [pc, #256]	; (8004914 <HAL_ADC_ConfigChannel+0x618>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	4a40      	ldr	r2, [pc, #256]	; (8004918 <HAL_ADC_ConfigChannel+0x61c>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	099b      	lsrs	r3, r3, #6
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004822:	e002      	b.n	800482a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3b01      	subs	r3, #1
 8004828:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f9      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004830:	e05a      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a39      	ldr	r2, [pc, #228]	; (800491c <HAL_ADC_ConfigChannel+0x620>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d11e      	bne.n	800487a <HAL_ADC_ConfigChannel+0x57e>
 800483c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d119      	bne.n	800487a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a30      	ldr	r2, [pc, #192]	; (800490c <HAL_ADC_ConfigChannel+0x610>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d14b      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a29      	ldr	r2, [pc, #164]	; (80048fc <HAL_ADC_ConfigChannel+0x600>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_ADC_ConfigChannel+0x568>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a28      	ldr	r2, [pc, #160]	; (8004900 <HAL_ADC_ConfigChannel+0x604>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x56c>
 8004864:	4a27      	ldr	r2, [pc, #156]	; (8004904 <HAL_ADC_ConfigChannel+0x608>)
 8004866:	e000      	b.n	800486a <HAL_ADC_ConfigChannel+0x56e>
 8004868:	4a27      	ldr	r2, [pc, #156]	; (8004908 <HAL_ADC_ConfigChannel+0x60c>)
 800486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f7ff fa29 	bl	8003cca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004878:	e036      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a28      	ldr	r2, [pc, #160]	; (8004920 <HAL_ADC_ConfigChannel+0x624>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d131      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
 8004884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d12c      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_ADC_ConfigChannel+0x610>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d127      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a17      	ldr	r2, [pc, #92]	; (80048fc <HAL_ADC_ConfigChannel+0x600>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x5b0>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a16      	ldr	r2, [pc, #88]	; (8004900 <HAL_ADC_ConfigChannel+0x604>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d101      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x5b4>
 80048ac:	4a15      	ldr	r2, [pc, #84]	; (8004904 <HAL_ADC_ConfigChannel+0x608>)
 80048ae:	e000      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x5b6>
 80048b0:	4a15      	ldr	r2, [pc, #84]	; (8004908 <HAL_ADC_ConfigChannel+0x60c>)
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f7ff fa05 	bl	8003cca <LL_ADC_SetCommonPathInternalCh>
 80048c0:	e012      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80048d4:	e008      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	f043 0220 	orr.w	r2, r3, #32
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80048f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3764      	adds	r7, #100	; 0x64
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd90      	pop	{r4, r7, pc}
 80048fc:	40022000 	.word	0x40022000
 8004900:	40022100 	.word	0x40022100
 8004904:	40022300 	.word	0x40022300
 8004908:	58026300 	.word	0x58026300
 800490c:	58026000 	.word	0x58026000
 8004910:	cb840000 	.word	0xcb840000
 8004914:	240038a4 	.word	0x240038a4
 8004918:	053e2d63 	.word	0x053e2d63
 800491c:	c7520000 	.word	0xc7520000
 8004920:	cfb80000 	.word	0xcfb80000

08004924 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a79      	ldr	r2, [pc, #484]	; (8004b18 <ADC_ConfigureBoostMode+0x1f4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <ADC_ConfigureBoostMode+0x1c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a78      	ldr	r2, [pc, #480]	; (8004b1c <ADC_ConfigureBoostMode+0x1f8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d109      	bne.n	8004954 <ADC_ConfigureBoostMode+0x30>
 8004940:	4b77      	ldr	r3, [pc, #476]	; (8004b20 <ADC_ConfigureBoostMode+0x1fc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004948:	2b00      	cmp	r3, #0
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	e008      	b.n	8004966 <ADC_ConfigureBoostMode+0x42>
 8004954:	4b73      	ldr	r3, [pc, #460]	; (8004b24 <ADC_ConfigureBoostMode+0x200>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d01c      	beq.n	80049a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800496a:	f002 feb5 	bl	80076d8 <HAL_RCC_GetHCLKFreq>
 800496e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004978:	d010      	beq.n	800499c <ADC_ConfigureBoostMode+0x78>
 800497a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800497e:	d871      	bhi.n	8004a64 <ADC_ConfigureBoostMode+0x140>
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d002      	beq.n	800498c <ADC_ConfigureBoostMode+0x68>
 8004986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800498a:	d16b      	bne.n	8004a64 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	60fb      	str	r3, [r7, #12]
        break;
 800499a:	e066      	b.n	8004a6a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	60fb      	str	r3, [r7, #12]
        break;
 80049a2:	e062      	b.n	8004a6a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80049a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80049a8:	f003 fdfc 	bl	80085a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80049ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80049b6:	d051      	beq.n	8004a5c <ADC_ConfigureBoostMode+0x138>
 80049b8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80049bc:	d854      	bhi.n	8004a68 <ADC_ConfigureBoostMode+0x144>
 80049be:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80049c2:	d047      	beq.n	8004a54 <ADC_ConfigureBoostMode+0x130>
 80049c4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80049c8:	d84e      	bhi.n	8004a68 <ADC_ConfigureBoostMode+0x144>
 80049ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049ce:	d03d      	beq.n	8004a4c <ADC_ConfigureBoostMode+0x128>
 80049d0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049d4:	d848      	bhi.n	8004a68 <ADC_ConfigureBoostMode+0x144>
 80049d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049da:	d033      	beq.n	8004a44 <ADC_ConfigureBoostMode+0x120>
 80049dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e0:	d842      	bhi.n	8004a68 <ADC_ConfigureBoostMode+0x144>
 80049e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049e6:	d029      	beq.n	8004a3c <ADC_ConfigureBoostMode+0x118>
 80049e8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049ec:	d83c      	bhi.n	8004a68 <ADC_ConfigureBoostMode+0x144>
 80049ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80049f2:	d01a      	beq.n	8004a2a <ADC_ConfigureBoostMode+0x106>
 80049f4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80049f8:	d836      	bhi.n	8004a68 <ADC_ConfigureBoostMode+0x144>
 80049fa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049fe:	d014      	beq.n	8004a2a <ADC_ConfigureBoostMode+0x106>
 8004a00:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004a04:	d830      	bhi.n	8004a68 <ADC_ConfigureBoostMode+0x144>
 8004a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0a:	d00e      	beq.n	8004a2a <ADC_ConfigureBoostMode+0x106>
 8004a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a10:	d82a      	bhi.n	8004a68 <ADC_ConfigureBoostMode+0x144>
 8004a12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a16:	d008      	beq.n	8004a2a <ADC_ConfigureBoostMode+0x106>
 8004a18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a1c:	d824      	bhi.n	8004a68 <ADC_ConfigureBoostMode+0x144>
 8004a1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a22:	d002      	beq.n	8004a2a <ADC_ConfigureBoostMode+0x106>
 8004a24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a28:	d11e      	bne.n	8004a68 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	0c9b      	lsrs	r3, r3, #18
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	60fb      	str	r3, [r7, #12]
        break;
 8004a3a:	e016      	b.n	8004a6a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	091b      	lsrs	r3, r3, #4
 8004a40:	60fb      	str	r3, [r7, #12]
        break;
 8004a42:	e012      	b.n	8004a6a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	60fb      	str	r3, [r7, #12]
        break;
 8004a4a:	e00e      	b.n	8004a6a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	099b      	lsrs	r3, r3, #6
 8004a50:	60fb      	str	r3, [r7, #12]
        break;
 8004a52:	e00a      	b.n	8004a6a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	09db      	lsrs	r3, r3, #7
 8004a58:	60fb      	str	r3, [r7, #12]
        break;
 8004a5a:	e006      	b.n	8004a6a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	60fb      	str	r3, [r7, #12]
        break;
 8004a62:	e002      	b.n	8004a6a <ADC_ConfigureBoostMode+0x146>
        break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004a68:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004a6a:	f7ff f90f 	bl	8003c8c <HAL_GetREVID>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d815      	bhi.n	8004aa4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <ADC_ConfigureBoostMode+0x204>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d908      	bls.n	8004a92 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a90:	e03e      	b.n	8004b10 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa0:	609a      	str	r2, [r3, #8]
}
 8004aa2:	e035      	b.n	8004b10 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <ADC_ConfigureBoostMode+0x208>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d808      	bhi.n	8004ac4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ac0:	609a      	str	r2, [r3, #8]
}
 8004ac2:	e025      	b.n	8004b10 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	; (8004b30 <ADC_ConfigureBoostMode+0x20c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d80a      	bhi.n	8004ae2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	e016      	b.n	8004b10 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <ADC_ConfigureBoostMode+0x210>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d80a      	bhi.n	8004b00 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afc:	609a      	str	r2, [r3, #8]
}
 8004afe:	e007      	b.n	8004b10 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40022000 	.word	0x40022000
 8004b1c:	40022100 	.word	0x40022100
 8004b20:	40022300 	.word	0x40022300
 8004b24:	58026300 	.word	0x58026300
 8004b28:	01312d00 	.word	0x01312d00
 8004b2c:	005f5e10 	.word	0x005f5e10
 8004b30:	00bebc20 	.word	0x00bebc20
 8004b34:	017d7840 	.word	0x017d7840

08004b38 <LL_ADC_IsEnabled>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <LL_ADC_IsEnabled+0x18>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <LL_ADC_IsEnabled+0x1a>
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <LL_ADC_REG_IsConversionOngoing>:
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d101      	bne.n	8004b76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b09f      	sub	sp, #124	; 0x7c
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e0ba      	b.n	8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a5c      	ldr	r2, [pc, #368]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d102      	bne.n	8004bba <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004bb4:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	e001      	b.n	8004bbe <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e09d      	b.n	8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ffbd 	bl	8004b5e <LL_ADC_REG_IsConversionOngoing>
 8004be4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff ffb7 	bl	8004b5e <LL_ADC_REG_IsConversionOngoing>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d17f      	bne.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d17c      	bne.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a47      	ldr	r2, [pc, #284]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a46      	ldr	r2, [pc, #280]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8004c10:	4b45      	ldr	r3, [pc, #276]	; (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c12:	e000      	b.n	8004c16 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8004c14:	4b45      	ldr	r3, [pc, #276]	; (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c16:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d039      	beq.n	8004c94 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c30:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a3a      	ldr	r2, [pc, #232]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a38      	ldr	r2, [pc, #224]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10e      	bne.n	8004c64 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8004c46:	4836      	ldr	r0, [pc, #216]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8004c48:	f7ff ff76 	bl	8004b38 <LL_ADC_IsEnabled>
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	4835      	ldr	r0, [pc, #212]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8004c50:	f7ff ff72 	bl	8004b38 <LL_ADC_IsEnabled>
 8004c54:	4603      	mov	r3, r0
 8004c56:	4323      	orrs	r3, r4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e008      	b.n	8004c76 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8004c64:	4832      	ldr	r0, [pc, #200]	; (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c66:	f7ff ff67 	bl	8004b38 <LL_ADC_IsEnabled>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d047      	beq.n	8004d0a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	6811      	ldr	r1, [r2, #0]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	6892      	ldr	r2, [r2, #8]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c92:	e03a      	b.n	8004d0a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10e      	bne.n	8004cd2 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8004cb4:	481a      	ldr	r0, [pc, #104]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8004cb6:	f7ff ff3f 	bl	8004b38 <LL_ADC_IsEnabled>
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4819      	ldr	r0, [pc, #100]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8004cbe:	f7ff ff3b 	bl	8004b38 <LL_ADC_IsEnabled>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4323      	orrs	r3, r4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf0c      	ite	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	2300      	movne	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e008      	b.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8004cd2:	4817      	ldr	r0, [pc, #92]	; (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cd4:	f7ff ff30 	bl	8004b38 <LL_ADC_IsEnabled>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d010      	beq.n	8004d0a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cf2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf4:	e009      	b.n	8004d0a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004d08:	e000      	b.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d0a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	377c      	adds	r7, #124	; 0x7c
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd90      	pop	{r4, r7, pc}
 8004d20:	40022000 	.word	0x40022000
 8004d24:	40022100 	.word	0x40022100
 8004d28:	40022300 	.word	0x40022300
 8004d2c:	58026300 	.word	0x58026300
 8004d30:	58026000 	.word	0x58026000
 8004d34:	fffff0e0 	.word	0xfffff0e0

08004d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <__NVIC_SetPriorityGrouping+0x40>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d54:	4013      	ands	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <__NVIC_SetPriorityGrouping+0x44>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d66:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <__NVIC_SetPriorityGrouping+0x40>)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	60d3      	str	r3, [r2, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000ed00 	.word	0xe000ed00
 8004d7c:	05fa0000 	.word	0x05fa0000

08004d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d84:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <__NVIC_GetPriorityGrouping+0x18>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	0a1b      	lsrs	r3, r3, #8
 8004d8a:	f003 0307 	and.w	r3, r3, #7
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	e000ed00 	.word	0xe000ed00

08004d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	db0b      	blt.n	8004dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	f003 021f 	and.w	r2, r3, #31
 8004db4:	4907      	ldr	r1, [pc, #28]	; (8004dd4 <__NVIC_EnableIRQ+0x38>)
 8004db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	e000e100 	.word	0xe000e100

08004dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	6039      	str	r1, [r7, #0]
 8004de2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db0a      	blt.n	8004e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	490c      	ldr	r1, [pc, #48]	; (8004e24 <__NVIC_SetPriority+0x4c>)
 8004df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df6:	0112      	lsls	r2, r2, #4
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e00:	e00a      	b.n	8004e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	4908      	ldr	r1, [pc, #32]	; (8004e28 <__NVIC_SetPriority+0x50>)
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	3b04      	subs	r3, #4
 8004e10:	0112      	lsls	r2, r2, #4
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	440b      	add	r3, r1
 8004e16:	761a      	strb	r2, [r3, #24]
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000e100 	.word	0xe000e100
 8004e28:	e000ed00 	.word	0xe000ed00

08004e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b089      	sub	sp, #36	; 0x24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f1c3 0307 	rsb	r3, r3, #7
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	bf28      	it	cs
 8004e4a:	2304      	movcs	r3, #4
 8004e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3304      	adds	r3, #4
 8004e52:	2b06      	cmp	r3, #6
 8004e54:	d902      	bls.n	8004e5c <NVIC_EncodePriority+0x30>
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3b03      	subs	r3, #3
 8004e5a:	e000      	b.n	8004e5e <NVIC_EncodePriority+0x32>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e60:	f04f 32ff 	mov.w	r2, #4294967295
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	401a      	ands	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e74:	f04f 31ff 	mov.w	r1, #4294967295
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7e:	43d9      	mvns	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e84:	4313      	orrs	r3, r2
         );
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3724      	adds	r7, #36	; 0x24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea4:	d301      	bcc.n	8004eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e00f      	b.n	8004eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ed4 <SysTick_Config+0x40>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eb2:	210f      	movs	r1, #15
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	f7ff ff8e 	bl	8004dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <SysTick_Config+0x40>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ec2:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <SysTick_Config+0x40>)
 8004ec4:	2207      	movs	r2, #7
 8004ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	e000e010 	.word	0xe000e010

08004ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff29 	bl	8004d38 <__NVIC_SetPriorityGrouping>
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004efc:	f7ff ff40 	bl	8004d80 <__NVIC_GetPriorityGrouping>
 8004f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	6978      	ldr	r0, [r7, #20]
 8004f08:	f7ff ff90 	bl	8004e2c <NVIC_EncodePriority>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff ff5f 	bl	8004dd8 <__NVIC_SetPriority>
}
 8004f1a:	bf00      	nop
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff ff33 	bl	8004d9c <__NVIC_EnableIRQ>
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff ffa4 	bl	8004e94 <SysTick_Config>
 8004f4c:	4603      	mov	r3, r0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	; 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f66:	4b89      	ldr	r3, [pc, #548]	; (800518c <HAL_GPIO_Init+0x234>)
 8004f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f6a:	e194      	b.n	8005296 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	2101      	movs	r1, #1
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	fa01 f303 	lsl.w	r3, r1, r3
 8004f78:	4013      	ands	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8186 	beq.w	8005290 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_GPIO_Init+0x4c>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d007      	beq.n	8004fa4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f98:	2b11      	cmp	r3, #17
 8004f9a:	d003      	beq.n	8004fa4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b12      	cmp	r3, #18
 8004fa2:	d130      	bne.n	8005006 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	2203      	movs	r2, #3
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fda:	2201      	movs	r2, #1
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0201 	and.w	r2, r3, #1
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	2203      	movs	r2, #3
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_Init+0xee>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b12      	cmp	r3, #18
 8005044:	d123      	bne.n	800508e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	08da      	lsrs	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3208      	adds	r2, #8
 800504e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	220f      	movs	r2, #15
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	08da      	lsrs	r2, r3, #3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3208      	adds	r2, #8
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	2203      	movs	r2, #3
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4013      	ands	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 0203 	and.w	r2, r3, #3
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80e0 	beq.w	8005290 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d0:	4b2f      	ldr	r3, [pc, #188]	; (8005190 <HAL_GPIO_Init+0x238>)
 80050d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050d6:	4a2e      	ldr	r2, [pc, #184]	; (8005190 <HAL_GPIO_Init+0x238>)
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050e0:	4b2b      	ldr	r3, [pc, #172]	; (8005190 <HAL_GPIO_Init+0x238>)
 80050e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ee:	4a29      	ldr	r2, [pc, #164]	; (8005194 <HAL_GPIO_Init+0x23c>)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	089b      	lsrs	r3, r3, #2
 80050f4:	3302      	adds	r3, #2
 80050f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	220f      	movs	r2, #15
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4013      	ands	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a20      	ldr	r2, [pc, #128]	; (8005198 <HAL_GPIO_Init+0x240>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d052      	beq.n	80051c0 <HAL_GPIO_Init+0x268>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1f      	ldr	r2, [pc, #124]	; (800519c <HAL_GPIO_Init+0x244>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d031      	beq.n	8005186 <HAL_GPIO_Init+0x22e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <HAL_GPIO_Init+0x248>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d02b      	beq.n	8005182 <HAL_GPIO_Init+0x22a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <HAL_GPIO_Init+0x24c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d025      	beq.n	800517e <HAL_GPIO_Init+0x226>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <HAL_GPIO_Init+0x250>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01f      	beq.n	800517a <HAL_GPIO_Init+0x222>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <HAL_GPIO_Init+0x254>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d019      	beq.n	8005176 <HAL_GPIO_Init+0x21e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <HAL_GPIO_Init+0x258>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_GPIO_Init+0x21a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_GPIO_Init+0x25c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00d      	beq.n	800516e <HAL_GPIO_Init+0x216>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <HAL_GPIO_Init+0x260>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <HAL_GPIO_Init+0x212>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a17      	ldr	r2, [pc, #92]	; (80051bc <HAL_GPIO_Init+0x264>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <HAL_GPIO_Init+0x20e>
 8005162:	2309      	movs	r3, #9
 8005164:	e02d      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005166:	230a      	movs	r3, #10
 8005168:	e02b      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800516a:	2308      	movs	r3, #8
 800516c:	e029      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800516e:	2307      	movs	r3, #7
 8005170:	e027      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005172:	2306      	movs	r3, #6
 8005174:	e025      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005176:	2305      	movs	r3, #5
 8005178:	e023      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800517a:	2304      	movs	r3, #4
 800517c:	e021      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800517e:	2303      	movs	r3, #3
 8005180:	e01f      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005182:	2302      	movs	r3, #2
 8005184:	e01d      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 8005186:	2301      	movs	r3, #1
 8005188:	e01b      	b.n	80051c2 <HAL_GPIO_Init+0x26a>
 800518a:	bf00      	nop
 800518c:	58000080 	.word	0x58000080
 8005190:	58024400 	.word	0x58024400
 8005194:	58000400 	.word	0x58000400
 8005198:	58020000 	.word	0x58020000
 800519c:	58020400 	.word	0x58020400
 80051a0:	58020800 	.word	0x58020800
 80051a4:	58020c00 	.word	0x58020c00
 80051a8:	58021000 	.word	0x58021000
 80051ac:	58021400 	.word	0x58021400
 80051b0:	58021800 	.word	0x58021800
 80051b4:	58021c00 	.word	0x58021c00
 80051b8:	58022000 	.word	0x58022000
 80051bc:	58022400 	.word	0x58022400
 80051c0:	2300      	movs	r3, #0
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	f002 0203 	and.w	r2, r2, #3
 80051c8:	0092      	lsls	r2, r2, #2
 80051ca:	4093      	lsls	r3, r2
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051d2:	4938      	ldr	r1, [pc, #224]	; (80052b4 <HAL_GPIO_Init+0x35c>)
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	089b      	lsrs	r3, r3, #2
 80051d8:	3302      	adds	r3, #2
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	43db      	mvns	r3, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4013      	ands	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800525a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3301      	adds	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f47f ae63 	bne.w	8004f6c <HAL_GPIO_Init+0x14>
  }
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	3724      	adds	r7, #36	; 0x24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	58000400 	.word	0x58000400

080052b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	887b      	ldrh	r3, [r7, #2]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
 80052d4:	e001      	b.n	80052da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
 80052f4:	4613      	mov	r3, r2
 80052f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052f8:	787b      	ldrb	r3, [r7, #1]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052fe:	887a      	ldrh	r2, [r7, #2]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005304:	e003      	b.n	800530e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005306:	887b      	ldrh	r3, [r7, #2]
 8005308:	041a      	lsls	r2, r3, #16
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	619a      	str	r2, [r3, #24]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	4603      	mov	r3, r0
 8005322:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 f804 	bl	800534e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	4603      	mov	r3, r0
 8005356:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e038      	b.n	80053e8 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800537e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f245 5255 	movw	r2, #21845	; 0x5555
 8005388:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6852      	ldr	r2, [r2, #4]
 8005392:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6892      	ldr	r2, [r2, #8]
 800539c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800539e:	f7fe fc45 	bl	8003c2c <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80053a4:	e008      	b.n	80053b8 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80053a6:	f7fe fc41 	bl	8003c2c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b30      	cmp	r3, #48	; 0x30
 80053b2:	d901      	bls.n	80053b8 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e017      	b.n	80053e8 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f1      	bne.n	80053a6 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d005      	beq.n	80053dc <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	68d2      	ldr	r2, [r2, #12]
 80053d8:	611a      	str	r2, [r3, #16]
 80053da:	e004      	b.n	80053e6 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80053e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005400:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005412:	b08f      	sub	sp, #60	; 0x3c
 8005414:	af0a      	add	r7, sp, #40	; 0x28
 8005416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e116      	b.n	8005650 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d106      	bne.n	8005442 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f009 f899 	bl	800e574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2203      	movs	r2, #3
 8005446:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f005 ff3c 	bl	800b2de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	687e      	ldr	r6, [r7, #4]
 800546e:	466d      	mov	r5, sp
 8005470:	f106 0410 	add.w	r4, r6, #16
 8005474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800547a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800547c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005480:	e885 0003 	stmia.w	r5, {r0, r1}
 8005484:	1d33      	adds	r3, r6, #4
 8005486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005488:	6838      	ldr	r0, [r7, #0]
 800548a:	f005 fe13 	bl	800b0b4 <USB_CoreInit>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0d7      	b.n	8005650 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f005 ff2a 	bl	800b300 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
 80054b0:	e04a      	b.n	8005548 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054b2:	7bfa      	ldrb	r2, [r7, #15]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	333d      	adds	r3, #61	; 0x3d
 80054c2:	2201      	movs	r2, #1
 80054c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80054c6:	7bfa      	ldrb	r2, [r7, #15]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	333c      	adds	r3, #60	; 0x3c
 80054d6:	7bfa      	ldrb	r2, [r7, #15]
 80054d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054da:	7bfa      	ldrb	r2, [r7, #15]
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	b298      	uxth	r0, r3
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	3342      	adds	r3, #66	; 0x42
 80054ee:	4602      	mov	r2, r0
 80054f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054f2:	7bfa      	ldrb	r2, [r7, #15]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	333f      	adds	r3, #63	; 0x3f
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005506:	7bfa      	ldrb	r2, [r7, #15]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3344      	adds	r3, #68	; 0x44
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800551a:	7bfa      	ldrb	r2, [r7, #15]
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	3348      	adds	r3, #72	; 0x48
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800552e:	7bfa      	ldrb	r2, [r7, #15]
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	3350      	adds	r3, #80	; 0x50
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	3301      	adds	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	7bfa      	ldrb	r2, [r7, #15]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	429a      	cmp	r2, r3
 8005550:	d3af      	bcc.n	80054b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005552:	2300      	movs	r3, #0
 8005554:	73fb      	strb	r3, [r7, #15]
 8005556:	e044      	b.n	80055e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800556e:	7bfa      	ldrb	r2, [r7, #15]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005580:	7bfa      	ldrb	r2, [r7, #15]
 8005582:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005584:	7bfa      	ldrb	r2, [r7, #15]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800559a:	7bfa      	ldrb	r2, [r7, #15]
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055b0:	7bfa      	ldrb	r2, [r7, #15]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80055c6:	7bfa      	ldrb	r2, [r7, #15]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	3301      	adds	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
 80055e2:	7bfa      	ldrb	r2, [r7, #15]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d3b5      	bcc.n	8005558 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	687e      	ldr	r6, [r7, #4]
 80055f4:	466d      	mov	r5, sp
 80055f6:	f106 0410 	add.w	r4, r6, #16
 80055fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005606:	e885 0003 	stmia.w	r5, {r0, r1}
 800560a:	1d33      	adds	r3, r6, #4
 800560c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800560e:	6838      	ldr	r0, [r7, #0]
 8005610:	f005 fea0 	bl	800b354 <USB_DevInit>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2202      	movs	r2, #2
 800561e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e014      	b.n	8005650 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b01      	cmp	r3, #1
 800563c:	d102      	bne.n	8005644 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f001 f892 	bl	8006768 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f006 fedf 	bl	800c40c <USB_DevDisconnect>

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005658 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_PCD_Start+0x1c>
 8005670:	2302      	movs	r3, #2
 8005672:	e020      	b.n	80056b6 <HAL_PCD_Start+0x5e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	2b01      	cmp	r3, #1
 8005682:	d109      	bne.n	8005698 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005688:	2b01      	cmp	r3, #1
 800568a:	d005      	beq.n	8005698 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f006 fe9d 	bl	800c3dc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f005 fe08 	bl	800b2bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056be:	b590      	push	{r4, r7, lr}
 80056c0:	b08d      	sub	sp, #52	; 0x34
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f006 ff44 	bl	800c562 <USB_GetMode>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f040 83ca 	bne.w	8005e76 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f006 fea8 	bl	800c43c <USB_ReadInterrupts>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 83c0 	beq.w	8005e74 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f006 fe9f 	bl	800c43c <USB_ReadInterrupts>
 80056fe:	4603      	mov	r3, r0
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d107      	bne.n	8005718 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f002 0202 	and.w	r2, r2, #2
 8005716:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f006 fe8d 	bl	800c43c <USB_ReadInterrupts>
 8005722:	4603      	mov	r3, r0
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b10      	cmp	r3, #16
 800572a:	d161      	bne.n	80057f0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0210 	bic.w	r2, r2, #16
 800573a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f003 020f 	and.w	r2, r3, #15
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4413      	add	r3, r2
 8005758:	3304      	adds	r3, #4
 800575a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	0c5b      	lsrs	r3, r3, #17
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	2b02      	cmp	r3, #2
 8005766:	d124      	bne.n	80057b2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d035      	beq.n	80057e0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800577e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005782:	b29b      	uxth	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	6a38      	ldr	r0, [r7, #32]
 8005788:	f006 fd05 	bl	800c196 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005798:	441a      	add	r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057aa:	441a      	add	r2, r3
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	619a      	str	r2, [r3, #24]
 80057b0:	e016      	b.n	80057e0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	0c5b      	lsrs	r3, r3, #17
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d110      	bne.n	80057e0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057c4:	2208      	movs	r2, #8
 80057c6:	4619      	mov	r1, r3
 80057c8:	6a38      	ldr	r0, [r7, #32]
 80057ca:	f006 fce4 	bl	800c196 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057da:	441a      	add	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0210 	orr.w	r2, r2, #16
 80057ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f006 fe21 	bl	800c43c <USB_ReadInterrupts>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005800:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005804:	d16e      	bne.n	80058e4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f006 fe27 	bl	800c462 <USB_ReadDevAllOutEpInterrupt>
 8005814:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005816:	e062      	b.n	80058de <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d057      	beq.n	80058d2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	4611      	mov	r1, r2
 800582c:	4618      	mov	r0, r3
 800582e:	f006 fe4c 	bl	800c4ca <USB_ReadDevOutEPInterrupt>
 8005832:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	461a      	mov	r2, r3
 800584c:	2301      	movs	r3, #1
 800584e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fdde 	bl	8006414 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	2308      	movs	r3, #8
 8005872:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fed8 	bl	800662c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005892:	461a      	mov	r2, r3
 8005894:	2310      	movs	r3, #16
 8005896:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	461a      	mov	r2, r3
 80058b0:	2320      	movs	r3, #32
 80058b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	461a      	mov	r2, r3
 80058cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	3301      	adds	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d199      	bne.n	8005818 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f006 fda7 	bl	800c43c <USB_ReadInterrupts>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058f8:	f040 80c0 	bne.w	8005a7c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f006 fdc8 	bl	800c496 <USB_ReadDevAllInEpInterrupt>
 8005906:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800590c:	e0b2      	b.n	8005a74 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80a7 	beq.w	8005a68 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f006 fdee 	bl	800c506 <USB_ReadDevInEPInterrupt>
 800592a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d057      	beq.n	80059e6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	2201      	movs	r2, #1
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	43db      	mvns	r3, r3
 8005950:	69f9      	ldr	r1, [r7, #28]
 8005952:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005956:	4013      	ands	r3, r2
 8005958:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	461a      	mov	r2, r3
 8005968:	2301      	movs	r3, #1
 800596a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d132      	bne.n	80059da <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	3348      	adds	r3, #72	; 0x48
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4403      	add	r3, r0
 8005994:	3344      	adds	r3, #68	; 0x44
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4419      	add	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4403      	add	r3, r0
 80059a8:	3348      	adds	r3, #72	; 0x48
 80059aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d113      	bne.n	80059da <HAL_PCD_IRQHandler+0x31c>
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b6:	4613      	mov	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	3350      	adds	r3, #80	; 0x50
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d108      	bne.n	80059da <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059d2:	461a      	mov	r2, r3
 80059d4:	2101      	movs	r1, #1
 80059d6:	f006 fdf7 	bl	800c5c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f008 fe46 	bl	800e672 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	461a      	mov	r2, r3
 80059fe:	2308      	movs	r3, #8
 8005a00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2310      	movs	r3, #16
 8005a1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	461a      	mov	r2, r3
 8005a36:	2340      	movs	r3, #64	; 0x40
 8005a38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	461a      	mov	r2, r3
 8005a52:	2302      	movs	r3, #2
 8005a54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fc48 	bl	80062f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f47f af49 	bne.w	800590e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f006 fcdb 	bl	800c43c <USB_ReadInterrupts>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a90:	d122      	bne.n	8005ad8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d108      	bne.n	8005ac2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ab8:	2100      	movs	r1, #0
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fe78 	bl	80067b0 <HAL_PCDEx_LPM_Callback>
 8005ac0:	e002      	b.n	8005ac8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f008 fe4c 	bl	800e760 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f006 fcad 	bl	800c43c <USB_ReadInterrupts>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aec:	d112      	bne.n	8005b14 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d102      	bne.n	8005b04 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f008 fe08 	bl	800e714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b12:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f006 fc8f 	bl	800c43c <USB_ReadInterrupts>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b28:	d121      	bne.n	8005b6e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695a      	ldr	r2, [r3, #20]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005b38:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d111      	bne.n	8005b68 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b52:	089b      	lsrs	r3, r3, #2
 8005b54:	f003 020f 	and.w	r2, r3, #15
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005b5e:	2101      	movs	r1, #1
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fe25 	bl	80067b0 <HAL_PCDEx_LPM_Callback>
 8005b66:	e002      	b.n	8005b6e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f008 fdd3 	bl	800e714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f006 fc62 	bl	800c43c <USB_ReadInterrupts>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b82:	f040 80c7 	bne.w	8005d14 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2110      	movs	r1, #16
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f005 fd35 	bl	800b610 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005baa:	e056      	b.n	8005c5a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bbe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bde:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bfe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c12:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c52:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	3301      	adds	r3, #1
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d3a3      	bcc.n	8005bac <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c72:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005c76:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d016      	beq.n	8005cae <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c90:	f043 030b 	orr.w	r3, r3, #11
 8005c94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca6:	f043 030b 	orr.w	r3, r3, #11
 8005caa:	6453      	str	r3, [r2, #68]	; 0x44
 8005cac:	e015      	b.n	8005cda <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f242 032b 	movw	r3, #8235	; 0x202b
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd4:	f043 030b 	orr.w	r3, r3, #11
 8005cd8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005cec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f006 fc62 	bl	800c5c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f006 fb8f 	bl	800c43c <USB_ReadInterrupts>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d28:	d124      	bne.n	8005d74 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f006 fc26 	bl	800c580 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f005 fcca 	bl	800b6d2 <USB_GetDevSpeed>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681c      	ldr	r4, [r3, #0]
 8005d4a:	f001 fcc5 	bl	80076d8 <HAL_RCC_GetHCLKFreq>
 8005d4e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f005 fa0d 	bl	800b178 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f008 fcaf 	bl	800e6c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f006 fb5f 	bl	800c43c <USB_ReadInterrupts>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d10a      	bne.n	8005d9e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f008 fc8c 	bl	800e6a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f002 0208 	and.w	r2, r2, #8
 8005d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f006 fb4a 	bl	800c43c <USB_ReadInterrupts>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db2:	d10f      	bne.n	8005dd4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f008 fcee 	bl	800e7a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f006 fb2f 	bl	800c43c <USB_ReadInterrupts>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de8:	d10f      	bne.n	8005e0a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f008 fcc1 	bl	800e77c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f006 fb14 	bl	800c43c <USB_ReadInterrupts>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d10a      	bne.n	8005e36 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f008 fccf 	bl	800e7c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f006 fafe 	bl	800c43c <USB_ReadInterrupts>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d115      	bne.n	8005e76 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f008 fcbf 	bl	800e7e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6859      	ldr	r1, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
 8005e72:	e000      	b.n	8005e76 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005e74:	bf00      	nop
    }
  }
}
 8005e76:	3734      	adds	r7, #52	; 0x34
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd90      	pop	{r4, r7, pc}

08005e7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_PCD_SetAddress+0x1a>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e013      	b.n	8005ebe <HAL_PCD_SetAddress+0x42>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	78fa      	ldrb	r2, [r7, #3]
 8005ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	4611      	mov	r1, r2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f006 fa6e 	bl	800c390 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	4608      	mov	r0, r1
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	70fb      	strb	r3, [r7, #3]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	803b      	strh	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da0f      	bge.n	8005f0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	f003 020f 	and.w	r2, r3, #15
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	3338      	adds	r3, #56	; 0x38
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	4413      	add	r3, r2
 8005f00:	3304      	adds	r3, #4
 8005f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	705a      	strb	r2, [r3, #1]
 8005f0a:	e00f      	b.n	8005f2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	f003 020f 	and.w	r2, r3, #15
 8005f12:	4613      	mov	r3, r2
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	3304      	adds	r3, #4
 8005f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f38:	883a      	ldrh	r2, [r7, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	78ba      	ldrb	r2, [r7, #2]
 8005f42:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f56:	78bb      	ldrb	r3, [r7, #2]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d102      	bne.n	8005f62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_PCD_EP_Open+0xaa>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e00e      	b.n	8005f8e <HAL_PCD_EP_Open+0xc8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68f9      	ldr	r1, [r7, #12]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f005 fbcc 	bl	800b71c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005f8c:	7afb      	ldrb	r3, [r7, #11]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	da0f      	bge.n	8005fca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	1a9b      	subs	r3, r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	3338      	adds	r3, #56	; 0x38
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	705a      	strb	r2, [r3, #1]
 8005fc8:	e00f      	b.n	8005fea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 020f 	and.w	r2, r3, #15
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4413      	add	r3, r2
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_PCD_EP_Close+0x6e>
 8006000:	2302      	movs	r3, #2
 8006002:	e00e      	b.n	8006022 <HAL_PCD_EP_Close+0x8c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	4618      	mov	r0, r3
 8006014:	f005 fc0a 	bl	800b82c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	460b      	mov	r3, r1
 8006038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800603a:	7afb      	ldrb	r3, [r7, #11]
 800603c:	f003 020f 	and.w	r2, r3, #15
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	3304      	adds	r3, #4
 8006052:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2200      	movs	r2, #0
 8006064:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2200      	movs	r2, #0
 800606a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800606c:	7afb      	ldrb	r3, [r7, #11]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	b2da      	uxtb	r2, r3
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d102      	bne.n	8006086 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006086:	7afb      	ldrb	r3, [r7, #11]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	6979      	ldr	r1, [r7, #20]
 800609e:	f005 feed 	bl	800be7c <USB_EP0StartXfer>
 80060a2:	e008      	b.n	80060b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	6979      	ldr	r1, [r7, #20]
 80060b2:	f005 fc97 	bl	800b9e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 020f 	and.w	r2, r3, #15
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80060e2:	681b      	ldr	r3, [r3, #0]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	460b      	mov	r3, r1
 80060fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006100:	7afb      	ldrb	r3, [r7, #11]
 8006102:	f003 020f 	and.w	r2, r3, #15
 8006106:	4613      	mov	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	3338      	adds	r3, #56	; 0x38
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	3304      	adds	r3, #4
 8006116:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2200      	movs	r2, #0
 8006128:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2201      	movs	r2, #1
 800612e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006130:	7afb      	ldrb	r3, [r7, #11]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	b2da      	uxtb	r2, r3
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d102      	bne.n	800614a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800614a:	7afb      	ldrb	r3, [r7, #11]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	6979      	ldr	r1, [r7, #20]
 8006162:	f005 fe8b 	bl	800be7c <USB_EP0StartXfer>
 8006166:	e008      	b.n	800617a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	6979      	ldr	r1, [r7, #20]
 8006176:	f005 fc35 	bl	800b9e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	f003 020f 	and.w	r2, r3, #15
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	429a      	cmp	r2, r3
 800619c:	d901      	bls.n	80061a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e050      	b.n	8006244 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	da0f      	bge.n	80061ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	f003 020f 	and.w	r2, r3, #15
 80061b0:	4613      	mov	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	3338      	adds	r3, #56	; 0x38
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	3304      	adds	r3, #4
 80061c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	705a      	strb	r2, [r3, #1]
 80061c8:	e00d      	b.n	80061e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	4613      	mov	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4413      	add	r3, r2
 80061dc:	3304      	adds	r3, #4
 80061de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_PCD_EP_SetStall+0x82>
 8006202:	2302      	movs	r3, #2
 8006204:	e01e      	b.n	8006244 <HAL_PCD_EP_SetStall+0xc0>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	4618      	mov	r0, r3
 8006216:	f005 ffe7 	bl	800c1e8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	b2d9      	uxtb	r1, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006234:	461a      	mov	r2, r3
 8006236:	f006 f9c7 	bl	800c5c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	f003 020f 	and.w	r2, r3, #15
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d901      	bls.n	800626a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e042      	b.n	80062f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800626a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800626e:	2b00      	cmp	r3, #0
 8006270:	da0f      	bge.n	8006292 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	f003 020f 	and.w	r2, r3, #15
 8006278:	4613      	mov	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	1a9b      	subs	r3, r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	3338      	adds	r3, #56	; 0x38
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	3304      	adds	r3, #4
 8006288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	705a      	strb	r2, [r3, #1]
 8006290:	e00f      	b.n	80062b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 020f 	and.w	r2, r3, #15
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	4413      	add	r3, r2
 80062a8:	3304      	adds	r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_PCD_EP_ClrStall+0x86>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e00e      	b.n	80062f0 <HAL_PCD_EP_ClrStall+0xa4>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f005 ffef 	bl	800c2c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	; 0x28
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	4613      	mov	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	3338      	adds	r3, #56	; 0x38
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4413      	add	r3, r2
 800631c:	3304      	adds	r3, #4
 800631e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	699a      	ldr	r2, [r3, #24]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	429a      	cmp	r2, r3
 800632a:	d901      	bls.n	8006330 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e06c      	b.n	800640a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	429a      	cmp	r2, r3
 8006344:	d902      	bls.n	800634c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	3303      	adds	r3, #3
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006354:	e02b      	b.n	80063ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	429a      	cmp	r2, r3
 800636a:	d902      	bls.n	8006372 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3303      	adds	r3, #3
 8006376:	089b      	lsrs	r3, r3, #2
 8006378:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	68d9      	ldr	r1, [r3, #12]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800638a:	b2db      	uxtb	r3, r3
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4603      	mov	r3, r0
 8006390:	6978      	ldr	r0, [r7, #20]
 8006392:	f005 fecb 	bl	800c12c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	441a      	add	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	441a      	add	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d809      	bhi.n	80063d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	699a      	ldr	r2, [r3, #24]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d203      	bcs.n	80063d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1be      	bne.n	8006356 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	695a      	ldr	r2, [r3, #20]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d811      	bhi.n	8006408 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	2201      	movs	r2, #1
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	43db      	mvns	r3, r3
 80063fe:	6939      	ldr	r1, [r7, #16]
 8006400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006404:	4013      	ands	r3, r2
 8006406:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3720      	adds	r7, #32
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	333c      	adds	r3, #60	; 0x3c
 800642c:	3304      	adds	r3, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b01      	cmp	r3, #1
 8006448:	f040 80a0 	bne.w	800658c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d015      	beq.n	8006482 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4a72      	ldr	r2, [pc, #456]	; (8006624 <PCD_EP_OutXfrComplete_int+0x210>)
 800645a:	4293      	cmp	r3, r2
 800645c:	f240 80dd 	bls.w	800661a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80d7 	beq.w	800661a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	461a      	mov	r2, r3
 800647a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800647e:	6093      	str	r3, [r2, #8]
 8006480:	e0cb      	b.n	800661a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	2320      	movs	r3, #32
 800649c:	6093      	str	r3, [r2, #8]
 800649e:	e0bc      	b.n	800661a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 80b7 	bne.w	800661a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a5d      	ldr	r2, [pc, #372]	; (8006624 <PCD_EP_OutXfrComplete_int+0x210>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d90f      	bls.n	80064d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	461a      	mov	r2, r3
 80064cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d0:	6093      	str	r3, [r2, #8]
 80064d2:	e0a2      	b.n	800661a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4613      	mov	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80064e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	0159      	lsls	r1, r3, #5
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	440b      	add	r3, r1
 80064f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80064fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4403      	add	r3, r0
 800650a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800650e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	4613      	mov	r3, r2
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	1a9b      	subs	r3, r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006522:	6819      	ldr	r1, [r3, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	4613      	mov	r3, r2
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4403      	add	r3, r0
 8006532:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4419      	add	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	4613      	mov	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4403      	add	r3, r0
 8006548:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800654c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d114      	bne.n	800657e <PCD_EP_OutXfrComplete_int+0x16a>
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	4613      	mov	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	1a9b      	subs	r3, r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d108      	bne.n	800657e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006576:	461a      	mov	r2, r3
 8006578:	2101      	movs	r1, #1
 800657a:	f006 f825 	bl	800c5c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f008 f859 	bl	800e63c <HAL_PCD_DataOutStageCallback>
 800658a:	e046      	b.n	800661a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4a26      	ldr	r2, [pc, #152]	; (8006628 <PCD_EP_OutXfrComplete_int+0x214>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d124      	bne.n	80065de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065aa:	461a      	mov	r2, r3
 80065ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b0:	6093      	str	r3, [r2, #8]
 80065b2:	e032      	b.n	800661a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	461a      	mov	r2, r3
 80065cc:	2320      	movs	r3, #32
 80065ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f008 f830 	bl	800e63c <HAL_PCD_DataOutStageCallback>
 80065dc:	e01d      	b.n	800661a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d114      	bne.n	800660e <PCD_EP_OutXfrComplete_int+0x1fa>
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d108      	bne.n	800660e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006606:	461a      	mov	r2, r3
 8006608:	2100      	movs	r1, #0
 800660a:	f005 ffdd 	bl	800c5c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f008 f811 	bl	800e63c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	4f54300a 	.word	0x4f54300a
 8006628:	4f54310a 	.word	0x4f54310a

0800662c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	333c      	adds	r3, #60	; 0x3c
 8006644:	3304      	adds	r3, #4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d90e      	bls.n	8006680 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	461a      	mov	r2, r3
 800667a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f007 ffc9 	bl	800e618 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a0a      	ldr	r2, [pc, #40]	; (80066b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d90c      	bls.n	80066a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d108      	bne.n	80066a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066a0:	461a      	mov	r2, r3
 80066a2:	2101      	movs	r1, #1
 80066a4:	f005 ff90 	bl	800c5c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	4f54300a 	.word	0x4f54300a

080066b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
 80066c4:	4613      	mov	r3, r2
 80066c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d107      	bne.n	80066e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066d6:	883b      	ldrh	r3, [r7, #0]
 80066d8:	0419      	lsls	r1, r3, #16
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28
 80066e4:	e028      	b.n	8006738 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	0c1b      	lsrs	r3, r3, #16
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	4413      	add	r3, r2
 80066f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]
 80066f8:	e00d      	b.n	8006716 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	3340      	adds	r3, #64	; 0x40
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	4413      	add	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	3301      	adds	r3, #1
 8006714:	73fb      	strb	r3, [r7, #15]
 8006716:	7bfa      	ldrb	r2, [r7, #15]
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	3b01      	subs	r3, #1
 800671c:	429a      	cmp	r2, r3
 800671e:	d3ec      	bcc.n	80066fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006720:	883b      	ldrh	r3, [r7, #0]
 8006722:	0418      	lsls	r0, r3, #16
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6819      	ldr	r1, [r3, #0]
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	3b01      	subs	r3, #1
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	4302      	orrs	r2, r0
 8006730:	3340      	adds	r3, #64	; 0x40
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	887a      	ldrh	r2, [r7, #2]
 8006758:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <HAL_PCDEx_ActivateLPM+0x44>)
 8006798:	4313      	orrs	r3, r2
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	10000003 	.word	0x10000003

080067b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80067d0:	4b19      	ldr	r3, [pc, #100]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d00a      	beq.n	80067f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80067dc:	4b16      	ldr	r3, [pc, #88]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d001      	beq.n	80067ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e01f      	b.n	800682e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e01d      	b.n	800682e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f023 0207 	bic.w	r2, r3, #7
 80067fa:	490f      	ldr	r1, [pc, #60]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006802:	f7fd fa13 	bl	8003c2c <HAL_GetTick>
 8006806:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006808:	e009      	b.n	800681e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800680a:	f7fd fa0f 	bl	8003c2c <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006818:	d901      	bls.n	800681e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e007      	b.n	800682e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <HAL_PWREx_ConfigSupply+0x70>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682a:	d1ee      	bne.n	800680a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	58024800 	.word	0x58024800

0800683c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4a04      	ldr	r2, [pc, #16]	; (8006858 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800684a:	60d3      	str	r3, [r2, #12]
}
 800684c:	bf00      	nop
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	58024800 	.word	0x58024800

0800685c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08c      	sub	sp, #48	; 0x30
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e3fd      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8087 	beq.w	800698a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800687c:	4b99      	ldr	r3, [pc, #612]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006886:	4b97      	ldr	r3, [pc, #604]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	2b10      	cmp	r3, #16
 8006890:	d007      	beq.n	80068a2 <HAL_RCC_OscConfig+0x46>
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	2b18      	cmp	r3, #24
 8006896:	d110      	bne.n	80068ba <HAL_RCC_OscConfig+0x5e>
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d10b      	bne.n	80068ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a2:	4b90      	ldr	r3, [pc, #576]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d06c      	beq.n	8006988 <HAL_RCC_OscConfig+0x12c>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d168      	bne.n	8006988 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e3d7      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c2:	d106      	bne.n	80068d2 <HAL_RCC_OscConfig+0x76>
 80068c4:	4b87      	ldr	r3, [pc, #540]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a86      	ldr	r2, [pc, #536]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80068ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	e02e      	b.n	8006930 <HAL_RCC_OscConfig+0xd4>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10c      	bne.n	80068f4 <HAL_RCC_OscConfig+0x98>
 80068da:	4b82      	ldr	r3, [pc, #520]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a81      	ldr	r2, [pc, #516]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80068e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	4b7f      	ldr	r3, [pc, #508]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a7e      	ldr	r2, [pc, #504]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80068ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	e01d      	b.n	8006930 <HAL_RCC_OscConfig+0xd4>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068fc:	d10c      	bne.n	8006918 <HAL_RCC_OscConfig+0xbc>
 80068fe:	4b79      	ldr	r3, [pc, #484]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a78      	ldr	r2, [pc, #480]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	4b76      	ldr	r3, [pc, #472]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a75      	ldr	r2, [pc, #468]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e00b      	b.n	8006930 <HAL_RCC_OscConfig+0xd4>
 8006918:	4b72      	ldr	r3, [pc, #456]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a71      	ldr	r2, [pc, #452]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 800691e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	4b6f      	ldr	r3, [pc, #444]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a6e      	ldr	r2, [pc, #440]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 800692a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800692e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d013      	beq.n	8006960 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fd f978 	bl	8003c2c <HAL_GetTick>
 800693c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006940:	f7fd f974 	bl	8003c2c <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b64      	cmp	r3, #100	; 0x64
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e38b      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006952:	4b64      	ldr	r3, [pc, #400]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0xe4>
 800695e:	e014      	b.n	800698a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fd f964 	bl	8003c2c <HAL_GetTick>
 8006964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006968:	f7fd f960 	bl	8003c2c <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b64      	cmp	r3, #100	; 0x64
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e377      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800697a:	4b5a      	ldr	r3, [pc, #360]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f0      	bne.n	8006968 <HAL_RCC_OscConfig+0x10c>
 8006986:	e000      	b.n	800698a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 80ae 	beq.w	8006af4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006998:	4b52      	ldr	r3, [pc, #328]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069a2:	4b50      	ldr	r3, [pc, #320]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <HAL_RCC_OscConfig+0x162>
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	2b18      	cmp	r3, #24
 80069b2:	d13a      	bne.n	8006a2a <HAL_RCC_OscConfig+0x1ce>
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d135      	bne.n	8006a2a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069be:	4b49      	ldr	r3, [pc, #292]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_RCC_OscConfig+0x17a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e349      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069d6:	f7fd f959 	bl	8003c8c <HAL_GetREVID>
 80069da:	4603      	mov	r3, r0
 80069dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d817      	bhi.n	8006a14 <HAL_RCC_OscConfig+0x1b8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b40      	cmp	r3, #64	; 0x40
 80069ea:	d108      	bne.n	80069fe <HAL_RCC_OscConfig+0x1a2>
 80069ec:	4b3d      	ldr	r3, [pc, #244]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069f4:	4a3b      	ldr	r2, [pc, #236]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 80069f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069fc:	e07a      	b.n	8006af4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069fe:	4b39      	ldr	r3, [pc, #228]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	031b      	lsls	r3, r3, #12
 8006a0c:	4935      	ldr	r1, [pc, #212]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a12:	e06f      	b.n	8006af4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a14:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	061b      	lsls	r3, r3, #24
 8006a22:	4930      	ldr	r1, [pc, #192]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a28:	e064      	b.n	8006af4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d045      	beq.n	8006abe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a32:	4b2c      	ldr	r3, [pc, #176]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f023 0219 	bic.w	r2, r3, #25
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	4929      	ldr	r1, [pc, #164]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fd f8f2 	bl	8003c2c <HAL_GetTick>
 8006a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a4c:	f7fd f8ee 	bl	8003c2c <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e305      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a5e:	4b21      	ldr	r3, [pc, #132]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0f0      	beq.n	8006a4c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a6a:	f7fd f90f 	bl	8003c8c <HAL_GetREVID>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d817      	bhi.n	8006aa8 <HAL_RCC_OscConfig+0x24c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	d108      	bne.n	8006a92 <HAL_RCC_OscConfig+0x236>
 8006a80:	4b18      	ldr	r3, [pc, #96]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a88:	4a16      	ldr	r2, [pc, #88]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a8e:	6053      	str	r3, [r2, #4]
 8006a90:	e030      	b.n	8006af4 <HAL_RCC_OscConfig+0x298>
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	031b      	lsls	r3, r3, #12
 8006aa0:	4910      	ldr	r1, [pc, #64]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	604b      	str	r3, [r1, #4]
 8006aa6:	e025      	b.n	8006af4 <HAL_RCC_OscConfig+0x298>
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	061b      	lsls	r3, r3, #24
 8006ab6:	490b      	ldr	r1, [pc, #44]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	604b      	str	r3, [r1, #4]
 8006abc:	e01a      	b.n	8006af4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006abe:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a08      	ldr	r2, [pc, #32]	; (8006ae4 <HAL_RCC_OscConfig+0x288>)
 8006ac4:	f023 0301 	bic.w	r3, r3, #1
 8006ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aca:	f7fd f8af 	bl	8003c2c <HAL_GetTick>
 8006ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ad0:	e00a      	b.n	8006ae8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ad2:	f7fd f8ab 	bl	8003c2c <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d903      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e2c2      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
 8006ae4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ae8:	4b94      	ldr	r3, [pc, #592]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1ee      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80a9 	beq.w	8006c54 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b02:	4b8e      	ldr	r3, [pc, #568]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b0c:	4b8b      	ldr	r3, [pc, #556]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d007      	beq.n	8006b28 <HAL_RCC_OscConfig+0x2cc>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b18      	cmp	r3, #24
 8006b1c:	d13a      	bne.n	8006b94 <HAL_RCC_OscConfig+0x338>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f003 0303 	and.w	r3, r3, #3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d135      	bne.n	8006b94 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b28:	4b84      	ldr	r3, [pc, #528]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_OscConfig+0x2e4>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	2b80      	cmp	r3, #128	; 0x80
 8006b3a:	d001      	beq.n	8006b40 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e294      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b40:	f7fd f8a4 	bl	8003c8c <HAL_GetREVID>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d817      	bhi.n	8006b7e <HAL_RCC_OscConfig+0x322>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d108      	bne.n	8006b68 <HAL_RCC_OscConfig+0x30c>
 8006b56:	4b79      	ldr	r3, [pc, #484]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b5e:	4a77      	ldr	r2, [pc, #476]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b66:	e075      	b.n	8006c54 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b68:	4b74      	ldr	r3, [pc, #464]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	069b      	lsls	r3, r3, #26
 8006b76:	4971      	ldr	r1, [pc, #452]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b7c:	e06a      	b.n	8006c54 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b7e:	4b6f      	ldr	r3, [pc, #444]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	061b      	lsls	r3, r3, #24
 8006b8c:	496b      	ldr	r1, [pc, #428]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b92:	e05f      	b.n	8006c54 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d042      	beq.n	8006c22 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b9c:	4b67      	ldr	r3, [pc, #412]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a66      	ldr	r2, [pc, #408]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fd f840 	bl	8003c2c <HAL_GetTick>
 8006bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006bb0:	f7fd f83c 	bl	8003c2c <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e253      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bc2:	4b5e      	ldr	r3, [pc, #376]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bce:	f7fd f85d 	bl	8003c8c <HAL_GetREVID>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d817      	bhi.n	8006c0c <HAL_RCC_OscConfig+0x3b0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d108      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x39a>
 8006be4:	4b55      	ldr	r3, [pc, #340]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006bec:	4a53      	ldr	r2, [pc, #332]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf2:	6053      	str	r3, [r2, #4]
 8006bf4:	e02e      	b.n	8006c54 <HAL_RCC_OscConfig+0x3f8>
 8006bf6:	4b51      	ldr	r3, [pc, #324]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	069b      	lsls	r3, r3, #26
 8006c04:	494d      	ldr	r1, [pc, #308]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	604b      	str	r3, [r1, #4]
 8006c0a:	e023      	b.n	8006c54 <HAL_RCC_OscConfig+0x3f8>
 8006c0c:	4b4b      	ldr	r3, [pc, #300]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	061b      	lsls	r3, r3, #24
 8006c1a:	4948      	ldr	r1, [pc, #288]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60cb      	str	r3, [r1, #12]
 8006c20:	e018      	b.n	8006c54 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c22:	4b46      	ldr	r3, [pc, #280]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a45      	ldr	r2, [pc, #276]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2e:	f7fc fffd 	bl	8003c2c <HAL_GetTick>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c36:	f7fc fff9 	bl	8003c2c <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e210      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c48:	4b3c      	ldr	r3, [pc, #240]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f0      	bne.n	8006c36 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d036      	beq.n	8006cce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d019      	beq.n	8006c9c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c68:	4b34      	ldr	r3, [pc, #208]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6c:	4a33      	ldr	r2, [pc, #204]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c74:	f7fc ffda 	bl	8003c2c <HAL_GetTick>
 8006c78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c7c:	f7fc ffd6 	bl	8003c2c <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e1ed      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c8e:	4b2b      	ldr	r3, [pc, #172]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f0      	beq.n	8006c7c <HAL_RCC_OscConfig+0x420>
 8006c9a:	e018      	b.n	8006cce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c9c:	4b27      	ldr	r3, [pc, #156]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca0:	4a26      	ldr	r2, [pc, #152]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca8:	f7fc ffc0 	bl	8003c2c <HAL_GetTick>
 8006cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cb0:	f7fc ffbc 	bl	8003c2c <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e1d3      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cc2:	4b1e      	ldr	r3, [pc, #120]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d038      	beq.n	8006d4c <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d019      	beq.n	8006d16 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ce2:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cee:	f7fc ff9d 	bl	8003c2c <HAL_GetTick>
 8006cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006cf6:	f7fc ff99 	bl	8003c2c <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e1b0      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x49a>
 8006d14:	e01a      	b.n	8006d4c <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a08      	ldr	r2, [pc, #32]	; (8006d3c <HAL_RCC_OscConfig+0x4e0>)
 8006d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d22:	f7fc ff83 	bl	8003c2c <HAL_GetTick>
 8006d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d28:	e00a      	b.n	8006d40 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d2a:	f7fc ff7f 	bl	8003c2c <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d903      	bls.n	8006d40 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e196      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
 8006d3c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d40:	4b99      	ldr	r3, [pc, #612]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1ee      	bne.n	8006d2a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8081 	beq.w	8006e5c <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d5a:	4b94      	ldr	r3, [pc, #592]	; (8006fac <HAL_RCC_OscConfig+0x750>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a93      	ldr	r2, [pc, #588]	; (8006fac <HAL_RCC_OscConfig+0x750>)
 8006d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d66:	f7fc ff61 	bl	8003c2c <HAL_GetTick>
 8006d6a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d6e:	f7fc ff5d 	bl	8003c2c <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b64      	cmp	r3, #100	; 0x64
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e174      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d80:	4b8a      	ldr	r3, [pc, #552]	; (8006fac <HAL_RCC_OscConfig+0x750>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0f0      	beq.n	8006d6e <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d106      	bne.n	8006da2 <HAL_RCC_OscConfig+0x546>
 8006d94:	4b84      	ldr	r3, [pc, #528]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d98:	4a83      	ldr	r2, [pc, #524]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006da0:	e02d      	b.n	8006dfe <HAL_RCC_OscConfig+0x5a2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10c      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x568>
 8006daa:	4b7f      	ldr	r3, [pc, #508]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	4a7e      	ldr	r2, [pc, #504]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	6713      	str	r3, [r2, #112]	; 0x70
 8006db6:	4b7c      	ldr	r3, [pc, #496]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	4a7b      	ldr	r2, [pc, #492]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dbc:	f023 0304 	bic.w	r3, r3, #4
 8006dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc2:	e01c      	b.n	8006dfe <HAL_RCC_OscConfig+0x5a2>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	d10c      	bne.n	8006de6 <HAL_RCC_OscConfig+0x58a>
 8006dcc:	4b76      	ldr	r3, [pc, #472]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd0:	4a75      	ldr	r2, [pc, #468]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dd2:	f043 0304 	orr.w	r3, r3, #4
 8006dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd8:	4b73      	ldr	r3, [pc, #460]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ddc:	4a72      	ldr	r2, [pc, #456]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dde:	f043 0301 	orr.w	r3, r3, #1
 8006de2:	6713      	str	r3, [r2, #112]	; 0x70
 8006de4:	e00b      	b.n	8006dfe <HAL_RCC_OscConfig+0x5a2>
 8006de6:	4b70      	ldr	r3, [pc, #448]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dea:	4a6f      	ldr	r2, [pc, #444]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	6713      	str	r3, [r2, #112]	; 0x70
 8006df2:	4b6d      	ldr	r3, [pc, #436]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	4a6c      	ldr	r2, [pc, #432]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006df8:	f023 0304 	bic.w	r3, r3, #4
 8006dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d015      	beq.n	8006e32 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e06:	f7fc ff11 	bl	8003c2c <HAL_GetTick>
 8006e0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e0c:	e00a      	b.n	8006e24 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e0e:	f7fc ff0d 	bl	8003c2c <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e122      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e24:	4b60      	ldr	r3, [pc, #384]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0ee      	beq.n	8006e0e <HAL_RCC_OscConfig+0x5b2>
 8006e30:	e014      	b.n	8006e5c <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e32:	f7fc fefb 	bl	8003c2c <HAL_GetTick>
 8006e36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e38:	e00a      	b.n	8006e50 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e3a:	f7fc fef7 	bl	8003c2c <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e10c      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e50:	4b55      	ldr	r3, [pc, #340]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1ee      	bne.n	8006e3a <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8101 	beq.w	8007068 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e66:	4b50      	ldr	r3, [pc, #320]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e6e:	2b18      	cmp	r3, #24
 8006e70:	f000 80bc 	beq.w	8006fec <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	f040 809d 	bne.w	8006fb8 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e7e:	4b4a      	ldr	r3, [pc, #296]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a49      	ldr	r2, [pc, #292]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8a:	f7fc fecf 	bl	8003c2c <HAL_GetTick>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e90:	e008      	b.n	8006ea4 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e92:	f7fc fecb 	bl	8003c2c <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e0e2      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ea4:	4b40      	ldr	r3, [pc, #256]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1f0      	bne.n	8006e92 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eb0:	4b3d      	ldr	r3, [pc, #244]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eb4:	4b3e      	ldr	r3, [pc, #248]	; (8006fb0 <HAL_RCC_OscConfig+0x754>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ec0:	0112      	lsls	r2, r2, #4
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	4938      	ldr	r1, [pc, #224]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	628b      	str	r3, [r1, #40]	; 0x28
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	025b      	lsls	r3, r3, #9
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	041b      	lsls	r3, r3, #16
 8006ee8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	061b      	lsls	r3, r3, #24
 8006ef6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006efa:	492b      	ldr	r1, [pc, #172]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f00:	4b29      	ldr	r3, [pc, #164]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	4a28      	ldr	r2, [pc, #160]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f06:	f023 0301 	bic.w	r3, r3, #1
 8006f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f0c:	4b26      	ldr	r3, [pc, #152]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f10:	4b28      	ldr	r3, [pc, #160]	; (8006fb4 <HAL_RCC_OscConfig+0x758>)
 8006f12:	4013      	ands	r3, r2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f18:	00d2      	lsls	r2, r2, #3
 8006f1a:	4923      	ldr	r1, [pc, #140]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f20:	4b21      	ldr	r3, [pc, #132]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	f023 020c 	bic.w	r2, r3, #12
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	491e      	ldr	r1, [pc, #120]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f32:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	f023 0202 	bic.w	r2, r3, #2
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3e:	491a      	ldr	r1, [pc, #104]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f44:	4b18      	ldr	r3, [pc, #96]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	4a17      	ldr	r2, [pc, #92]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f50:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	4a14      	ldr	r2, [pc, #80]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f5c:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	4a11      	ldr	r2, [pc, #68]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006f68:	4b0f      	ldr	r3, [pc, #60]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	4a0e      	ldr	r2, [pc, #56]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f6e:	f043 0301 	orr.w	r3, r3, #1
 8006f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a0b      	ldr	r2, [pc, #44]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f80:	f7fc fe54 	bl	8003c2c <HAL_GetTick>
 8006f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f88:	f7fc fe50 	bl	8003c2c <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e067      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f9a:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <HAL_RCC_OscConfig+0x74c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f0      	beq.n	8006f88 <HAL_RCC_OscConfig+0x72c>
 8006fa6:	e05f      	b.n	8007068 <HAL_RCC_OscConfig+0x80c>
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	58024800 	.word	0x58024800
 8006fb0:	fffffc0c 	.word	0xfffffc0c
 8006fb4:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fb8:	4b2e      	ldr	r3, [pc, #184]	; (8007074 <HAL_RCC_OscConfig+0x818>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2d      	ldr	r2, [pc, #180]	; (8007074 <HAL_RCC_OscConfig+0x818>)
 8006fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc4:	f7fc fe32 	bl	8003c2c <HAL_GetTick>
 8006fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fcc:	f7fc fe2e 	bl	8003c2c <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e045      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fde:	4b25      	ldr	r3, [pc, #148]	; (8007074 <HAL_RCC_OscConfig+0x818>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1f0      	bne.n	8006fcc <HAL_RCC_OscConfig+0x770>
 8006fea:	e03d      	b.n	8007068 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006fec:	4b21      	ldr	r3, [pc, #132]	; (8007074 <HAL_RCC_OscConfig+0x818>)
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ff2:	4b20      	ldr	r3, [pc, #128]	; (8007074 <HAL_RCC_OscConfig+0x818>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d031      	beq.n	8007064 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f003 0203 	and.w	r2, r3, #3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800700a:	429a      	cmp	r2, r3
 800700c:	d12a      	bne.n	8007064 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	091b      	lsrs	r3, r3, #4
 8007012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701a:	429a      	cmp	r2, r3
 800701c:	d122      	bne.n	8007064 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800702a:	429a      	cmp	r2, r3
 800702c:	d11a      	bne.n	8007064 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	0a5b      	lsrs	r3, r3, #9
 8007032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800703c:	429a      	cmp	r2, r3
 800703e:	d111      	bne.n	8007064 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800704e:	429a      	cmp	r2, r3
 8007050:	d108      	bne.n	8007064 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	0e1b      	lsrs	r3, r3, #24
 8007056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007060:	429a      	cmp	r2, r3
 8007062:	d001      	beq.n	8007068 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3730      	adds	r7, #48	; 0x30
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	58024400 	.word	0x58024400

08007078 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e19c      	b.n	80073c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800708c:	4b8a      	ldr	r3, [pc, #552]	; (80072b8 <HAL_RCC_ClockConfig+0x240>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d910      	bls.n	80070bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800709a:	4b87      	ldr	r3, [pc, #540]	; (80072b8 <HAL_RCC_ClockConfig+0x240>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 020f 	bic.w	r2, r3, #15
 80070a2:	4985      	ldr	r1, [pc, #532]	; (80072b8 <HAL_RCC_ClockConfig+0x240>)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070aa:	4b83      	ldr	r3, [pc, #524]	; (80072b8 <HAL_RCC_ClockConfig+0x240>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d001      	beq.n	80070bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e184      	b.n	80073c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d010      	beq.n	80070ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	4b7b      	ldr	r3, [pc, #492]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d908      	bls.n	80070ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070d8:	4b78      	ldr	r3, [pc, #480]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	4975      	ldr	r1, [pc, #468]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d010      	beq.n	8007118 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695a      	ldr	r2, [r3, #20]
 80070fa:	4b70      	ldr	r3, [pc, #448]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007102:	429a      	cmp	r2, r3
 8007104:	d908      	bls.n	8007118 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007106:	4b6d      	ldr	r3, [pc, #436]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	496a      	ldr	r1, [pc, #424]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007114:	4313      	orrs	r3, r2
 8007116:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0310 	and.w	r3, r3, #16
 8007120:	2b00      	cmp	r3, #0
 8007122:	d010      	beq.n	8007146 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	4b64      	ldr	r3, [pc, #400]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007130:	429a      	cmp	r2, r3
 8007132:	d908      	bls.n	8007146 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007134:	4b61      	ldr	r3, [pc, #388]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	495e      	ldr	r1, [pc, #376]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007142:	4313      	orrs	r3, r2
 8007144:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d010      	beq.n	8007174 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69da      	ldr	r2, [r3, #28]
 8007156:	4b59      	ldr	r3, [pc, #356]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800715e:	429a      	cmp	r2, r3
 8007160:	d908      	bls.n	8007174 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007162:	4b56      	ldr	r3, [pc, #344]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	4953      	ldr	r1, [pc, #332]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007170:	4313      	orrs	r3, r2
 8007172:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d010      	beq.n	80071a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	4b4d      	ldr	r3, [pc, #308]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	429a      	cmp	r2, r3
 800718e:	d908      	bls.n	80071a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007190:	4b4a      	ldr	r3, [pc, #296]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f023 020f 	bic.w	r2, r3, #15
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4947      	ldr	r1, [pc, #284]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d055      	beq.n	800725a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80071ae:	4b43      	ldr	r3, [pc, #268]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	4940      	ldr	r1, [pc, #256]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d107      	bne.n	80071d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071c8:	4b3c      	ldr	r3, [pc, #240]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d121      	bne.n	8007218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e0f6      	b.n	80073c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d107      	bne.n	80071f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071e0:	4b36      	ldr	r3, [pc, #216]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d115      	bne.n	8007218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0ea      	b.n	80073c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d107      	bne.n	8007208 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071f8:	4b30      	ldr	r3, [pc, #192]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007200:	2b00      	cmp	r3, #0
 8007202:	d109      	bne.n	8007218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e0de      	b.n	80073c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007208:	4b2c      	ldr	r3, [pc, #176]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e0d6      	b.n	80073c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007218:	4b28      	ldr	r3, [pc, #160]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f023 0207 	bic.w	r2, r3, #7
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	4925      	ldr	r1, [pc, #148]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007226:	4313      	orrs	r3, r2
 8007228:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800722a:	f7fc fcff 	bl	8003c2c <HAL_GetTick>
 800722e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007230:	e00a      	b.n	8007248 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007232:	f7fc fcfb 	bl	8003c2c <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007240:	4293      	cmp	r3, r2
 8007242:	d901      	bls.n	8007248 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e0be      	b.n	80073c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007248:	4b1c      	ldr	r3, [pc, #112]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	429a      	cmp	r2, r3
 8007258:	d1eb      	bne.n	8007232 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d010      	beq.n	8007288 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	4b14      	ldr	r3, [pc, #80]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 030f 	and.w	r3, r3, #15
 8007272:	429a      	cmp	r2, r3
 8007274:	d208      	bcs.n	8007288 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007276:	4b11      	ldr	r3, [pc, #68]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f023 020f 	bic.w	r2, r3, #15
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	490e      	ldr	r1, [pc, #56]	; (80072bc <HAL_RCC_ClockConfig+0x244>)
 8007284:	4313      	orrs	r3, r2
 8007286:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_RCC_ClockConfig+0x240>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d214      	bcs.n	80072c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <HAL_RCC_ClockConfig+0x240>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f023 020f 	bic.w	r2, r3, #15
 800729e:	4906      	ldr	r1, [pc, #24]	; (80072b8 <HAL_RCC_ClockConfig+0x240>)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a6:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <HAL_RCC_ClockConfig+0x240>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d005      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e086      	b.n	80073c6 <HAL_RCC_ClockConfig+0x34e>
 80072b8:	52002000 	.word	0x52002000
 80072bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d010      	beq.n	80072ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	4b3f      	ldr	r3, [pc, #252]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072d8:	429a      	cmp	r2, r3
 80072da:	d208      	bcs.n	80072ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072dc:	4b3c      	ldr	r3, [pc, #240]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	4939      	ldr	r1, [pc, #228]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0308 	and.w	r3, r3, #8
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d010      	beq.n	800731c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695a      	ldr	r2, [r3, #20]
 80072fe:	4b34      	ldr	r3, [pc, #208]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007306:	429a      	cmp	r2, r3
 8007308:	d208      	bcs.n	800731c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800730a:	4b31      	ldr	r3, [pc, #196]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	492e      	ldr	r1, [pc, #184]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 8007318:	4313      	orrs	r3, r2
 800731a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	d010      	beq.n	800734a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699a      	ldr	r2, [r3, #24]
 800732c:	4b28      	ldr	r3, [pc, #160]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007334:	429a      	cmp	r2, r3
 8007336:	d208      	bcs.n	800734a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	4922      	ldr	r1, [pc, #136]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 8007346:	4313      	orrs	r3, r2
 8007348:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d010      	beq.n	8007378 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69da      	ldr	r2, [r3, #28]
 800735a:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007362:	429a      	cmp	r2, r3
 8007364:	d208      	bcs.n	8007378 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007366:	4b1a      	ldr	r3, [pc, #104]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	4917      	ldr	r1, [pc, #92]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 8007374:	4313      	orrs	r3, r2
 8007376:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007378:	f000 f834 	bl	80073e4 <HAL_RCC_GetSysClockFreq>
 800737c:	4602      	mov	r2, r0
 800737e:	4b14      	ldr	r3, [pc, #80]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	4912      	ldr	r1, [pc, #72]	; (80073d4 <HAL_RCC_ClockConfig+0x35c>)
 800738a:	5ccb      	ldrb	r3, [r1, r3]
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	fa22 f303 	lsr.w	r3, r2, r3
 8007394:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007396:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <HAL_RCC_ClockConfig+0x358>)
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	4a0d      	ldr	r2, [pc, #52]	; (80073d4 <HAL_RCC_ClockConfig+0x35c>)
 80073a0:	5cd3      	ldrb	r3, [r2, r3]
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ac:	4a0a      	ldr	r2, [pc, #40]	; (80073d8 <HAL_RCC_ClockConfig+0x360>)
 80073ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073b0:	4a0a      	ldr	r2, [pc, #40]	; (80073dc <HAL_RCC_ClockConfig+0x364>)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80073b6:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <HAL_RCC_ClockConfig+0x368>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fc fbec 	bl	8003b98 <HAL_InitTick>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	58024400 	.word	0x58024400
 80073d4:	08011ee4 	.word	0x08011ee4
 80073d8:	240038a8 	.word	0x240038a8
 80073dc:	240038a4 	.word	0x240038a4
 80073e0:	240038b0 	.word	0x240038b0

080073e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b089      	sub	sp, #36	; 0x24
 80073e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073ea:	4bb3      	ldr	r3, [pc, #716]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073f2:	2b18      	cmp	r3, #24
 80073f4:	f200 8155 	bhi.w	80076a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <HAL_RCC_GetSysClockFreq+0x1c>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007465 	.word	0x08007465
 8007404:	080076a3 	.word	0x080076a3
 8007408:	080076a3 	.word	0x080076a3
 800740c:	080076a3 	.word	0x080076a3
 8007410:	080076a3 	.word	0x080076a3
 8007414:	080076a3 	.word	0x080076a3
 8007418:	080076a3 	.word	0x080076a3
 800741c:	080076a3 	.word	0x080076a3
 8007420:	0800748b 	.word	0x0800748b
 8007424:	080076a3 	.word	0x080076a3
 8007428:	080076a3 	.word	0x080076a3
 800742c:	080076a3 	.word	0x080076a3
 8007430:	080076a3 	.word	0x080076a3
 8007434:	080076a3 	.word	0x080076a3
 8007438:	080076a3 	.word	0x080076a3
 800743c:	080076a3 	.word	0x080076a3
 8007440:	08007491 	.word	0x08007491
 8007444:	080076a3 	.word	0x080076a3
 8007448:	080076a3 	.word	0x080076a3
 800744c:	080076a3 	.word	0x080076a3
 8007450:	080076a3 	.word	0x080076a3
 8007454:	080076a3 	.word	0x080076a3
 8007458:	080076a3 	.word	0x080076a3
 800745c:	080076a3 	.word	0x080076a3
 8007460:	08007497 	.word	0x08007497
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007464:	4b94      	ldr	r3, [pc, #592]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007470:	4b91      	ldr	r3, [pc, #580]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	08db      	lsrs	r3, r3, #3
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	4a90      	ldr	r2, [pc, #576]	; (80076bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007482:	e111      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007484:	4b8d      	ldr	r3, [pc, #564]	; (80076bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007486:	61bb      	str	r3, [r7, #24]
    break;
 8007488:	e10e      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800748a:	4b8d      	ldr	r3, [pc, #564]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800748c:	61bb      	str	r3, [r7, #24]
    break;
 800748e:	e10b      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007490:	4b8c      	ldr	r3, [pc, #560]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007492:	61bb      	str	r3, [r7, #24]
    break;
 8007494:	e108      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007496:	4b88      	ldr	r3, [pc, #544]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80074a0:	4b85      	ldr	r3, [pc, #532]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	091b      	lsrs	r3, r3, #4
 80074a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80074ac:	4b82      	ldr	r3, [pc, #520]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80074b6:	4b80      	ldr	r3, [pc, #512]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ba:	08db      	lsrs	r3, r3, #3
 80074bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	fb02 f303 	mul.w	r3, r2, r3
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 80e1 	beq.w	800769c <HAL_RCC_GetSysClockFreq+0x2b8>
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	f000 8083 	beq.w	80075e8 <HAL_RCC_GetSysClockFreq+0x204>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	f200 80a1 	bhi.w	800762c <HAL_RCC_GetSysClockFreq+0x248>
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <HAL_RCC_GetSysClockFreq+0x114>
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d056      	beq.n	80075a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80074f6:	e099      	b.n	800762c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074f8:	4b6f      	ldr	r3, [pc, #444]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d02d      	beq.n	8007560 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007504:	4b6c      	ldr	r3, [pc, #432]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	08db      	lsrs	r3, r3, #3
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	4a6b      	ldr	r2, [pc, #428]	; (80076bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007510:	fa22 f303 	lsr.w	r3, r2, r3
 8007514:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	ee07 3a90 	vmov	s15, r3
 800751c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800752e:	4b62      	ldr	r3, [pc, #392]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800753e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007542:	eddf 5a61 	vldr	s11, [pc, #388]	; 80076c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800754e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800755e:	e087      	b.n	8007670 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80076cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800756e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007572:	4b51      	ldr	r3, [pc, #324]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007582:	ed97 6a02 	vldr	s12, [r7, #8]
 8007586:	eddf 5a50 	vldr	s11, [pc, #320]	; 80076c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800758a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075a2:	e065      	b.n	8007670 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80076d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b6:	4b40      	ldr	r3, [pc, #256]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80076c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075e6:	e043      	b.n	8007670 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80076d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80075f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fa:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760a:	ed97 6a02 	vldr	s12, [r7, #8]
 800760e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80076c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800761e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800762a:	e021      	b.n	8007670 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eddf 6a26 	vldr	s13, [pc, #152]	; 80076d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800763a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763e:	4b1e      	ldr	r3, [pc, #120]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007652:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80076c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800766e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007670:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007674:	0a5b      	lsrs	r3, r3, #9
 8007676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767a:	3301      	adds	r3, #1
 800767c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	ee07 3a90 	vmov	s15, r3
 8007684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007688:	edd7 6a07 	vldr	s13, [r7, #28]
 800768c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007694:	ee17 3a90 	vmov	r3, s15
 8007698:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800769a:	e005      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	61bb      	str	r3, [r7, #24]
    break;
 80076a0:	e002      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80076a2:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076a4:	61bb      	str	r3, [r7, #24]
    break;
 80076a6:	bf00      	nop
  }

  return sysclockfreq;
 80076a8:	69bb      	ldr	r3, [r7, #24]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3724      	adds	r7, #36	; 0x24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	58024400 	.word	0x58024400
 80076bc:	03d09000 	.word	0x03d09000
 80076c0:	003d0900 	.word	0x003d0900
 80076c4:	017d7840 	.word	0x017d7840
 80076c8:	46000000 	.word	0x46000000
 80076cc:	4c742400 	.word	0x4c742400
 80076d0:	4a742400 	.word	0x4a742400
 80076d4:	4bbebc20 	.word	0x4bbebc20

080076d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80076de:	f7ff fe81 	bl	80073e4 <HAL_RCC_GetSysClockFreq>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b10      	ldr	r3, [pc, #64]	; (8007728 <HAL_RCC_GetHCLKFreq+0x50>)
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	0a1b      	lsrs	r3, r3, #8
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	490f      	ldr	r1, [pc, #60]	; (800772c <HAL_RCC_GetHCLKFreq+0x54>)
 80076f0:	5ccb      	ldrb	r3, [r1, r3]
 80076f2:	f003 031f 	and.w	r3, r3, #31
 80076f6:	fa22 f303 	lsr.w	r3, r2, r3
 80076fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076fc:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <HAL_RCC_GetHCLKFreq+0x50>)
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	4a09      	ldr	r2, [pc, #36]	; (800772c <HAL_RCC_GetHCLKFreq+0x54>)
 8007706:	5cd3      	ldrb	r3, [r2, r3]
 8007708:	f003 031f 	and.w	r3, r3, #31
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	fa22 f303 	lsr.w	r3, r2, r3
 8007712:	4a07      	ldr	r2, [pc, #28]	; (8007730 <HAL_RCC_GetHCLKFreq+0x58>)
 8007714:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007716:	4a07      	ldr	r2, [pc, #28]	; (8007734 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <HAL_RCC_GetHCLKFreq+0x58>)
 800771e:	681b      	ldr	r3, [r3, #0]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	58024400 	.word	0x58024400
 800772c:	08011ee4 	.word	0x08011ee4
 8007730:	240038a8 	.word	0x240038a8
 8007734:	240038a4 	.word	0x240038a4

08007738 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007740:	2300      	movs	r3, #0
 8007742:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007744:	2300      	movs	r3, #0
 8007746:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d03f      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800775c:	d02a      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800775e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007762:	d824      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007768:	d018      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800776a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800776e:	d81e      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007778:	d007      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800777a:	e018      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777c:	4ba3      	ldr	r3, [pc, #652]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4aa2      	ldr	r2, [pc, #648]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007788:	e015      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3304      	adds	r3, #4
 800778e:	2102      	movs	r1, #2
 8007790:	4618      	mov	r0, r3
 8007792:	f001 fdd7 	bl	8009344 <RCCEx_PLL2_Config>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800779a:	e00c      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3324      	adds	r3, #36	; 0x24
 80077a0:	2102      	movs	r1, #2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 fe80 	bl	80094a8 <RCCEx_PLL3_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077ac:	e003      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
      break;
 80077b2:	e000      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80077b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d109      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80077bc:	4b93      	ldr	r3, [pc, #588]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c8:	4990      	ldr	r1, [pc, #576]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	650b      	str	r3, [r1, #80]	; 0x50
 80077ce:	e001      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d03d      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d826      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007805 	.word	0x08007805
 80077f4:	08007813 	.word	0x08007813
 80077f8:	08007825 	.word	0x08007825
 80077fc:	0800783d 	.word	0x0800783d
 8007800:	0800783d 	.word	0x0800783d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007804:	4b81      	ldr	r3, [pc, #516]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	4a80      	ldr	r2, [pc, #512]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800780a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800780e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007810:	e015      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3304      	adds	r3, #4
 8007816:	2100      	movs	r1, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f001 fd93 	bl	8009344 <RCCEx_PLL2_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007822:	e00c      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3324      	adds	r3, #36	; 0x24
 8007828:	2100      	movs	r1, #0
 800782a:	4618      	mov	r0, r3
 800782c:	f001 fe3c 	bl	80094a8 <RCCEx_PLL3_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007834:	e003      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	75fb      	strb	r3, [r7, #23]
      break;
 800783a:	e000      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800783c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007844:	4b71      	ldr	r3, [pc, #452]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007848:	f023 0207 	bic.w	r2, r3, #7
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007850:	496e      	ldr	r1, [pc, #440]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007852:	4313      	orrs	r3, r2
 8007854:	650b      	str	r3, [r1, #80]	; 0x50
 8007856:	e001      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007864:	2b00      	cmp	r3, #0
 8007866:	d042      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007870:	d02b      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007876:	d825      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007878:	2bc0      	cmp	r3, #192	; 0xc0
 800787a:	d028      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800787c:	2bc0      	cmp	r3, #192	; 0xc0
 800787e:	d821      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007880:	2b80      	cmp	r3, #128	; 0x80
 8007882:	d016      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d81d      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d007      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007890:	e018      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007892:	4b5e      	ldr	r3, [pc, #376]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	4a5d      	ldr	r2, [pc, #372]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800789c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800789e:	e017      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3304      	adds	r3, #4
 80078a4:	2100      	movs	r1, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 fd4c 	bl	8009344 <RCCEx_PLL2_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078b0:	e00e      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3324      	adds	r3, #36	; 0x24
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fdf5 	bl	80094a8 <RCCEx_PLL3_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078c2:	e005      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	75fb      	strb	r3, [r7, #23]
      break;
 80078c8:	e002      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80078ca:	bf00      	nop
 80078cc:	e000      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80078ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078d6:	4b4d      	ldr	r3, [pc, #308]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e2:	494a      	ldr	r1, [pc, #296]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	650b      	str	r3, [r1, #80]	; 0x50
 80078e8:	e001      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d049      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007904:	d030      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007906:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800790a:	d82a      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800790c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007910:	d02c      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007912:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007916:	d824      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800791c:	d018      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800791e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007922:	d81e      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800792c:	d007      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800792e:	e018      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007930:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	4a35      	ldr	r2, [pc, #212]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800793a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800793c:	e017      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3304      	adds	r3, #4
 8007942:	2100      	movs	r1, #0
 8007944:	4618      	mov	r0, r3
 8007946:	f001 fcfd 	bl	8009344 <RCCEx_PLL2_Config>
 800794a:	4603      	mov	r3, r0
 800794c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800794e:	e00e      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3324      	adds	r3, #36	; 0x24
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fda6 	bl	80094a8 <RCCEx_PLL3_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007960:	e005      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
      break;
 8007966:	e002      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007968:	bf00      	nop
 800796a:	e000      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800796c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007974:	4b25      	ldr	r3, [pc, #148]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007978:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007982:	4922      	ldr	r1, [pc, #136]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007984:	4313      	orrs	r3, r2
 8007986:	658b      	str	r3, [r1, #88]	; 0x58
 8007988:	e001      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007996:	2b00      	cmp	r3, #0
 8007998:	d04b      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079a4:	d030      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80079a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079aa:	d82a      	bhi.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079b0:	d02e      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80079b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079b6:	d824      	bhi.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079bc:	d018      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80079be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079c2:	d81e      	bhi.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d003      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80079c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079cc:	d007      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80079ce:	e018      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d0:	4b0e      	ldr	r3, [pc, #56]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	4a0d      	ldr	r2, [pc, #52]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079dc:	e019      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3304      	adds	r3, #4
 80079e2:	2100      	movs	r1, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 fcad 	bl	8009344 <RCCEx_PLL2_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80079ee:	e010      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3324      	adds	r3, #36	; 0x24
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 fd56 	bl	80094a8 <RCCEx_PLL3_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a00:	e007      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
      break;
 8007a06:	e004      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007a08:	bf00      	nop
 8007a0a:	e002      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007a0c:	58024400 	.word	0x58024400
      break;
 8007a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a18:	4b99      	ldr	r3, [pc, #612]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a26:	4996      	ldr	r1, [pc, #600]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	658b      	str	r3, [r1, #88]	; 0x58
 8007a2c:	e001      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d032      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a42:	2b30      	cmp	r3, #48	; 0x30
 8007a44:	d01c      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007a46:	2b30      	cmp	r3, #48	; 0x30
 8007a48:	d817      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d00c      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	d813      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d016      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007a56:	2b10      	cmp	r3, #16
 8007a58:	d10f      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5a:	4b89      	ldr	r3, [pc, #548]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5e:	4a88      	ldr	r2, [pc, #544]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a66:	e00e      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	2102      	movs	r1, #2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f001 fc68 	bl	8009344 <RCCEx_PLL2_Config>
 8007a74:	4603      	mov	r3, r0
 8007a76:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a78:	e005      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a7e:	e002      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007a80:	bf00      	nop
 8007a82:	e000      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a8c:	4b7c      	ldr	r3, [pc, #496]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a98:	4979      	ldr	r1, [pc, #484]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a9e:	e001      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d047      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab8:	d030      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007abe:	d82a      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007ac0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ac4:	d02c      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007ac6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aca:	d824      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ad0:	d018      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ad6:	d81e      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae0:	d007      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007ae2:	e018      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae4:	4b66      	ldr	r3, [pc, #408]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	4a65      	ldr	r2, [pc, #404]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007af0:	e017      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3304      	adds	r3, #4
 8007af6:	2100      	movs	r1, #0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 fc23 	bl	8009344 <RCCEx_PLL2_Config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b02:	e00e      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3324      	adds	r3, #36	; 0x24
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 fccc 	bl	80094a8 <RCCEx_PLL3_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b14:	e005      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1a:	e002      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007b28:	4b55      	ldr	r3, [pc, #340]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b34:	4952      	ldr	r1, [pc, #328]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	650b      	str	r3, [r1, #80]	; 0x50
 8007b3a:	e001      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d049      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b54:	d02e      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b5a:	d828      	bhi.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b60:	d02a      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b66:	d822      	bhi.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b6c:	d026      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007b6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b72:	d81c      	bhi.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b78:	d010      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b7e:	d816      	bhi.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01d      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b88:	d111      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 fbd7 	bl	8009344 <RCCEx_PLL2_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b9a:	e012      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3324      	adds	r3, #36	; 0x24
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 fc80 	bl	80094a8 <RCCEx_PLL3_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007bac:	e009      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb2:	e006      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e004      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bb8:	bf00      	nop
 8007bba:	e002      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bbc:	bf00      	nop
 8007bbe:	e000      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d109      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007bc8:	4b2d      	ldr	r3, [pc, #180]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bcc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd4:	492a      	ldr	r1, [pc, #168]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8007bda:	e001      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d04d      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bf6:	d02e      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bfc:	d828      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c02:	d02a      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c08:	d822      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c0e:	d026      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007c10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c14:	d81c      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c1a:	d010      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c20:	d816      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d01d      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c2a:	d111      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	2101      	movs	r1, #1
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fb86 	bl	8009344 <RCCEx_PLL2_Config>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c3c:	e012      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3324      	adds	r3, #36	; 0x24
 8007c42:	2101      	movs	r1, #1
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 fc2f 	bl	80094a8 <RCCEx_PLL3_Config>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c4e:	e009      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	75fb      	strb	r3, [r7, #23]
      break;
 8007c54:	e006      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c56:	bf00      	nop
 8007c58:	e004      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e002      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c5e:	bf00      	nop
 8007c60:	e000      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10c      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c6a:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c78:	4901      	ldr	r1, [pc, #4]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c7e:	e003      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d02f      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9c:	d00e      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca2:	d814      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d015      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cac:	d10f      	bne.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cae:	4baf      	ldr	r3, [pc, #700]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	4aae      	ldr	r2, [pc, #696]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007cba:	e00c      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 fb3e 	bl	8009344 <RCCEx_PLL2_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ccc:	e003      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd2:	e000      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d109      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cdc:	4ba3      	ldr	r3, [pc, #652]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce8:	49a0      	ldr	r1, [pc, #640]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	650b      	str	r3, [r1, #80]	; 0x50
 8007cee:	e001      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d032      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d81b      	bhi.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007d08:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d47 	.word	0x08007d47
 8007d14:	08007d21 	.word	0x08007d21
 8007d18:	08007d2f 	.word	0x08007d2f
 8007d1c:	08007d47 	.word	0x08007d47
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d20:	4b92      	ldr	r3, [pc, #584]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	4a91      	ldr	r2, [pc, #580]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d2c:	e00c      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3304      	adds	r3, #4
 8007d32:	2102      	movs	r1, #2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 fb05 	bl	8009344 <RCCEx_PLL2_Config>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d3e:	e003      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
      break;
 8007d44:	e000      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007d4e:	4b87      	ldr	r3, [pc, #540]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d52:	f023 0203 	bic.w	r2, r3, #3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	4984      	ldr	r1, [pc, #528]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d60:	e001      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 8086 	beq.w	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d74:	4b7e      	ldr	r3, [pc, #504]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a7d      	ldr	r2, [pc, #500]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d80:	f7fb ff54 	bl	8003c2c <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d86:	e009      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d88:	f7fb ff50 	bl	8003c2c <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b64      	cmp	r3, #100	; 0x64
 8007d94:	d902      	bls.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	75fb      	strb	r3, [r7, #23]
        break;
 8007d9a:	e005      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d9c:	4b74      	ldr	r3, [pc, #464]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0ef      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d166      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007dae:	4b6f      	ldr	r3, [pc, #444]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007db8:	4053      	eors	r3, r2
 8007dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d013      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007dc2:	4b6a      	ldr	r3, [pc, #424]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007dcc:	4b67      	ldr	r3, [pc, #412]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd0:	4a66      	ldr	r2, [pc, #408]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dd6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007dd8:	4b64      	ldr	r3, [pc, #400]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ddc:	4a63      	ldr	r2, [pc, #396]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007de2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007de4:	4a61      	ldr	r2, [pc, #388]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df4:	d115      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df6:	f7fb ff19 	bl	8003c2c <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dfc:	e00b      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dfe:	f7fb ff15 	bl	8003c2c <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d902      	bls.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	75fb      	strb	r3, [r7, #23]
            break;
 8007e14:	e005      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e16:	4b55      	ldr	r3, [pc, #340]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0ed      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d126      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e36:	d10d      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007e38:	4b4c      	ldr	r3, [pc, #304]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e46:	0919      	lsrs	r1, r3, #4
 8007e48:	4b4a      	ldr	r3, [pc, #296]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007e4a:	400b      	ands	r3, r1
 8007e4c:	4947      	ldr	r1, [pc, #284]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	610b      	str	r3, [r1, #16]
 8007e52:	e005      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007e54:	4b45      	ldr	r3, [pc, #276]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	4a44      	ldr	r2, [pc, #272]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e5e:	6113      	str	r3, [r2, #16]
 8007e60:	4b42      	ldr	r3, [pc, #264]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e6e:	493f      	ldr	r1, [pc, #252]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	670b      	str	r3, [r1, #112]	; 0x70
 8007e74:	e004      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	75bb      	strb	r3, [r7, #22]
 8007e7a:	e001      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 8085 	beq.w	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e92:	2b28      	cmp	r3, #40	; 0x28
 8007e94:	d866      	bhi.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007e96:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9c:	08007f79 	.word	0x08007f79
 8007ea0:	08007f65 	.word	0x08007f65
 8007ea4:	08007f65 	.word	0x08007f65
 8007ea8:	08007f65 	.word	0x08007f65
 8007eac:	08007f65 	.word	0x08007f65
 8007eb0:	08007f65 	.word	0x08007f65
 8007eb4:	08007f65 	.word	0x08007f65
 8007eb8:	08007f65 	.word	0x08007f65
 8007ebc:	08007f41 	.word	0x08007f41
 8007ec0:	08007f65 	.word	0x08007f65
 8007ec4:	08007f65 	.word	0x08007f65
 8007ec8:	08007f65 	.word	0x08007f65
 8007ecc:	08007f65 	.word	0x08007f65
 8007ed0:	08007f65 	.word	0x08007f65
 8007ed4:	08007f65 	.word	0x08007f65
 8007ed8:	08007f65 	.word	0x08007f65
 8007edc:	08007f53 	.word	0x08007f53
 8007ee0:	08007f65 	.word	0x08007f65
 8007ee4:	08007f65 	.word	0x08007f65
 8007ee8:	08007f65 	.word	0x08007f65
 8007eec:	08007f65 	.word	0x08007f65
 8007ef0:	08007f65 	.word	0x08007f65
 8007ef4:	08007f65 	.word	0x08007f65
 8007ef8:	08007f65 	.word	0x08007f65
 8007efc:	08007f79 	.word	0x08007f79
 8007f00:	08007f65 	.word	0x08007f65
 8007f04:	08007f65 	.word	0x08007f65
 8007f08:	08007f65 	.word	0x08007f65
 8007f0c:	08007f65 	.word	0x08007f65
 8007f10:	08007f65 	.word	0x08007f65
 8007f14:	08007f65 	.word	0x08007f65
 8007f18:	08007f65 	.word	0x08007f65
 8007f1c:	08007f79 	.word	0x08007f79
 8007f20:	08007f65 	.word	0x08007f65
 8007f24:	08007f65 	.word	0x08007f65
 8007f28:	08007f65 	.word	0x08007f65
 8007f2c:	08007f65 	.word	0x08007f65
 8007f30:	08007f65 	.word	0x08007f65
 8007f34:	08007f65 	.word	0x08007f65
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f79 	.word	0x08007f79
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3304      	adds	r3, #4
 8007f44:	2101      	movs	r1, #1
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 f9fc 	bl	8009344 <RCCEx_PLL2_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f50:	e013      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3324      	adds	r3, #36	; 0x24
 8007f56:	2101      	movs	r1, #1
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f001 faa5 	bl	80094a8 <RCCEx_PLL3_Config>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f62:	e00a      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	75fb      	strb	r3, [r7, #23]
      break;
 8007f68:	e007      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007f6a:	bf00      	nop
 8007f6c:	58024400 	.word	0x58024400
 8007f70:	58024800 	.word	0x58024800
 8007f74:	00ffffcf 	.word	0x00ffffcf
      break;
 8007f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d109      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f80:	4b96      	ldr	r3, [pc, #600]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f84:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f8c:	4993      	ldr	r1, [pc, #588]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	654b      	str	r3, [r1, #84]	; 0x54
 8007f92:	e001      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d038      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	d821      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007ff7 	.word	0x08007ff7
 8007fb8:	08007fcd 	.word	0x08007fcd
 8007fbc:	08007fdf 	.word	0x08007fdf
 8007fc0:	08007ff7 	.word	0x08007ff7
 8007fc4:	08007ff7 	.word	0x08007ff7
 8007fc8:	08007ff7 	.word	0x08007ff7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 f9b6 	bl	8009344 <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007fdc:	e00c      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3324      	adds	r3, #36	; 0x24
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 fa5f 	bl	80094a8 <RCCEx_PLL3_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007fee:	e003      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff4:	e000      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d109      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ffe:	4b77      	ldr	r3, [pc, #476]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008002:	f023 0207 	bic.w	r2, r3, #7
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800800a:	4974      	ldr	r1, [pc, #464]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800800c:	4313      	orrs	r3, r2
 800800e:	654b      	str	r3, [r1, #84]	; 0x54
 8008010:	e001      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d03a      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008028:	2b05      	cmp	r3, #5
 800802a:	d821      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800802c:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800802e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008032:	bf00      	nop
 8008034:	08008077 	.word	0x08008077
 8008038:	0800804d 	.word	0x0800804d
 800803c:	0800805f 	.word	0x0800805f
 8008040:	08008077 	.word	0x08008077
 8008044:	08008077 	.word	0x08008077
 8008048:	08008077 	.word	0x08008077
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	2101      	movs	r1, #1
 8008052:	4618      	mov	r0, r3
 8008054:	f001 f976 	bl	8009344 <RCCEx_PLL2_Config>
 8008058:	4603      	mov	r3, r0
 800805a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800805c:	e00c      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3324      	adds	r3, #36	; 0x24
 8008062:	2101      	movs	r1, #1
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fa1f 	bl	80094a8 <RCCEx_PLL3_Config>
 800806a:	4603      	mov	r3, r0
 800806c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800806e:	e003      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	75fb      	strb	r3, [r7, #23]
      break;
 8008074:	e000      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800807e:	4b57      	ldr	r3, [pc, #348]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008082:	f023 0207 	bic.w	r2, r3, #7
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808c:	4953      	ldr	r1, [pc, #332]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800808e:	4313      	orrs	r3, r2
 8008090:	658b      	str	r3, [r1, #88]	; 0x58
 8008092:	e001      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d04b      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080ae:	d02e      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80080b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080b4:	d828      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ba:	d02a      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80080bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c0:	d822      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080c6:	d026      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80080c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080cc:	d81c      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d2:	d010      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80080d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d8:	d816      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d01d      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80080de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080e2:	d111      	bne.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3304      	adds	r3, #4
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 f92a 	bl	8009344 <RCCEx_PLL2_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080f4:	e012      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3324      	adds	r3, #36	; 0x24
 80080fa:	2102      	movs	r1, #2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f001 f9d3 	bl	80094a8 <RCCEx_PLL3_Config>
 8008102:	4603      	mov	r3, r0
 8008104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008106:	e009      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	75fb      	strb	r3, [r7, #23]
      break;
 800810c:	e006      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800810e:	bf00      	nop
 8008110:	e004      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008112:	bf00      	nop
 8008114:	e002      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800811a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008122:	4b2e      	ldr	r3, [pc, #184]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008130:	492a      	ldr	r1, [pc, #168]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008132:	4313      	orrs	r3, r2
 8008134:	654b      	str	r3, [r1, #84]	; 0x54
 8008136:	e001      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d04d      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800814e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008152:	d02e      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008154:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008158:	d828      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800815a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815e:	d02a      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008164:	d822      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800816a:	d026      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800816c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008170:	d81c      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008176:	d010      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800817c:	d816      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01d      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008186:	d111      	bne.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f001 f8d8 	bl	8009344 <RCCEx_PLL2_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008198:	e012      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3324      	adds	r3, #36	; 0x24
 800819e:	2102      	movs	r1, #2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 f981 	bl	80094a8 <RCCEx_PLL3_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80081aa:	e009      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
      break;
 80081b0:	e006      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081b2:	bf00      	nop
 80081b4:	e004      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081b6:	bf00      	nop
 80081b8:	e002      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081ba:	bf00      	nop
 80081bc:	e000      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10c      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081d4:	4901      	ldr	r1, [pc, #4]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	658b      	str	r3, [r1, #88]	; 0x58
 80081da:	e003      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80081dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d04b      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081fa:	d02e      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80081fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008200:	d828      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008206:	d02a      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820c:	d822      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800820e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008212:	d026      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008214:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008218:	d81c      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800821a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800821e:	d010      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008224:	d816      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01d      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800822a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822e:	d111      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3304      	adds	r3, #4
 8008234:	2100      	movs	r1, #0
 8008236:	4618      	mov	r0, r3
 8008238:	f001 f884 	bl	8009344 <RCCEx_PLL2_Config>
 800823c:	4603      	mov	r3, r0
 800823e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008240:	e012      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3324      	adds	r3, #36	; 0x24
 8008246:	2102      	movs	r1, #2
 8008248:	4618      	mov	r0, r3
 800824a:	f001 f92d 	bl	80094a8 <RCCEx_PLL3_Config>
 800824e:	4603      	mov	r3, r0
 8008250:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008252:	e009      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	75fb      	strb	r3, [r7, #23]
      break;
 8008258:	e006      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800825a:	bf00      	nop
 800825c:	e004      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800825e:	bf00      	nop
 8008260:	e002      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008262:	bf00      	nop
 8008264:	e000      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800826e:	4b9d      	ldr	r3, [pc, #628]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800827c:	4999      	ldr	r1, [pc, #612]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800827e:	4313      	orrs	r3, r2
 8008280:	658b      	str	r3, [r1, #88]	; 0x58
 8008282:	e001      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800829a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829e:	d10a      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3324      	adds	r3, #36	; 0x24
 80082a4:	2102      	movs	r1, #2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f001 f8fe 	bl	80094a8 <RCCEx_PLL3_Config>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80082b6:	4b8b      	ldr	r3, [pc, #556]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082c4:	4987      	ldr	r1, [pc, #540]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d01a      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e0:	d10a      	bne.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3324      	adds	r3, #36	; 0x24
 80082e6:	2102      	movs	r1, #2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 f8dd 	bl	80094a8 <RCCEx_PLL3_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082f8:	4b7a      	ldr	r3, [pc, #488]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008306:	4977      	ldr	r1, [pc, #476]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008308:	4313      	orrs	r3, r2
 800830a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d034      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800831e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008322:	d01d      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008328:	d817      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800832e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008332:	d009      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008334:	e011      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3304      	adds	r3, #4
 800833a:	2100      	movs	r1, #0
 800833c:	4618      	mov	r0, r3
 800833e:	f001 f801 	bl	8009344 <RCCEx_PLL2_Config>
 8008342:	4603      	mov	r3, r0
 8008344:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008346:	e00c      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3324      	adds	r3, #36	; 0x24
 800834c:	2102      	movs	r1, #2
 800834e:	4618      	mov	r0, r3
 8008350:	f001 f8aa 	bl	80094a8 <RCCEx_PLL3_Config>
 8008354:	4603      	mov	r3, r0
 8008356:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008358:	e003      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	75fb      	strb	r3, [r7, #23]
      break;
 800835e:	e000      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008368:	4b5e      	ldr	r3, [pc, #376]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800836a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008376:	495b      	ldr	r1, [pc, #364]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008378:	4313      	orrs	r3, r2
 800837a:	658b      	str	r3, [r1, #88]	; 0x58
 800837c:	e001      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837e:	7dfb      	ldrb	r3, [r7, #23]
 8008380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d033      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008394:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008398:	d01c      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800839a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800839e:	d816      	bhi.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80083a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a4:	d003      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80083a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083aa:	d007      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80083ac:	e00f      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ae:	4b4d      	ldr	r3, [pc, #308]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b2:	4a4c      	ldr	r2, [pc, #304]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80083ba:	e00c      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3324      	adds	r3, #36	; 0x24
 80083c0:	2101      	movs	r1, #1
 80083c2:	4618      	mov	r0, r3
 80083c4:	f001 f870 	bl	80094a8 <RCCEx_PLL3_Config>
 80083c8:	4603      	mov	r3, r0
 80083ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80083cc:	e003      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	75fb      	strb	r3, [r7, #23]
      break;
 80083d2:	e000      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80083d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083dc:	4b41      	ldr	r3, [pc, #260]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ea:	493e      	ldr	r1, [pc, #248]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	654b      	str	r3, [r1, #84]	; 0x54
 80083f0:	e001      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d029      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800840a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800840e:	d007      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008410:	e00f      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008412:	4b34      	ldr	r3, [pc, #208]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	4a33      	ldr	r2, [pc, #204]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800841c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800841e:	e00b      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3304      	adds	r3, #4
 8008424:	2102      	movs	r1, #2
 8008426:	4618      	mov	r0, r3
 8008428:	f000 ff8c 	bl	8009344 <RCCEx_PLL2_Config>
 800842c:	4603      	mov	r3, r0
 800842e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008430:	e002      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	75fb      	strb	r3, [r7, #23]
      break;
 8008436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800843e:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008442:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844a:	4926      	ldr	r1, [pc, #152]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800844c:	4313      	orrs	r3, r2
 800844e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008450:	e001      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	3324      	adds	r3, #36	; 0x24
 8008466:	2102      	movs	r1, #2
 8008468:	4618      	mov	r0, r3
 800846a:	f001 f81d 	bl	80094a8 <RCCEx_PLL3_Config>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d033      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800848c:	d017      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800848e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008492:	d811      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008498:	d013      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800849a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800849e:	d80b      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d010      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80084a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a8:	d106      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084aa:	4b0e      	ldr	r3, [pc, #56]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	4a0d      	ldr	r2, [pc, #52]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80084b6:	e007      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	75fb      	strb	r3, [r7, #23]
      break;
 80084bc:	e004      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80084be:	bf00      	nop
 80084c0:	e002      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80084c2:	bf00      	nop
 80084c4:	e000      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80084c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10c      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084ce:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084da:	4902      	ldr	r1, [pc, #8]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	654b      	str	r3, [r1, #84]	; 0x54
 80084e0:	e004      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80084e2:	bf00      	nop
 80084e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d008      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084f8:	4b29      	ldr	r3, [pc, #164]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 80084fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008504:	4926      	ldr	r1, [pc, #152]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 8008506:	4313      	orrs	r3, r2
 8008508:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008516:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008524:	491e      	ldr	r1, [pc, #120]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 8008526:	4313      	orrs	r3, r2
 8008528:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008536:	4b1a      	ldr	r3, [pc, #104]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 8008538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008542:	4917      	ldr	r1, [pc, #92]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 8008544:	4313      	orrs	r3, r2
 8008546:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00d      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008554:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	4a11      	ldr	r2, [pc, #68]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 800855a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800855e:	6113      	str	r3, [r2, #16]
 8008560:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800856a:	490d      	ldr	r1, [pc, #52]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 800856c:	4313      	orrs	r3, r2
 800856e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	da08      	bge.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008578:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 800857a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800857c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008584:	4906      	ldr	r1, [pc, #24]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
 8008586:	4313      	orrs	r3, r2
 8008588:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800858a:	7dbb      	ldrb	r3, [r7, #22]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {
    return HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	e000      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
  }
  return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	58024400 	.word	0x58024400

080085a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b090      	sub	sp, #64	; 0x40
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b2:	d14f      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80085b4:	4b88      	ldr	r3, [pc, #544]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>)
 80085b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d844      	bhi.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80085c4:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	080085e1 	.word	0x080085e1
 80085d0:	080085f1 	.word	0x080085f1
 80085d4:	08008601 	.word	0x08008601
 80085d8:	08008649 	.word	0x08008649
 80085dc:	08008611 	.word	0x08008611
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fd5b 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ee:	e28c      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f0:	f107 0318 	add.w	r3, r7, #24
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 faab 	bl	8008b50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085fe:	e284      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fbf7 	bl	8008df8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800860e:	e27c      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008610:	4b71      	ldr	r3, [pc, #452]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>)
 8008612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008618:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800861a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008620:	4b6e      	ldr	r3, [pc, #440]	; (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8008622:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008624:	e271      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800862c:	d102      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800862e:	4b6c      	ldr	r3, [pc, #432]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>)
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008632:	e26a      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800863a:	d102      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800863c:	4b69      	ldr	r3, [pc, #420]	; (80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>)
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008640:	e263      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
            frequency = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008646:	e260      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008648:	4b67      	ldr	r3, [pc, #412]	; (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>)
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800864c:	e25d      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      default :
        {
          frequency = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008652:	e25a      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800865a:	d159      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800865c:	4b5e      	ldr	r3, [pc, #376]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>)
 800865e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008660:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008664:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800866c:	d02e      	beq.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008674:	d849      	bhi.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	2bc0      	cmp	r3, #192	; 0xc0
 800867a:	d043      	beq.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	2bc0      	cmp	r3, #192	; 0xc0
 8008680:	d843      	bhi.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	2b80      	cmp	r3, #128	; 0x80
 8008686:	d019      	beq.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	2b80      	cmp	r3, #128	; 0x80
 800868c:	d83d      	bhi.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	2b00      	cmp	r3, #0
 8008692:	d003      	beq.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	2b40      	cmp	r3, #64	; 0x40
 8008698:	d008      	beq.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800869a:	e036      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800869c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fcfd 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086aa:	e22e      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ac:	f107 0318 	add.w	r3, r7, #24
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fa4d 	bl	8008b50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ba:	e226      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086bc:	f107 030c 	add.w	r3, r7, #12
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fb99 	bl	8008df8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ca:	e21e      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80086cc:	4b42      	ldr	r3, [pc, #264]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>)
 80086ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80086d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80086dc:	4b3f      	ldr	r3, [pc, #252]	; (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80086e0:	e213      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80086e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e8:	d102      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
            frequency = CSI_VALUE;
 80086ea:	4b3d      	ldr	r3, [pc, #244]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>)
 80086ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ee:	e20c      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f6:	d102      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
            frequency = HSE_VALUE;
 80086f8:	4b3a      	ldr	r3, [pc, #232]	; (80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>)
 80086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086fc:	e205      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
            frequency = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008702:	e202      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008704:	4b38      	ldr	r3, [pc, #224]	; (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>)
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008708:	e1ff      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      default :
        {
          frequency = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800870e:	e1fc      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008716:	d169      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x248>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008718:	4b2f      	ldr	r3, [pc, #188]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>)
 800871a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008720:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008728:	d033      	beq.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008730:	d84e      	bhi.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008738:	d047      	beq.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008740:	d846      	bhi.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008748:	d01b      	beq.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008750:	d83e      	bhi.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	2b00      	cmp	r3, #0
 8008756:	d004      	beq.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800875e:	d008      	beq.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008760:	e036      	b.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fc9a 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008770:	e1cb      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008772:	f107 0318 	add.w	r3, r7, #24
 8008776:	4618      	mov	r0, r3
 8008778:	f000 f9ea 	bl	8008b50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008780:	e1c3      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008782:	f107 030c 	add.w	r3, r7, #12
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fb36 	bl	8008df8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008790:	e1bb      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008792:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>)
 8008794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008796:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800879a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800879c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d102      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80087a2:	4b0e      	ldr	r3, [pc, #56]	; (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80087a6:	e1b0      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80087a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ae:	d102      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
            frequency = CSI_VALUE;
 80087b0:	4b0b      	ldr	r3, [pc, #44]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>)
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087b4:	e1a9      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80087b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087bc:	d102      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
            frequency = HSE_VALUE;
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>)
 80087c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087c2:	e1a2      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
            frequency = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087c8:	e19f      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80087ca:	4b07      	ldr	r3, [pc, #28]	; (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>)
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087ce:	e19c      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      default :
        {
          frequency = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087d4:	e199      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80087d6:	bf00      	nop
 80087d8:	58024400 	.word	0x58024400
 80087dc:	03d09000 	.word	0x03d09000
 80087e0:	003d0900 	.word	0x003d0900
 80087e4:	017d7840 	.word	0x017d7840
 80087e8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087f2:	d15e      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80087f4:	4b96      	ldr	r3, [pc, #600]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80087f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80087fc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008804:	d033      	beq.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800880c:	d84e      	bhi.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008814:	d047      	beq.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800881c:	d846      	bhi.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008824:	d01b      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800882c:	d83e      	bhi.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800883a:	d008      	beq.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800883c:	e036      	b.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800883e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fc2c 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800884c:	e15d      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800884e:	f107 0318 	add.w	r3, r7, #24
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f97c 	bl	8008b50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800885c:	e155      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800885e:	f107 030c 	add.w	r3, r7, #12
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fac8 	bl	8008df8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800886c:	e14d      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800886e:	4b78      	ldr	r3, [pc, #480]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008876:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887a:	2b00      	cmp	r3, #0
 800887c:	d102      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800887e:	4b75      	ldr	r3, [pc, #468]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8008880:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008882:	e142      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800888a:	d102      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
            frequency = CSI_VALUE;
 800888c:	4b72      	ldr	r3, [pc, #456]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800888e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008890:	e13b      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008898:	d102      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            frequency = HSE_VALUE;
 800889a:	4b70      	ldr	r3, [pc, #448]	; (8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800889e:	e134      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
            frequency = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088a4:	e131      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088a6:	4b6e      	ldr	r3, [pc, #440]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80088a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088aa:	e12e      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      default :
        {
          frequency = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088b0:	e12b      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b8:	d15e      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80088ba:	4b65      	ldr	r3, [pc, #404]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80088c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088ca:	d033      	beq.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088d2:	d84e      	bhi.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80088d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088da:	d047      	beq.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088e2:	d846      	bhi.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ea:	d01b      	beq.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f2:	d83e      	bhi.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008900:	d008      	beq.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008902:	e036      	b.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fbc9 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008912:	e0fa      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008914:	f107 0318 	add.w	r3, r7, #24
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f919 	bl	8008b50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008922:	e0f2      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008924:	f107 030c 	add.w	r3, r7, #12
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fa65 	bl	8008df8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008932:	e0ea      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008934:	4b46      	ldr	r3, [pc, #280]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800893c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008944:	4b43      	ldr	r3, [pc, #268]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008948:	e0df      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008950:	d102      	bne.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
            frequency = CSI_VALUE;
 8008952:	4b41      	ldr	r3, [pc, #260]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008956:	e0d8      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800895e:	d102      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
            frequency = HSE_VALUE;
 8008960:	4b3e      	ldr	r3, [pc, #248]	; (8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008964:	e0d1      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
            frequency = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800896a:	e0ce      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800896c:	4b3c      	ldr	r3, [pc, #240]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008970:	e0cb      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      default :
        {
          frequency = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008976:	e0c8      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800897e:	d143      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008980:	4b33      	ldr	r3, [pc, #204]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008988:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008990:	d01b      	beq.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8008992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008998:	d833      	bhi.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	2b00      	cmp	r3, #0
 800899e:	d004      	beq.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a6:	d008      	beq.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80089a8:	e02b      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089aa:	f107 0318 	add.w	r3, r7, #24
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f8ce 	bl	8008b50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089b8:	e0a7      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ba:	f107 030c 	add.w	r3, r7, #12
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fa1a 	bl	8008df8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089c8:	e09f      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089ca:	4b21      	ldr	r3, [pc, #132]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80089cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80089d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d102      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80089da:	4b1e      	ldr	r3, [pc, #120]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80089de:	e094      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80089e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089e6:	d102      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = CSI_VALUE;
 80089e8:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ec:	e08d      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80089ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f4:	d102      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
            frequency = HSE_VALUE;
 80089f6:	4b19      	ldr	r3, [pc, #100]	; (8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80089f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089fa:	e086      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
            frequency = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a00:	e083      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      default :
        {
          frequency = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a06:	e080      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a0e:	d129      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008a10:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d004      	beq.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8008a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a26:	d008      	beq.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008a28:	e00f      	b.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fb36 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a38:	e067      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3a:	f107 0318 	add.w	r3, r7, #24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 f886 	bl	8008b50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a48:	e05f      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }

      default :
        {
          frequency = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a4e:	e05c      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008a50:	58024400 	.word	0x58024400
 8008a54:	03d09000 	.word	0x03d09000
 8008a58:	003d0900 	.word	0x003d0900
 8008a5c:	017d7840 	.word	0x017d7840
 8008a60:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a6a:	d14c      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008a6c:	4b29      	ldr	r3, [pc, #164]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a70:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a7c:	d03d      	beq.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a84:	d83c      	bhi.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8c:	d032      	beq.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a94:	d834      	bhi.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a9c:	d027      	beq.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008aa4:	d82c      	bhi.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aac:	d017      	beq.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ab4:	d824      	bhi.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ac2:	d004      	beq.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008ac4:	e01c      	b.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ac6:	f000 f82d 	bl	8008b24 <HAL_RCCEx_GetD3PCLK1Freq>
 8008aca:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008acc:	e01d      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ace:	f107 0318 	add.w	r3, r7, #24
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 f83c 	bl	8008b50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008adc:	e015      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ade:	f107 030c 	add.w	r3, r7, #12
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f988 	bl	8008df8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aec:	e00d      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008aee:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af2:	e00a      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008af4:	4b09      	ldr	r3, [pc, #36]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af8:	e007      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008afa:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008afe:	e004      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b04:	e001      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
        }
      }
    }
  else
    {
      frequency = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3740      	adds	r7, #64	; 0x40
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	58024400 	.word	0x58024400
 8008b18:	03d09000 	.word	0x03d09000
 8008b1c:	003d0900 	.word	0x003d0900
 8008b20:	017d7840 	.word	0x017d7840

08008b24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008b28:	f7fe fdd6 	bl	80076d8 <HAL_RCC_GetHCLKFreq>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	091b      	lsrs	r3, r3, #4
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	4904      	ldr	r1, [pc, #16]	; (8008b4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b3a:	5ccb      	ldrb	r3, [r1, r3]
 8008b3c:	f003 031f 	and.w	r3, r3, #31
 8008b40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	58024400 	.word	0x58024400
 8008b4c:	08011ee4 	.word	0x08011ee4

08008b50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b089      	sub	sp, #36	; 0x24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b58:	4ba1      	ldr	r3, [pc, #644]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	f003 0303 	and.w	r3, r3, #3
 8008b60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008b62:	4b9f      	ldr	r3, [pc, #636]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b66:	0b1b      	lsrs	r3, r3, #12
 8008b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b6e:	4b9c      	ldr	r3, [pc, #624]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	091b      	lsrs	r3, r3, #4
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008b7a:	4b99      	ldr	r3, [pc, #612]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7e:	08db      	lsrs	r3, r3, #3
 8008b80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	fb02 f303 	mul.w	r3, r2, r3
 8008b8a:	ee07 3a90 	vmov	s15, r3
 8008b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 8111 	beq.w	8008dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	f000 8083 	beq.w	8008cac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	f200 80a1 	bhi.w	8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d056      	beq.n	8008c68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008bba:	e099      	b.n	8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bbc:	4b88      	ldr	r3, [pc, #544]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0320 	and.w	r3, r3, #32
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d02d      	beq.n	8008c24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bc8:	4b85      	ldr	r3, [pc, #532]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	08db      	lsrs	r3, r3, #3
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	4a84      	ldr	r2, [pc, #528]	; (8008de4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	ee07 3a90 	vmov	s15, r3
 8008be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf2:	4b7b      	ldr	r3, [pc, #492]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c22:	e087      	b.n	8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c36:	4b6a      	ldr	r3, [pc, #424]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c66:	e065      	b.n	8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7a:	4b59      	ldr	r3, [pc, #356]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008caa:	e043      	b.n	8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cbe:	4b48      	ldr	r3, [pc, #288]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cee:	e021      	b.n	8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d02:	4b37      	ldr	r3, [pc, #220]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008d34:	4b2a      	ldr	r3, [pc, #168]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	0a5b      	lsrs	r3, r3, #9
 8008d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d5a:	ee17 2a90 	vmov	r2, s15
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008d62:	4b1f      	ldr	r3, [pc, #124]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d66:	0c1b      	lsrs	r3, r3, #16
 8008d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d6c:	ee07 3a90 	vmov	s15, r3
 8008d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d88:	ee17 2a90 	vmov	r2, s15
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008d90:	4b13      	ldr	r3, [pc, #76]	; (8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d94:	0e1b      	lsrs	r3, r3, #24
 8008d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008da6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008db6:	ee17 2a90 	vmov	r2, s15
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	609a      	str	r2, [r3, #8]
}
 8008dd2:	bf00      	nop
 8008dd4:	3724      	adds	r7, #36	; 0x24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	58024400 	.word	0x58024400
 8008de4:	03d09000 	.word	0x03d09000
 8008de8:	46000000 	.word	0x46000000
 8008dec:	4c742400 	.word	0x4c742400
 8008df0:	4a742400 	.word	0x4a742400
 8008df4:	4bbebc20 	.word	0x4bbebc20

08008df8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b089      	sub	sp, #36	; 0x24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e00:	4ba1      	ldr	r3, [pc, #644]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	f003 0303 	and.w	r3, r3, #3
 8008e08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008e0a:	4b9f      	ldr	r3, [pc, #636]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0e:	0d1b      	lsrs	r3, r3, #20
 8008e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e16:	4b9c      	ldr	r3, [pc, #624]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008e22:	4b99      	ldr	r3, [pc, #612]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e26:	08db      	lsrs	r3, r3, #3
 8008e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	fb02 f303 	mul.w	r3, r2, r3
 8008e32:	ee07 3a90 	vmov	s15, r3
 8008e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8111 	beq.w	8009068 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	f000 8083 	beq.w	8008f54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	f200 80a1 	bhi.w	8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d056      	beq.n	8008f10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e62:	e099      	b.n	8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e64:	4b88      	ldr	r3, [pc, #544]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0320 	and.w	r3, r3, #32
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d02d      	beq.n	8008ecc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e70:	4b85      	ldr	r3, [pc, #532]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	08db      	lsrs	r3, r3, #3
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	4a84      	ldr	r2, [pc, #528]	; (800908c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e80:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	ee07 3a90 	vmov	s15, r3
 8008e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e9a:	4b7b      	ldr	r3, [pc, #492]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008eca:	e087      	b.n	8008fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ede:	4b6a      	ldr	r3, [pc, #424]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee6:	ee07 3a90 	vmov	s15, r3
 8008eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ef2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f0e:	e065      	b.n	8008fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f22:	4b59      	ldr	r3, [pc, #356]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2a:	ee07 3a90 	vmov	s15, r3
 8008f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f52:	e043      	b.n	8008fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800909c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f66:	4b48      	ldr	r3, [pc, #288]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f96:	e021      	b.n	8008fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008faa:	4b37      	ldr	r3, [pc, #220]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb2:	ee07 3a90 	vmov	s15, r3
 8008fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008fdc:	4b2a      	ldr	r3, [pc, #168]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	0a5b      	lsrs	r3, r3, #9
 8008fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009002:	ee17 2a90 	vmov	r2, s15
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800900a:	4b1f      	ldr	r3, [pc, #124]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800900c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900e:	0c1b      	lsrs	r3, r3, #16
 8009010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009014:	ee07 3a90 	vmov	s15, r3
 8009018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009024:	edd7 6a07 	vldr	s13, [r7, #28]
 8009028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800902c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009030:	ee17 2a90 	vmov	r2, s15
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009038:	4b13      	ldr	r3, [pc, #76]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	0e1b      	lsrs	r3, r3, #24
 800903e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800904e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009052:	edd7 6a07 	vldr	s13, [r7, #28]
 8009056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800905a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800905e:	ee17 2a90 	vmov	r2, s15
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009066:	e008      	b.n	800907a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	609a      	str	r2, [r3, #8]
}
 800907a:	bf00      	nop
 800907c:	3724      	adds	r7, #36	; 0x24
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	58024400 	.word	0x58024400
 800908c:	03d09000 	.word	0x03d09000
 8009090:	46000000 	.word	0x46000000
 8009094:	4c742400 	.word	0x4c742400
 8009098:	4a742400 	.word	0x4a742400
 800909c:	4bbebc20 	.word	0x4bbebc20

080090a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b089      	sub	sp, #36	; 0x24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090a8:	4ba0      	ldr	r3, [pc, #640]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ac:	f003 0303 	and.w	r3, r3, #3
 80090b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80090b2:	4b9e      	ldr	r3, [pc, #632]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b6:	091b      	lsrs	r3, r3, #4
 80090b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80090be:	4b9b      	ldr	r3, [pc, #620]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090c8:	4b98      	ldr	r3, [pc, #608]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090cc:	08db      	lsrs	r3, r3, #3
 80090ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	fb02 f303 	mul.w	r3, r2, r3
 80090d8:	ee07 3a90 	vmov	s15, r3
 80090dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 8111 	beq.w	800930e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	f000 8083 	beq.w	80091fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	f200 80a1 	bhi.w	800923e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d056      	beq.n	80091b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009108:	e099      	b.n	800923e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800910a:	4b88      	ldr	r3, [pc, #544]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d02d      	beq.n	8009172 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009116:	4b85      	ldr	r3, [pc, #532]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	08db      	lsrs	r3, r3, #3
 800911c:	f003 0303 	and.w	r3, r3, #3
 8009120:	4a83      	ldr	r2, [pc, #524]	; (8009330 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009122:	fa22 f303 	lsr.w	r3, r2, r3
 8009126:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	ee07 3a90 	vmov	s15, r3
 8009138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009140:	4b7a      	ldr	r3, [pc, #488]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009150:	ed97 6a03 	vldr	s12, [r7, #12]
 8009154:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009334 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009170:	e087      	b.n	8009282 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	ee07 3a90 	vmov	s15, r3
 8009178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009184:	4b69      	ldr	r3, [pc, #420]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918c:	ee07 3a90 	vmov	s15, r3
 8009190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009194:	ed97 6a03 	vldr	s12, [r7, #12]
 8009198:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009334 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800919c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091b4:	e065      	b.n	8009282 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800933c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80091c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c8:	4b58      	ldr	r3, [pc, #352]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d0:	ee07 3a90 	vmov	s15, r3
 80091d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009334 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091f8:	e043      	b.n	8009282 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	ee07 3a90 	vmov	s15, r3
 8009200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009204:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800920c:	4b47      	ldr	r3, [pc, #284]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800920e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009214:	ee07 3a90 	vmov	s15, r3
 8009218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800921c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009220:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009334 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800922c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009238:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800923c:	e021      	b.n	8009282 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	ee07 3a90 	vmov	s15, r3
 8009244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009248:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800933c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800924c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009250:	4b36      	ldr	r3, [pc, #216]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009258:	ee07 3a90 	vmov	s15, r3
 800925c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009260:	ed97 6a03 	vldr	s12, [r7, #12]
 8009264:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009334 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800926c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800927c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009280:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009282:	4b2a      	ldr	r3, [pc, #168]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009286:	0a5b      	lsrs	r3, r3, #9
 8009288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009298:	ee37 7a87 	vadd.f32	s14, s15, s14
 800929c:	edd7 6a07 	vldr	s13, [r7, #28]
 80092a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a8:	ee17 2a90 	vmov	r2, s15
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80092b0:	4b1e      	ldr	r3, [pc, #120]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b4:	0c1b      	lsrs	r3, r3, #16
 80092b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ba:	ee07 3a90 	vmov	s15, r3
 80092be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d6:	ee17 2a90 	vmov	r2, s15
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80092de:	4b13      	ldr	r3, [pc, #76]	; (800932c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e2:	0e1b      	lsrs	r3, r3, #24
 80092e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80092fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009304:	ee17 2a90 	vmov	r2, s15
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800930c:	e008      	b.n	8009320 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	609a      	str	r2, [r3, #8]
}
 8009320:	bf00      	nop
 8009322:	3724      	adds	r7, #36	; 0x24
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	58024400 	.word	0x58024400
 8009330:	03d09000 	.word	0x03d09000
 8009334:	46000000 	.word	0x46000000
 8009338:	4c742400 	.word	0x4c742400
 800933c:	4a742400 	.word	0x4a742400
 8009340:	4bbebc20 	.word	0x4bbebc20

08009344 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009352:	4b53      	ldr	r3, [pc, #332]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009356:	f003 0303 	and.w	r3, r3, #3
 800935a:	2b03      	cmp	r3, #3
 800935c:	d101      	bne.n	8009362 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e099      	b.n	8009496 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009362:	4b4f      	ldr	r3, [pc, #316]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a4e      	ldr	r2, [pc, #312]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009368:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800936c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800936e:	f7fa fc5d 	bl	8003c2c <HAL_GetTick>
 8009372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009374:	e008      	b.n	8009388 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009376:	f7fa fc59 	bl	8003c2c <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	d901      	bls.n	8009388 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e086      	b.n	8009496 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009388:	4b45      	ldr	r3, [pc, #276]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1f0      	bne.n	8009376 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009394:	4b42      	ldr	r3, [pc, #264]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009398:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	031b      	lsls	r3, r3, #12
 80093a2:	493f      	ldr	r1, [pc, #252]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	628b      	str	r3, [r1, #40]	; 0x28
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	025b      	lsls	r3, r3, #9
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	431a      	orrs	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	041b      	lsls	r3, r3, #16
 80093c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093ca:	431a      	orrs	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	061b      	lsls	r3, r3, #24
 80093d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093d8:	4931      	ldr	r1, [pc, #196]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80093de:	4b30      	ldr	r3, [pc, #192]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 80093e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	492d      	ldr	r1, [pc, #180]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80093f0:	4b2b      	ldr	r3, [pc, #172]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	f023 0220 	bic.w	r2, r3, #32
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	4928      	ldr	r1, [pc, #160]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009402:	4b27      	ldr	r3, [pc, #156]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009406:	4a26      	ldr	r2, [pc, #152]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009408:	f023 0310 	bic.w	r3, r3, #16
 800940c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800940e:	4b24      	ldr	r3, [pc, #144]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009412:	4b24      	ldr	r3, [pc, #144]	; (80094a4 <RCCEx_PLL2_Config+0x160>)
 8009414:	4013      	ands	r3, r2
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	69d2      	ldr	r2, [r2, #28]
 800941a:	00d2      	lsls	r2, r2, #3
 800941c:	4920      	ldr	r1, [pc, #128]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 800941e:	4313      	orrs	r3, r2
 8009420:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009422:	4b1f      	ldr	r3, [pc, #124]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009426:	4a1e      	ldr	r2, [pc, #120]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009428:	f043 0310 	orr.w	r3, r3, #16
 800942c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d106      	bne.n	8009442 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009434:	4b1a      	ldr	r3, [pc, #104]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	4a19      	ldr	r2, [pc, #100]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 800943a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800943e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009440:	e00f      	b.n	8009462 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d106      	bne.n	8009456 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009448:	4b15      	ldr	r3, [pc, #84]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	4a14      	ldr	r2, [pc, #80]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 800944e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009454:	e005      	b.n	8009462 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009456:	4b12      	ldr	r3, [pc, #72]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945a:	4a11      	ldr	r2, [pc, #68]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 800945c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009460:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009462:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a0e      	ldr	r2, [pc, #56]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 8009468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800946c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800946e:	f7fa fbdd 	bl	8003c2c <HAL_GetTick>
 8009472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009474:	e008      	b.n	8009488 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009476:	f7fa fbd9 	bl	8003c2c <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	2b02      	cmp	r3, #2
 8009482:	d901      	bls.n	8009488 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e006      	b.n	8009496 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009488:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <RCCEx_PLL2_Config+0x15c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0f0      	beq.n	8009476 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	58024400 	.word	0x58024400
 80094a4:	ffff0007 	.word	0xffff0007

080094a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094b6:	4b53      	ldr	r3, [pc, #332]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80094b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d101      	bne.n	80094c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e099      	b.n	80095fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80094c6:	4b4f      	ldr	r3, [pc, #316]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a4e      	ldr	r2, [pc, #312]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80094cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d2:	f7fa fbab 	bl	8003c2c <HAL_GetTick>
 80094d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094d8:	e008      	b.n	80094ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094da:	f7fa fba7 	bl	8003c2c <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d901      	bls.n	80094ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e086      	b.n	80095fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094ec:	4b45      	ldr	r3, [pc, #276]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f0      	bne.n	80094da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80094f8:	4b42      	ldr	r3, [pc, #264]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	051b      	lsls	r3, r3, #20
 8009506:	493f      	ldr	r1, [pc, #252]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 8009508:	4313      	orrs	r3, r2
 800950a:	628b      	str	r3, [r1, #40]	; 0x28
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	3b01      	subs	r3, #1
 8009512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	3b01      	subs	r3, #1
 800951c:	025b      	lsls	r3, r3, #9
 800951e:	b29b      	uxth	r3, r3
 8009520:	431a      	orrs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	3b01      	subs	r3, #1
 8009528:	041b      	lsls	r3, r3, #16
 800952a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800952e:	431a      	orrs	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	3b01      	subs	r3, #1
 8009536:	061b      	lsls	r3, r3, #24
 8009538:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800953c:	4931      	ldr	r1, [pc, #196]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 800953e:	4313      	orrs	r3, r2
 8009540:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009542:	4b30      	ldr	r3, [pc, #192]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 8009544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	492d      	ldr	r1, [pc, #180]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 8009550:	4313      	orrs	r3, r2
 8009552:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009554:	4b2b      	ldr	r3, [pc, #172]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 8009556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009558:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	4928      	ldr	r1, [pc, #160]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 8009562:	4313      	orrs	r3, r2
 8009564:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009566:	4b27      	ldr	r3, [pc, #156]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 8009568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956a:	4a26      	ldr	r2, [pc, #152]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 800956c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009572:	4b24      	ldr	r3, [pc, #144]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 8009574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009576:	4b24      	ldr	r3, [pc, #144]	; (8009608 <RCCEx_PLL3_Config+0x160>)
 8009578:	4013      	ands	r3, r2
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	69d2      	ldr	r2, [r2, #28]
 800957e:	00d2      	lsls	r2, r2, #3
 8009580:	4920      	ldr	r1, [pc, #128]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 8009582:	4313      	orrs	r3, r2
 8009584:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009586:	4b1f      	ldr	r3, [pc, #124]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	4a1e      	ldr	r2, [pc, #120]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 800958c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d106      	bne.n	80095a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009598:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	4a19      	ldr	r2, [pc, #100]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 800959e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80095a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095a4:	e00f      	b.n	80095c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d106      	bne.n	80095ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80095ac:	4b15      	ldr	r3, [pc, #84]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	4a14      	ldr	r2, [pc, #80]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80095b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095b8:	e005      	b.n	80095c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095ba:	4b12      	ldr	r3, [pc, #72]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80095bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095be:	4a11      	ldr	r2, [pc, #68]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80095c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80095c6:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a0e      	ldr	r2, [pc, #56]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80095cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095d2:	f7fa fb2b 	bl	8003c2c <HAL_GetTick>
 80095d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095d8:	e008      	b.n	80095ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80095da:	f7fa fb27 	bl	8003c2c <HAL_GetTick>
 80095de:	4602      	mov	r2, r0
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d901      	bls.n	80095ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e006      	b.n	80095fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095ec:	4b05      	ldr	r3, [pc, #20]	; (8009604 <RCCEx_PLL3_Config+0x15c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0f0      	beq.n	80095da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	58024400 	.word	0x58024400
 8009608:	ffff0007 	.word	0xffff0007

0800960c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e0e2      	b.n	80097e8 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a70      	ldr	r2, [pc, #448]	; (80097f0 <HAL_SPI_Init+0x1e4>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00f      	beq.n	8009652 <HAL_SPI_Init+0x46>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a6f      	ldr	r2, [pc, #444]	; (80097f4 <HAL_SPI_Init+0x1e8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d00a      	beq.n	8009652 <HAL_SPI_Init+0x46>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a6d      	ldr	r2, [pc, #436]	; (80097f8 <HAL_SPI_Init+0x1ec>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d005      	beq.n	8009652 <HAL_SPI_Init+0x46>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	2b0f      	cmp	r3, #15
 800964c:	d901      	bls.n	8009652 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e0ca      	b.n	80097e8 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f8d2 	bl	80097fc <SPI_GetPacketSize>
 8009658:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a64      	ldr	r2, [pc, #400]	; (80097f0 <HAL_SPI_Init+0x1e4>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d00c      	beq.n	800967e <HAL_SPI_Init+0x72>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a62      	ldr	r2, [pc, #392]	; (80097f4 <HAL_SPI_Init+0x1e8>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d007      	beq.n	800967e <HAL_SPI_Init+0x72>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a61      	ldr	r2, [pc, #388]	; (80097f8 <HAL_SPI_Init+0x1ec>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d002      	beq.n	800967e <HAL_SPI_Init+0x72>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2b08      	cmp	r3, #8
 800967c:	d811      	bhi.n	80096a2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009682:	4a5b      	ldr	r2, [pc, #364]	; (80097f0 <HAL_SPI_Init+0x1e4>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d009      	beq.n	800969c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a59      	ldr	r2, [pc, #356]	; (80097f4 <HAL_SPI_Init+0x1e8>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d004      	beq.n	800969c <HAL_SPI_Init+0x90>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a58      	ldr	r2, [pc, #352]	; (80097f8 <HAL_SPI_Init+0x1ec>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d104      	bne.n	80096a6 <HAL_SPI_Init+0x9a>
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b10      	cmp	r3, #16
 80096a0:	d901      	bls.n	80096a6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e0a0      	b.n	80097e8 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7f8 fa08 	bl	8001ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2202      	movs	r2, #2
 80096c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0201 	bic.w	r2, r2, #1
 80096d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096e0:	d110      	bne.n	8009704 <HAL_SPI_Init+0xf8>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096ea:	d10b      	bne.n	8009704 <HAL_SPI_Init+0xf8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d107      	bne.n	8009704 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009702:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	69da      	ldr	r2, [r3, #28]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970c:	431a      	orrs	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	431a      	orrs	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009716:	ea42 0103 	orr.w	r1, r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	431a      	orrs	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009734:	431a      	orrs	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	431a      	orrs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	431a      	orrs	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	431a      	orrs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	431a      	orrs	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009758:	431a      	orrs	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	431a      	orrs	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009764:	ea42 0103 	orr.w	r1, r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d113      	bne.n	80097a4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800978e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097a2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0201 	bic.w	r2, r2, #1
 80097b2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	40013000 	.word	0x40013000
 80097f4:	40003800 	.word	0x40003800
 80097f8:	40003c00 	.word	0x40003c00

080097fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009808:	095b      	lsrs	r3, r3, #5
 800980a:	3301      	adds	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	3301      	adds	r3, #1
 8009814:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	3307      	adds	r3, #7
 800981a:	08db      	lsrs	r3, r3, #3
 800981c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	fb02 f303 	mul.w	r3, r2, r3
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e049      	b.n	80098d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d106      	bne.n	800985e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7f8 f9a5 	bl	8001ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2202      	movs	r2, #2
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3304      	adds	r3, #4
 800986e:	4619      	mov	r1, r3
 8009870:	4610      	mov	r0, r2
 8009872:	f000 fe29 	bl	800a4c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d001      	beq.n	80098f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e021      	b.n	800993c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f042 0201 	orr.w	r2, r2, #1
 800990e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689a      	ldr	r2, [r3, #8]
 8009916:	4b0c      	ldr	r3, [pc, #48]	; (8009948 <HAL_TIM_Base_Start_IT+0x68>)
 8009918:	4013      	ands	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b06      	cmp	r3, #6
 8009920:	d00b      	beq.n	800993a <HAL_TIM_Base_Start_IT+0x5a>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009928:	d007      	beq.n	800993a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f042 0201 	orr.w	r2, r2, #1
 8009938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	00010007 	.word	0x00010007

0800994c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e049      	b.n	80099f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f841 	bl	80099fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f000 fd9c 	bl	800a4c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009a02:	bf00      	nop
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
	...

08009a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d109      	bne.n	8009a34 <HAL_TIM_PWM_Start+0x24>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	bf14      	ite	ne
 8009a2c:	2301      	movne	r3, #1
 8009a2e:	2300      	moveq	r3, #0
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	e03c      	b.n	8009aae <HAL_TIM_PWM_Start+0x9e>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	d109      	bne.n	8009a4e <HAL_TIM_PWM_Start+0x3e>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	bf14      	ite	ne
 8009a46:	2301      	movne	r3, #1
 8009a48:	2300      	moveq	r3, #0
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	e02f      	b.n	8009aae <HAL_TIM_PWM_Start+0x9e>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d109      	bne.n	8009a68 <HAL_TIM_PWM_Start+0x58>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	bf14      	ite	ne
 8009a60:	2301      	movne	r3, #1
 8009a62:	2300      	moveq	r3, #0
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	e022      	b.n	8009aae <HAL_TIM_PWM_Start+0x9e>
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b0c      	cmp	r3, #12
 8009a6c:	d109      	bne.n	8009a82 <HAL_TIM_PWM_Start+0x72>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	bf14      	ite	ne
 8009a7a:	2301      	movne	r3, #1
 8009a7c:	2300      	moveq	r3, #0
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	e015      	b.n	8009aae <HAL_TIM_PWM_Start+0x9e>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b10      	cmp	r3, #16
 8009a86:	d109      	bne.n	8009a9c <HAL_TIM_PWM_Start+0x8c>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	bf14      	ite	ne
 8009a94:	2301      	movne	r3, #1
 8009a96:	2300      	moveq	r3, #0
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	e008      	b.n	8009aae <HAL_TIM_PWM_Start+0x9e>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	bf14      	ite	ne
 8009aa8:	2301      	movne	r3, #1
 8009aaa:	2300      	moveq	r3, #0
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e06e      	b.n	8009b94 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <HAL_TIM_PWM_Start+0xb6>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ac4:	e023      	b.n	8009b0e <HAL_TIM_PWM_Start+0xfe>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b04      	cmp	r3, #4
 8009aca:	d104      	bne.n	8009ad6 <HAL_TIM_PWM_Start+0xc6>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ad4:	e01b      	b.n	8009b0e <HAL_TIM_PWM_Start+0xfe>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	d104      	bne.n	8009ae6 <HAL_TIM_PWM_Start+0xd6>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ae4:	e013      	b.n	8009b0e <HAL_TIM_PWM_Start+0xfe>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b0c      	cmp	r3, #12
 8009aea:	d104      	bne.n	8009af6 <HAL_TIM_PWM_Start+0xe6>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009af4:	e00b      	b.n	8009b0e <HAL_TIM_PWM_Start+0xfe>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b10      	cmp	r3, #16
 8009afa:	d104      	bne.n	8009b06 <HAL_TIM_PWM_Start+0xf6>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b04:	e003      	b.n	8009b0e <HAL_TIM_PWM_Start+0xfe>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2201      	movs	r2, #1
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f001 f8dc 	bl	800acd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a1e      	ldr	r2, [pc, #120]	; (8009b9c <HAL_TIM_PWM_Start+0x18c>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d013      	beq.n	8009b4e <HAL_TIM_PWM_Start+0x13e>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a1d      	ldr	r2, [pc, #116]	; (8009ba0 <HAL_TIM_PWM_Start+0x190>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d00e      	beq.n	8009b4e <HAL_TIM_PWM_Start+0x13e>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a1b      	ldr	r2, [pc, #108]	; (8009ba4 <HAL_TIM_PWM_Start+0x194>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d009      	beq.n	8009b4e <HAL_TIM_PWM_Start+0x13e>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a1a      	ldr	r2, [pc, #104]	; (8009ba8 <HAL_TIM_PWM_Start+0x198>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d004      	beq.n	8009b4e <HAL_TIM_PWM_Start+0x13e>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a18      	ldr	r2, [pc, #96]	; (8009bac <HAL_TIM_PWM_Start+0x19c>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d101      	bne.n	8009b52 <HAL_TIM_PWM_Start+0x142>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e000      	b.n	8009b54 <HAL_TIM_PWM_Start+0x144>
 8009b52:	2300      	movs	r3, #0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d007      	beq.n	8009b68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <HAL_TIM_PWM_Start+0x1a0>)
 8009b70:	4013      	ands	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b06      	cmp	r3, #6
 8009b78:	d00b      	beq.n	8009b92 <HAL_TIM_PWM_Start+0x182>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b80:	d007      	beq.n	8009b92 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f042 0201 	orr.w	r2, r2, #1
 8009b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40010400 	.word	0x40010400
 8009ba4:	40014000 	.word	0x40014000
 8009ba8:	40014400 	.word	0x40014400
 8009bac:	40014800 	.word	0x40014800
 8009bb0:	00010007 	.word	0x00010007

08009bb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e08f      	b.n	8009ce8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d106      	bne.n	8009be2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7f8 f85f 	bl	8001ca0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2202      	movs	r2, #2
 8009be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6899      	ldr	r1, [r3, #8]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	4b3e      	ldr	r3, [pc, #248]	; (8009cf0 <HAL_TIM_Encoder_Init+0x13c>)
 8009bf6:	400b      	ands	r3, r1
 8009bf8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3304      	adds	r3, #4
 8009c02:	4619      	mov	r1, r3
 8009c04:	4610      	mov	r0, r2
 8009c06:	f000 fc5f 	bl	800a4c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6a1b      	ldr	r3, [r3, #32]
 8009c20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	4b31      	ldr	r3, [pc, #196]	; (8009cf4 <HAL_TIM_Encoder_Init+0x140>)
 8009c30:	4013      	ands	r3, r2
 8009c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	689a      	ldr	r2, [r3, #8]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	021b      	lsls	r3, r3, #8
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	4b2b      	ldr	r3, [pc, #172]	; (8009cf8 <HAL_TIM_Encoder_Init+0x144>)
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	4b2a      	ldr	r3, [pc, #168]	; (8009cfc <HAL_TIM_Encoder_Init+0x148>)
 8009c52:	4013      	ands	r3, r2
 8009c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	021b      	lsls	r3, r3, #8
 8009c60:	4313      	orrs	r3, r2
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	011a      	lsls	r2, r3, #4
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	031b      	lsls	r3, r3, #12
 8009c74:	4313      	orrs	r3, r2
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009c82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009c8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	011b      	lsls	r3, r3, #4
 8009c96:	4313      	orrs	r3, r2
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	fffebff8 	.word	0xfffebff8
 8009cf4:	fffffcfc 	.word	0xfffffcfc
 8009cf8:	fffff3f3 	.word	0xfffff3f3
 8009cfc:	ffff0f0f 	.word	0xffff0f0f

08009d00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d110      	bne.n	8009d52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d102      	bne.n	8009d3c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d36:	7b7b      	ldrb	r3, [r7, #13]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d001      	beq.n	8009d40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e069      	b.n	8009e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2202      	movs	r2, #2
 8009d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d50:	e031      	b.n	8009db6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b04      	cmp	r3, #4
 8009d56:	d110      	bne.n	8009d7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d102      	bne.n	8009d64 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d5e:	7b3b      	ldrb	r3, [r7, #12]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d001      	beq.n	8009d68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e055      	b.n	8009e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d78:	e01d      	b.n	8009db6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d108      	bne.n	8009d92 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d105      	bne.n	8009d92 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d86:	7b7b      	ldrb	r3, [r7, #13]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d102      	bne.n	8009d92 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d8c:	7b3b      	ldrb	r3, [r7, #12]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d001      	beq.n	8009d96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e03e      	b.n	8009e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2202      	movs	r2, #2
 8009da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2202      	movs	r2, #2
 8009daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <HAL_TIM_Encoder_Start+0xc4>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	d008      	beq.n	8009dd4 <HAL_TIM_Encoder_Start+0xd4>
 8009dc2:	e00f      	b.n	8009de4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	2100      	movs	r1, #0
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 ff81 	bl	800acd4 <TIM_CCxChannelCmd>
      break;
 8009dd2:	e016      	b.n	8009e02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	2104      	movs	r1, #4
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 ff79 	bl	800acd4 <TIM_CCxChannelCmd>
      break;
 8009de2:	e00e      	b.n	8009e02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2201      	movs	r2, #1
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 ff71 	bl	800acd4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2201      	movs	r2, #1
 8009df8:	2104      	movs	r1, #4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 ff6a 	bl	800acd4 <TIM_CCxChannelCmd>
      break;
 8009e00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f042 0201 	orr.w	r2, r2, #1
 8009e10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	f003 0302 	and.w	r3, r3, #2
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d122      	bne.n	8009e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d11b      	bne.n	8009e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f06f 0202 	mvn.w	r2, #2
 8009e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	f003 0303 	and.w	r3, r3, #3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fb14 	bl	800a48c <HAL_TIM_IC_CaptureCallback>
 8009e64:	e005      	b.n	8009e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fb06 	bl	800a478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fb17 	bl	800a4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	f003 0304 	and.w	r3, r3, #4
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	d122      	bne.n	8009ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d11b      	bne.n	8009ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f06f 0204 	mvn.w	r2, #4
 8009e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 faea 	bl	800a48c <HAL_TIM_IC_CaptureCallback>
 8009eb8:	e005      	b.n	8009ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fadc 	bl	800a478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 faed 	bl	800a4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	f003 0308 	and.w	r3, r3, #8
 8009ed6:	2b08      	cmp	r3, #8
 8009ed8:	d122      	bne.n	8009f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	f003 0308 	and.w	r3, r3, #8
 8009ee4:	2b08      	cmp	r3, #8
 8009ee6:	d11b      	bne.n	8009f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f06f 0208 	mvn.w	r2, #8
 8009ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2204      	movs	r2, #4
 8009ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	f003 0303 	and.w	r3, r3, #3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d003      	beq.n	8009f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fac0 	bl	800a48c <HAL_TIM_IC_CaptureCallback>
 8009f0c:	e005      	b.n	8009f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fab2 	bl	800a478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fac3 	bl	800a4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	f003 0310 	and.w	r3, r3, #16
 8009f2a:	2b10      	cmp	r3, #16
 8009f2c:	d122      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b10      	cmp	r3, #16
 8009f3a:	d11b      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f06f 0210 	mvn.w	r2, #16
 8009f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2208      	movs	r2, #8
 8009f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	69db      	ldr	r3, [r3, #28]
 8009f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fa96 	bl	800a48c <HAL_TIM_IC_CaptureCallback>
 8009f60:	e005      	b.n	8009f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fa88 	bl	800a478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fa99 	bl	800a4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d10e      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d107      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f06f 0201 	mvn.w	r2, #1
 8009f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fa62 	bl	800a464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009faa:	2b80      	cmp	r3, #128	; 0x80
 8009fac:	d10e      	bne.n	8009fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb8:	2b80      	cmp	r3, #128	; 0x80
 8009fba:	d107      	bne.n	8009fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f001 f83a 	bl	800b040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fda:	d10e      	bne.n	8009ffa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe6:	2b80      	cmp	r3, #128	; 0x80
 8009fe8:	d107      	bne.n	8009ffa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 f82d 	bl	800b054 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a004:	2b40      	cmp	r3, #64	; 0x40
 800a006:	d10e      	bne.n	800a026 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a012:	2b40      	cmp	r3, #64	; 0x40
 800a014:	d107      	bne.n	800a026 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a01e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fa47 	bl	800a4b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	f003 0320 	and.w	r3, r3, #32
 800a030:	2b20      	cmp	r3, #32
 800a032:	d10e      	bne.n	800a052 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	f003 0320 	and.w	r3, r3, #32
 800a03e:	2b20      	cmp	r3, #32
 800a040:	d107      	bne.n	800a052 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f06f 0220 	mvn.w	r2, #32
 800a04a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 ffed 	bl	800b02c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d101      	bne.n	800a076 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a072:	2302      	movs	r3, #2
 800a074:	e0fd      	b.n	800a272 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b14      	cmp	r3, #20
 800a082:	f200 80f0 	bhi.w	800a266 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a086:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a0e1 	.word	0x0800a0e1
 800a090:	0800a267 	.word	0x0800a267
 800a094:	0800a267 	.word	0x0800a267
 800a098:	0800a267 	.word	0x0800a267
 800a09c:	0800a121 	.word	0x0800a121
 800a0a0:	0800a267 	.word	0x0800a267
 800a0a4:	0800a267 	.word	0x0800a267
 800a0a8:	0800a267 	.word	0x0800a267
 800a0ac:	0800a163 	.word	0x0800a163
 800a0b0:	0800a267 	.word	0x0800a267
 800a0b4:	0800a267 	.word	0x0800a267
 800a0b8:	0800a267 	.word	0x0800a267
 800a0bc:	0800a1a3 	.word	0x0800a1a3
 800a0c0:	0800a267 	.word	0x0800a267
 800a0c4:	0800a267 	.word	0x0800a267
 800a0c8:	0800a267 	.word	0x0800a267
 800a0cc:	0800a1e5 	.word	0x0800a1e5
 800a0d0:	0800a267 	.word	0x0800a267
 800a0d4:	0800a267 	.word	0x0800a267
 800a0d8:	0800a267 	.word	0x0800a267
 800a0dc:	0800a225 	.word	0x0800a225
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68b9      	ldr	r1, [r7, #8]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 fa88 	bl	800a5fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	699a      	ldr	r2, [r3, #24]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f042 0208 	orr.w	r2, r2, #8
 800a0fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	699a      	ldr	r2, [r3, #24]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0204 	bic.w	r2, r2, #4
 800a10a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	6999      	ldr	r1, [r3, #24]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	691a      	ldr	r2, [r3, #16]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	619a      	str	r2, [r3, #24]
      break;
 800a11e:	e0a3      	b.n	800a268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 faf8 	bl	800a71c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	699a      	ldr	r2, [r3, #24]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a13a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	699a      	ldr	r2, [r3, #24]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a14a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6999      	ldr	r1, [r3, #24]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	021a      	lsls	r2, r3, #8
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	619a      	str	r2, [r3, #24]
      break;
 800a160:	e082      	b.n	800a268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 fb61 	bl	800a830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	69da      	ldr	r2, [r3, #28]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f042 0208 	orr.w	r2, r2, #8
 800a17c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69da      	ldr	r2, [r3, #28]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f022 0204 	bic.w	r2, r2, #4
 800a18c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69d9      	ldr	r1, [r3, #28]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	691a      	ldr	r2, [r3, #16]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	61da      	str	r2, [r3, #28]
      break;
 800a1a0:	e062      	b.n	800a268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 fbc7 	bl	800a93c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69da      	ldr	r2, [r3, #28]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69da      	ldr	r2, [r3, #28]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69d9      	ldr	r1, [r3, #28]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	021a      	lsls	r2, r3, #8
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	61da      	str	r2, [r3, #28]
      break;
 800a1e2:	e041      	b.n	800a268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 fc0e 	bl	800aa0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f042 0208 	orr.w	r2, r2, #8
 800a1fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 0204 	bic.w	r2, r2, #4
 800a20e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	691a      	ldr	r2, [r3, #16]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a222:	e021      	b.n	800a268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fc50 	bl	800aad0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a23e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a24e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	021a      	lsls	r2, r3, #8
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a264:	e000      	b.n	800a268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a266:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop

0800a27c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d101      	bne.n	800a294 <HAL_TIM_ConfigClockSource+0x18>
 800a290:	2302      	movs	r3, #2
 800a292:	e0db      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x1d0>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2202      	movs	r2, #2
 800a2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	4b69      	ldr	r3, [pc, #420]	; (800a454 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a63      	ldr	r2, [pc, #396]	; (800a458 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	f000 80a9 	beq.w	800a422 <HAL_TIM_ConfigClockSource+0x1a6>
 800a2d0:	4a61      	ldr	r2, [pc, #388]	; (800a458 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	f200 80ae 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a2d8:	4a60      	ldr	r2, [pc, #384]	; (800a45c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	f000 80a1 	beq.w	800a422 <HAL_TIM_ConfigClockSource+0x1a6>
 800a2e0:	4a5e      	ldr	r2, [pc, #376]	; (800a45c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	f200 80a6 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a2e8:	4a5d      	ldr	r2, [pc, #372]	; (800a460 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	f000 8099 	beq.w	800a422 <HAL_TIM_ConfigClockSource+0x1a6>
 800a2f0:	4a5b      	ldr	r2, [pc, #364]	; (800a460 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	f200 809e 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a2f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a2fc:	f000 8091 	beq.w	800a422 <HAL_TIM_ConfigClockSource+0x1a6>
 800a300:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a304:	f200 8096 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30c:	f000 8089 	beq.w	800a422 <HAL_TIM_ConfigClockSource+0x1a6>
 800a310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a314:	f200 808e 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a31c:	d03e      	beq.n	800a39c <HAL_TIM_ConfigClockSource+0x120>
 800a31e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a322:	f200 8087 	bhi.w	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a32a:	f000 8085 	beq.w	800a438 <HAL_TIM_ConfigClockSource+0x1bc>
 800a32e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a332:	d87f      	bhi.n	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a334:	2b70      	cmp	r3, #112	; 0x70
 800a336:	d01a      	beq.n	800a36e <HAL_TIM_ConfigClockSource+0xf2>
 800a338:	2b70      	cmp	r3, #112	; 0x70
 800a33a:	d87b      	bhi.n	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a33c:	2b60      	cmp	r3, #96	; 0x60
 800a33e:	d050      	beq.n	800a3e2 <HAL_TIM_ConfigClockSource+0x166>
 800a340:	2b60      	cmp	r3, #96	; 0x60
 800a342:	d877      	bhi.n	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a344:	2b50      	cmp	r3, #80	; 0x50
 800a346:	d03c      	beq.n	800a3c2 <HAL_TIM_ConfigClockSource+0x146>
 800a348:	2b50      	cmp	r3, #80	; 0x50
 800a34a:	d873      	bhi.n	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a34c:	2b40      	cmp	r3, #64	; 0x40
 800a34e:	d058      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x186>
 800a350:	2b40      	cmp	r3, #64	; 0x40
 800a352:	d86f      	bhi.n	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a354:	2b30      	cmp	r3, #48	; 0x30
 800a356:	d064      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x1a6>
 800a358:	2b30      	cmp	r3, #48	; 0x30
 800a35a:	d86b      	bhi.n	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a35c:	2b20      	cmp	r3, #32
 800a35e:	d060      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x1a6>
 800a360:	2b20      	cmp	r3, #32
 800a362:	d867      	bhi.n	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
 800a364:	2b00      	cmp	r3, #0
 800a366:	d05c      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x1a6>
 800a368:	2b10      	cmp	r3, #16
 800a36a:	d05a      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a36c:	e062      	b.n	800a434 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6899      	ldr	r1, [r3, #8]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	f000 fc89 	bl	800ac94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a390:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	609a      	str	r2, [r3, #8]
      break;
 800a39a:	e04e      	b.n	800a43a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	6899      	ldr	r1, [r3, #8]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f000 fc72 	bl	800ac94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3be:	609a      	str	r2, [r3, #8]
      break;
 800a3c0:	e03b      	b.n	800a43a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6818      	ldr	r0, [r3, #0]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	6859      	ldr	r1, [r3, #4]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	f000 fbe2 	bl	800ab98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2150      	movs	r1, #80	; 0x50
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 fc3c 	bl	800ac58 <TIM_ITRx_SetConfig>
      break;
 800a3e0:	e02b      	b.n	800a43a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	6859      	ldr	r1, [r3, #4]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	f000 fc01 	bl	800abf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2160      	movs	r1, #96	; 0x60
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fc2c 	bl	800ac58 <TIM_ITRx_SetConfig>
      break;
 800a400:	e01b      	b.n	800a43a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6818      	ldr	r0, [r3, #0]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	6859      	ldr	r1, [r3, #4]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	461a      	mov	r2, r3
 800a410:	f000 fbc2 	bl	800ab98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2140      	movs	r1, #64	; 0x40
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 fc1c 	bl	800ac58 <TIM_ITRx_SetConfig>
      break;
 800a420:	e00b      	b.n	800a43a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4619      	mov	r1, r3
 800a42c:	4610      	mov	r0, r2
 800a42e:	f000 fc13 	bl	800ac58 <TIM_ITRx_SetConfig>
      break;
 800a432:	e002      	b.n	800a43a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a434:	bf00      	nop
 800a436:	e000      	b.n	800a43a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a438:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	ffceff88 	.word	0xffceff88
 800a458:	00100040 	.word	0x00100040
 800a45c:	00100030 	.word	0x00100030
 800a460:	00100020 	.word	0x00100020

0800a464 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a40      	ldr	r2, [pc, #256]	; (800a5dc <TIM_Base_SetConfig+0x114>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d013      	beq.n	800a508 <TIM_Base_SetConfig+0x40>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e6:	d00f      	beq.n	800a508 <TIM_Base_SetConfig+0x40>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a3d      	ldr	r2, [pc, #244]	; (800a5e0 <TIM_Base_SetConfig+0x118>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d00b      	beq.n	800a508 <TIM_Base_SetConfig+0x40>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a3c      	ldr	r2, [pc, #240]	; (800a5e4 <TIM_Base_SetConfig+0x11c>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d007      	beq.n	800a508 <TIM_Base_SetConfig+0x40>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a3b      	ldr	r2, [pc, #236]	; (800a5e8 <TIM_Base_SetConfig+0x120>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d003      	beq.n	800a508 <TIM_Base_SetConfig+0x40>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a3a      	ldr	r2, [pc, #232]	; (800a5ec <TIM_Base_SetConfig+0x124>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d108      	bne.n	800a51a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a50e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4313      	orrs	r3, r2
 800a518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a2f      	ldr	r2, [pc, #188]	; (800a5dc <TIM_Base_SetConfig+0x114>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d01f      	beq.n	800a562 <TIM_Base_SetConfig+0x9a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a528:	d01b      	beq.n	800a562 <TIM_Base_SetConfig+0x9a>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a2c      	ldr	r2, [pc, #176]	; (800a5e0 <TIM_Base_SetConfig+0x118>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d017      	beq.n	800a562 <TIM_Base_SetConfig+0x9a>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a2b      	ldr	r2, [pc, #172]	; (800a5e4 <TIM_Base_SetConfig+0x11c>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d013      	beq.n	800a562 <TIM_Base_SetConfig+0x9a>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a2a      	ldr	r2, [pc, #168]	; (800a5e8 <TIM_Base_SetConfig+0x120>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d00f      	beq.n	800a562 <TIM_Base_SetConfig+0x9a>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a29      	ldr	r2, [pc, #164]	; (800a5ec <TIM_Base_SetConfig+0x124>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d00b      	beq.n	800a562 <TIM_Base_SetConfig+0x9a>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a28      	ldr	r2, [pc, #160]	; (800a5f0 <TIM_Base_SetConfig+0x128>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d007      	beq.n	800a562 <TIM_Base_SetConfig+0x9a>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a27      	ldr	r2, [pc, #156]	; (800a5f4 <TIM_Base_SetConfig+0x12c>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d003      	beq.n	800a562 <TIM_Base_SetConfig+0x9a>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a26      	ldr	r2, [pc, #152]	; (800a5f8 <TIM_Base_SetConfig+0x130>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d108      	bne.n	800a574 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	4313      	orrs	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a10      	ldr	r2, [pc, #64]	; (800a5dc <TIM_Base_SetConfig+0x114>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d00f      	beq.n	800a5c0 <TIM_Base_SetConfig+0xf8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a12      	ldr	r2, [pc, #72]	; (800a5ec <TIM_Base_SetConfig+0x124>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d00b      	beq.n	800a5c0 <TIM_Base_SetConfig+0xf8>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a11      	ldr	r2, [pc, #68]	; (800a5f0 <TIM_Base_SetConfig+0x128>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d007      	beq.n	800a5c0 <TIM_Base_SetConfig+0xf8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a10      	ldr	r2, [pc, #64]	; (800a5f4 <TIM_Base_SetConfig+0x12c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d003      	beq.n	800a5c0 <TIM_Base_SetConfig+0xf8>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a0f      	ldr	r2, [pc, #60]	; (800a5f8 <TIM_Base_SetConfig+0x130>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d103      	bne.n	800a5c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	691a      	ldr	r2, [r3, #16]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	615a      	str	r2, [r3, #20]
}
 800a5ce:	bf00      	nop
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	40010000 	.word	0x40010000
 800a5e0:	40000400 	.word	0x40000400
 800a5e4:	40000800 	.word	0x40000800
 800a5e8:	40000c00 	.word	0x40000c00
 800a5ec:	40010400 	.word	0x40010400
 800a5f0:	40014000 	.word	0x40014000
 800a5f4:	40014400 	.word	0x40014400
 800a5f8:	40014800 	.word	0x40014800

0800a5fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	f023 0201 	bic.w	r2, r3, #1
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	4b37      	ldr	r3, [pc, #220]	; (800a704 <TIM_OC1_SetConfig+0x108>)
 800a628:	4013      	ands	r3, r2
 800a62a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f023 0303 	bic.w	r3, r3, #3
 800a632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f023 0302 	bic.w	r3, r3, #2
 800a644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a2d      	ldr	r2, [pc, #180]	; (800a708 <TIM_OC1_SetConfig+0x10c>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d00f      	beq.n	800a678 <TIM_OC1_SetConfig+0x7c>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a2c      	ldr	r2, [pc, #176]	; (800a70c <TIM_OC1_SetConfig+0x110>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d00b      	beq.n	800a678 <TIM_OC1_SetConfig+0x7c>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a2b      	ldr	r2, [pc, #172]	; (800a710 <TIM_OC1_SetConfig+0x114>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d007      	beq.n	800a678 <TIM_OC1_SetConfig+0x7c>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a2a      	ldr	r2, [pc, #168]	; (800a714 <TIM_OC1_SetConfig+0x118>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d003      	beq.n	800a678 <TIM_OC1_SetConfig+0x7c>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a29      	ldr	r2, [pc, #164]	; (800a718 <TIM_OC1_SetConfig+0x11c>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d10c      	bne.n	800a692 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f023 0308 	bic.w	r3, r3, #8
 800a67e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	4313      	orrs	r3, r2
 800a688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f023 0304 	bic.w	r3, r3, #4
 800a690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a1c      	ldr	r2, [pc, #112]	; (800a708 <TIM_OC1_SetConfig+0x10c>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00f      	beq.n	800a6ba <TIM_OC1_SetConfig+0xbe>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a1b      	ldr	r2, [pc, #108]	; (800a70c <TIM_OC1_SetConfig+0x110>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d00b      	beq.n	800a6ba <TIM_OC1_SetConfig+0xbe>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a1a      	ldr	r2, [pc, #104]	; (800a710 <TIM_OC1_SetConfig+0x114>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d007      	beq.n	800a6ba <TIM_OC1_SetConfig+0xbe>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a19      	ldr	r2, [pc, #100]	; (800a714 <TIM_OC1_SetConfig+0x118>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d003      	beq.n	800a6ba <TIM_OC1_SetConfig+0xbe>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a18      	ldr	r2, [pc, #96]	; (800a718 <TIM_OC1_SetConfig+0x11c>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d111      	bne.n	800a6de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	621a      	str	r2, [r3, #32]
}
 800a6f8:	bf00      	nop
 800a6fa:	371c      	adds	r7, #28
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	fffeff8f 	.word	0xfffeff8f
 800a708:	40010000 	.word	0x40010000
 800a70c:	40010400 	.word	0x40010400
 800a710:	40014000 	.word	0x40014000
 800a714:	40014400 	.word	0x40014400
 800a718:	40014800 	.word	0x40014800

0800a71c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	f023 0210 	bic.w	r2, r3, #16
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	4b34      	ldr	r3, [pc, #208]	; (800a818 <TIM_OC2_SetConfig+0xfc>)
 800a748:	4013      	ands	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	021b      	lsls	r3, r3, #8
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	f023 0320 	bic.w	r3, r3, #32
 800a766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	4313      	orrs	r3, r2
 800a772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a29      	ldr	r2, [pc, #164]	; (800a81c <TIM_OC2_SetConfig+0x100>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d003      	beq.n	800a784 <TIM_OC2_SetConfig+0x68>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a28      	ldr	r2, [pc, #160]	; (800a820 <TIM_OC2_SetConfig+0x104>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d10d      	bne.n	800a7a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a78a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	011b      	lsls	r3, r3, #4
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	4313      	orrs	r3, r2
 800a796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a79e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a1e      	ldr	r2, [pc, #120]	; (800a81c <TIM_OC2_SetConfig+0x100>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d00f      	beq.n	800a7c8 <TIM_OC2_SetConfig+0xac>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a1d      	ldr	r2, [pc, #116]	; (800a820 <TIM_OC2_SetConfig+0x104>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d00b      	beq.n	800a7c8 <TIM_OC2_SetConfig+0xac>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a1c      	ldr	r2, [pc, #112]	; (800a824 <TIM_OC2_SetConfig+0x108>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d007      	beq.n	800a7c8 <TIM_OC2_SetConfig+0xac>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a1b      	ldr	r2, [pc, #108]	; (800a828 <TIM_OC2_SetConfig+0x10c>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d003      	beq.n	800a7c8 <TIM_OC2_SetConfig+0xac>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a1a      	ldr	r2, [pc, #104]	; (800a82c <TIM_OC2_SetConfig+0x110>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d113      	bne.n	800a7f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	621a      	str	r2, [r3, #32]
}
 800a80a:	bf00      	nop
 800a80c:	371c      	adds	r7, #28
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	feff8fff 	.word	0xfeff8fff
 800a81c:	40010000 	.word	0x40010000
 800a820:	40010400 	.word	0x40010400
 800a824:	40014000 	.word	0x40014000
 800a828:	40014400 	.word	0x40014400
 800a82c:	40014800 	.word	0x40014800

0800a830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a830:	b480      	push	{r7}
 800a832:	b087      	sub	sp, #28
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f023 0303 	bic.w	r3, r3, #3
 800a866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	4313      	orrs	r3, r2
 800a870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	021b      	lsls	r3, r3, #8
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	4313      	orrs	r3, r2
 800a884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a27      	ldr	r2, [pc, #156]	; (800a928 <TIM_OC3_SetConfig+0xf8>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d003      	beq.n	800a896 <TIM_OC3_SetConfig+0x66>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a26      	ldr	r2, [pc, #152]	; (800a92c <TIM_OC3_SetConfig+0xfc>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d10d      	bne.n	800a8b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a89c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	021b      	lsls	r3, r3, #8
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a1c      	ldr	r2, [pc, #112]	; (800a928 <TIM_OC3_SetConfig+0xf8>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d00f      	beq.n	800a8da <TIM_OC3_SetConfig+0xaa>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <TIM_OC3_SetConfig+0xfc>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d00b      	beq.n	800a8da <TIM_OC3_SetConfig+0xaa>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a1a      	ldr	r2, [pc, #104]	; (800a930 <TIM_OC3_SetConfig+0x100>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d007      	beq.n	800a8da <TIM_OC3_SetConfig+0xaa>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a19      	ldr	r2, [pc, #100]	; (800a934 <TIM_OC3_SetConfig+0x104>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d003      	beq.n	800a8da <TIM_OC3_SetConfig+0xaa>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a18      	ldr	r2, [pc, #96]	; (800a938 <TIM_OC3_SetConfig+0x108>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d113      	bne.n	800a902 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	011b      	lsls	r3, r3, #4
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	685a      	ldr	r2, [r3, #4]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	621a      	str	r2, [r3, #32]
}
 800a91c:	bf00      	nop
 800a91e:	371c      	adds	r7, #28
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	40010000 	.word	0x40010000
 800a92c:	40010400 	.word	0x40010400
 800a930:	40014000 	.word	0x40014000
 800a934:	40014400 	.word	0x40014400
 800a938:	40014800 	.word	0x40014800

0800a93c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	021b      	lsls	r3, r3, #8
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	031b      	lsls	r3, r3, #12
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	4313      	orrs	r3, r2
 800a992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a18      	ldr	r2, [pc, #96]	; (800a9f8 <TIM_OC4_SetConfig+0xbc>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d00f      	beq.n	800a9bc <TIM_OC4_SetConfig+0x80>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a17      	ldr	r2, [pc, #92]	; (800a9fc <TIM_OC4_SetConfig+0xc0>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d00b      	beq.n	800a9bc <TIM_OC4_SetConfig+0x80>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a16      	ldr	r2, [pc, #88]	; (800aa00 <TIM_OC4_SetConfig+0xc4>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d007      	beq.n	800a9bc <TIM_OC4_SetConfig+0x80>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a15      	ldr	r2, [pc, #84]	; (800aa04 <TIM_OC4_SetConfig+0xc8>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d003      	beq.n	800a9bc <TIM_OC4_SetConfig+0x80>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a14      	ldr	r2, [pc, #80]	; (800aa08 <TIM_OC4_SetConfig+0xcc>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d109      	bne.n	800a9d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	019b      	lsls	r3, r3, #6
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	621a      	str	r2, [r3, #32]
}
 800a9ea:	bf00      	nop
 800a9ec:	371c      	adds	r7, #28
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	40010000 	.word	0x40010000
 800a9fc:	40010400 	.word	0x40010400
 800aa00:	40014000 	.word	0x40014000
 800aa04:	40014400 	.word	0x40014400
 800aa08:	40014800 	.word	0x40014800

0800aa0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aa4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	041b      	lsls	r3, r3, #16
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a17      	ldr	r2, [pc, #92]	; (800aabc <TIM_OC5_SetConfig+0xb0>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00f      	beq.n	800aa82 <TIM_OC5_SetConfig+0x76>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a16      	ldr	r2, [pc, #88]	; (800aac0 <TIM_OC5_SetConfig+0xb4>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d00b      	beq.n	800aa82 <TIM_OC5_SetConfig+0x76>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a15      	ldr	r2, [pc, #84]	; (800aac4 <TIM_OC5_SetConfig+0xb8>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d007      	beq.n	800aa82 <TIM_OC5_SetConfig+0x76>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a14      	ldr	r2, [pc, #80]	; (800aac8 <TIM_OC5_SetConfig+0xbc>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d003      	beq.n	800aa82 <TIM_OC5_SetConfig+0x76>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a13      	ldr	r2, [pc, #76]	; (800aacc <TIM_OC5_SetConfig+0xc0>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d109      	bne.n	800aa96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	685a      	ldr	r2, [r3, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	621a      	str	r2, [r3, #32]
}
 800aab0:	bf00      	nop
 800aab2:	371c      	adds	r7, #28
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	40010000 	.word	0x40010000
 800aac0:	40010400 	.word	0x40010400
 800aac4:	40014000 	.word	0x40014000
 800aac8:	40014400 	.word	0x40014400
 800aacc:	40014800 	.word	0x40014800

0800aad0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aafe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	021b      	lsls	r3, r3, #8
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	051b      	lsls	r3, r3, #20
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a18      	ldr	r2, [pc, #96]	; (800ab84 <TIM_OC6_SetConfig+0xb4>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d00f      	beq.n	800ab48 <TIM_OC6_SetConfig+0x78>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a17      	ldr	r2, [pc, #92]	; (800ab88 <TIM_OC6_SetConfig+0xb8>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d00b      	beq.n	800ab48 <TIM_OC6_SetConfig+0x78>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a16      	ldr	r2, [pc, #88]	; (800ab8c <TIM_OC6_SetConfig+0xbc>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d007      	beq.n	800ab48 <TIM_OC6_SetConfig+0x78>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a15      	ldr	r2, [pc, #84]	; (800ab90 <TIM_OC6_SetConfig+0xc0>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_OC6_SetConfig+0x78>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a14      	ldr	r2, [pc, #80]	; (800ab94 <TIM_OC6_SetConfig+0xc4>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d109      	bne.n	800ab5c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ab4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	695b      	ldr	r3, [r3, #20]
 800ab54:	029b      	lsls	r3, r3, #10
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	685a      	ldr	r2, [r3, #4]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	621a      	str	r2, [r3, #32]
}
 800ab76:	bf00      	nop
 800ab78:	371c      	adds	r7, #28
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	40010000 	.word	0x40010000
 800ab88:	40010400 	.word	0x40010400
 800ab8c:	40014000 	.word	0x40014000
 800ab90:	40014400 	.word	0x40014400
 800ab94:	40014800 	.word	0x40014800

0800ab98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6a1b      	ldr	r3, [r3, #32]
 800aba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	f023 0201 	bic.w	r2, r3, #1
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	f023 030a 	bic.w	r3, r3, #10
 800abd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	4313      	orrs	r3, r2
 800abdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	621a      	str	r2, [r3, #32]
}
 800abea:	bf00      	nop
 800abec:	371c      	adds	r7, #28
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b087      	sub	sp, #28
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	f023 0210 	bic.w	r2, r3, #16
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	699b      	ldr	r3, [r3, #24]
 800ac12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	031b      	lsls	r3, r3, #12
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	011b      	lsls	r3, r3, #4
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	697a      	ldr	r2, [r7, #20]
 800ac42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	621a      	str	r2, [r3, #32]
}
 800ac4a:	bf00      	nop
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
	...

0800ac58 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4b09      	ldr	r3, [pc, #36]	; (800ac90 <TIM_ITRx_SetConfig+0x38>)
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	f043 0307 	orr.w	r3, r3, #7
 800ac7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	609a      	str	r2, [r3, #8]
}
 800ac82:	bf00      	nop
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	ffcfff8f 	.word	0xffcfff8f

0800ac94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
 800aca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	021a      	lsls	r2, r3, #8
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	431a      	orrs	r2, r3
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	4313      	orrs	r3, r2
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	609a      	str	r2, [r3, #8]
}
 800acc8:	bf00      	nop
 800acca:	371c      	adds	r7, #28
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b087      	sub	sp, #28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f003 031f 	and.w	r3, r3, #31
 800ace6:	2201      	movs	r2, #1
 800ace8:	fa02 f303 	lsl.w	r3, r2, r3
 800acec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6a1a      	ldr	r2, [r3, #32]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	43db      	mvns	r3, r3
 800acf6:	401a      	ands	r2, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6a1a      	ldr	r2, [r3, #32]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	f003 031f 	and.w	r3, r3, #31
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	fa01 f303 	lsl.w	r3, r1, r3
 800ad0c:	431a      	orrs	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	621a      	str	r2, [r3, #32]
}
 800ad12:	bf00      	nop
 800ad14:	371c      	adds	r7, #28
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
	...

0800ad20 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d109      	bne.n	800ad44 <HAL_TIMEx_PWMN_Start+0x24>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	bf14      	ite	ne
 800ad3c:	2301      	movne	r3, #1
 800ad3e:	2300      	moveq	r3, #0
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	e022      	b.n	800ad8a <HAL_TIMEx_PWMN_Start+0x6a>
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d109      	bne.n	800ad5e <HAL_TIMEx_PWMN_Start+0x3e>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	bf14      	ite	ne
 800ad56:	2301      	movne	r3, #1
 800ad58:	2300      	moveq	r3, #0
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	e015      	b.n	800ad8a <HAL_TIMEx_PWMN_Start+0x6a>
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d109      	bne.n	800ad78 <HAL_TIMEx_PWMN_Start+0x58>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	bf14      	ite	ne
 800ad70:	2301      	movne	r3, #1
 800ad72:	2300      	moveq	r3, #0
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	e008      	b.n	800ad8a <HAL_TIMEx_PWMN_Start+0x6a>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	bf14      	ite	ne
 800ad84:	2301      	movne	r3, #1
 800ad86:	2300      	moveq	r3, #0
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e040      	b.n	800ae14 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d104      	bne.n	800ada2 <HAL_TIMEx_PWMN_Start+0x82>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ada0:	e013      	b.n	800adca <HAL_TIMEx_PWMN_Start+0xaa>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d104      	bne.n	800adb2 <HAL_TIMEx_PWMN_Start+0x92>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2202      	movs	r2, #2
 800adac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adb0:	e00b      	b.n	800adca <HAL_TIMEx_PWMN_Start+0xaa>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b08      	cmp	r3, #8
 800adb6:	d104      	bne.n	800adc2 <HAL_TIMEx_PWMN_Start+0xa2>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2202      	movs	r2, #2
 800adbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800adc0:	e003      	b.n	800adca <HAL_TIMEx_PWMN_Start+0xaa>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2202      	movs	r2, #2
 800adc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2204      	movs	r2, #4
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	4618      	mov	r0, r3
 800add4:	f000 f948 	bl	800b068 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ade6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	689a      	ldr	r2, [r3, #8]
 800adee:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <HAL_TIMEx_PWMN_Start+0xfc>)
 800adf0:	4013      	ands	r3, r2
 800adf2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b06      	cmp	r3, #6
 800adf8:	d00b      	beq.n	800ae12 <HAL_TIMEx_PWMN_Start+0xf2>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae00:	d007      	beq.n	800ae12 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f042 0201 	orr.w	r2, r2, #1
 800ae10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	00010007 	.word	0x00010007

0800ae20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d101      	bne.n	800ae38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae34:	2302      	movs	r3, #2
 800ae36:	e068      	b.n	800af0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a2e      	ldr	r2, [pc, #184]	; (800af18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d004      	beq.n	800ae6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a2d      	ldr	r2, [pc, #180]	; (800af1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d108      	bne.n	800ae7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a1e      	ldr	r2, [pc, #120]	; (800af18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d01d      	beq.n	800aede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeaa:	d018      	beq.n	800aede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a1b      	ldr	r2, [pc, #108]	; (800af20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d013      	beq.n	800aede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a1a      	ldr	r2, [pc, #104]	; (800af24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00e      	beq.n	800aede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a18      	ldr	r2, [pc, #96]	; (800af28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d009      	beq.n	800aede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a13      	ldr	r2, [pc, #76]	; (800af1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d004      	beq.n	800aede <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a14      	ldr	r2, [pc, #80]	; (800af2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d10c      	bne.n	800aef8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	40010000 	.word	0x40010000
 800af1c:	40010400 	.word	0x40010400
 800af20:	40000400 	.word	0x40000400
 800af24:	40000800 	.word	0x40000800
 800af28:	40000c00 	.word	0x40000c00
 800af2c:	40001800 	.word	0x40001800

0800af30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af44:	2b01      	cmp	r3, #1
 800af46:	d101      	bne.n	800af4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af48:	2302      	movs	r3, #2
 800af4a:	e065      	b.n	800b018 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	4313      	orrs	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4313      	orrs	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	4313      	orrs	r3, r2
 800af98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb2:	4313      	orrs	r3, r2
 800afb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	041b      	lsls	r3, r3, #16
 800afc2:	4313      	orrs	r3, r2
 800afc4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a16      	ldr	r2, [pc, #88]	; (800b024 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d004      	beq.n	800afda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a14      	ldr	r2, [pc, #80]	; (800b028 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d115      	bne.n	800b006 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe4:	051b      	lsls	r3, r3, #20
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	4313      	orrs	r3, r2
 800b004:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr
 800b024:	40010000 	.word	0x40010000
 800b028:	40010400 	.word	0x40010400

0800b02c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b068:	b480      	push	{r7}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f003 031f 	and.w	r3, r3, #31
 800b07a:	2204      	movs	r2, #4
 800b07c:	fa02 f303 	lsl.w	r3, r2, r3
 800b080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6a1a      	ldr	r2, [r3, #32]
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	43db      	mvns	r3, r3
 800b08a:	401a      	ands	r2, r3
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6a1a      	ldr	r2, [r3, #32]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	f003 031f 	and.w	r3, r3, #31
 800b09a:	6879      	ldr	r1, [r7, #4]
 800b09c:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	621a      	str	r2, [r3, #32]
}
 800b0a6:	bf00      	nop
 800b0a8:	371c      	adds	r7, #28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
	...

0800b0b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	f107 001c 	add.w	r0, r7, #28
 800b0c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d120      	bne.n	800b10e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	4b25      	ldr	r3, [pc, #148]	; (800b174 <USB_CoreInit+0xc0>)
 800b0de:	4013      	ands	r3, r2
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d105      	bne.n	800b102 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f001 fabe 	bl	800c684 <USB_CoreReset>
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]
 800b10c:	e01a      	b.n	800b144 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 fab2 	bl	800c684 <USB_CoreReset>
 800b120:	4603      	mov	r3, r0
 800b122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	639a      	str	r2, [r3, #56]	; 0x38
 800b136:	e005      	b.n	800b144 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	2b01      	cmp	r3, #1
 800b148:	d10b      	bne.n	800b162 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f043 0206 	orr.w	r2, r3, #6
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	f043 0220 	orr.w	r2, r3, #32
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b162:	7bfb      	ldrb	r3, [r7, #15]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b16e:	b004      	add	sp, #16
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	ffbdffbf 	.word	0xffbdffbf

0800b178 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b178:	b480      	push	{r7}
 800b17a:	b087      	sub	sp, #28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	4613      	mov	r3, r2
 800b184:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b186:	79fb      	ldrb	r3, [r7, #7]
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d165      	bne.n	800b258 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	4a41      	ldr	r2, [pc, #260]	; (800b294 <USB_SetTurnaroundTime+0x11c>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d906      	bls.n	800b1a2 <USB_SetTurnaroundTime+0x2a>
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	4a40      	ldr	r2, [pc, #256]	; (800b298 <USB_SetTurnaroundTime+0x120>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d202      	bcs.n	800b1a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b19c:	230f      	movs	r3, #15
 800b19e:	617b      	str	r3, [r7, #20]
 800b1a0:	e062      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	4a3c      	ldr	r2, [pc, #240]	; (800b298 <USB_SetTurnaroundTime+0x120>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d306      	bcc.n	800b1b8 <USB_SetTurnaroundTime+0x40>
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	4a3b      	ldr	r2, [pc, #236]	; (800b29c <USB_SetTurnaroundTime+0x124>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d202      	bcs.n	800b1b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b1b2:	230e      	movs	r3, #14
 800b1b4:	617b      	str	r3, [r7, #20]
 800b1b6:	e057      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	4a38      	ldr	r2, [pc, #224]	; (800b29c <USB_SetTurnaroundTime+0x124>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d306      	bcc.n	800b1ce <USB_SetTurnaroundTime+0x56>
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	4a37      	ldr	r2, [pc, #220]	; (800b2a0 <USB_SetTurnaroundTime+0x128>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d202      	bcs.n	800b1ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b1c8:	230d      	movs	r3, #13
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	e04c      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	4a33      	ldr	r2, [pc, #204]	; (800b2a0 <USB_SetTurnaroundTime+0x128>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d306      	bcc.n	800b1e4 <USB_SetTurnaroundTime+0x6c>
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	4a32      	ldr	r2, [pc, #200]	; (800b2a4 <USB_SetTurnaroundTime+0x12c>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d802      	bhi.n	800b1e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b1de:	230c      	movs	r3, #12
 800b1e0:	617b      	str	r3, [r7, #20]
 800b1e2:	e041      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	4a2f      	ldr	r2, [pc, #188]	; (800b2a4 <USB_SetTurnaroundTime+0x12c>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d906      	bls.n	800b1fa <USB_SetTurnaroundTime+0x82>
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	4a2e      	ldr	r2, [pc, #184]	; (800b2a8 <USB_SetTurnaroundTime+0x130>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d802      	bhi.n	800b1fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b1f4:	230b      	movs	r3, #11
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	e036      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	4a2a      	ldr	r2, [pc, #168]	; (800b2a8 <USB_SetTurnaroundTime+0x130>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d906      	bls.n	800b210 <USB_SetTurnaroundTime+0x98>
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	4a29      	ldr	r2, [pc, #164]	; (800b2ac <USB_SetTurnaroundTime+0x134>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d802      	bhi.n	800b210 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b20a:	230a      	movs	r3, #10
 800b20c:	617b      	str	r3, [r7, #20]
 800b20e:	e02b      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	4a26      	ldr	r2, [pc, #152]	; (800b2ac <USB_SetTurnaroundTime+0x134>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d906      	bls.n	800b226 <USB_SetTurnaroundTime+0xae>
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	4a25      	ldr	r2, [pc, #148]	; (800b2b0 <USB_SetTurnaroundTime+0x138>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d202      	bcs.n	800b226 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b220:	2309      	movs	r3, #9
 800b222:	617b      	str	r3, [r7, #20]
 800b224:	e020      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	4a21      	ldr	r2, [pc, #132]	; (800b2b0 <USB_SetTurnaroundTime+0x138>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d306      	bcc.n	800b23c <USB_SetTurnaroundTime+0xc4>
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	4a20      	ldr	r2, [pc, #128]	; (800b2b4 <USB_SetTurnaroundTime+0x13c>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d802      	bhi.n	800b23c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b236:	2308      	movs	r3, #8
 800b238:	617b      	str	r3, [r7, #20]
 800b23a:	e015      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	4a1d      	ldr	r2, [pc, #116]	; (800b2b4 <USB_SetTurnaroundTime+0x13c>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d906      	bls.n	800b252 <USB_SetTurnaroundTime+0xda>
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	4a1c      	ldr	r2, [pc, #112]	; (800b2b8 <USB_SetTurnaroundTime+0x140>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d202      	bcs.n	800b252 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b24c:	2307      	movs	r3, #7
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	e00a      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b252:	2306      	movs	r3, #6
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	e007      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b258:	79fb      	ldrb	r3, [r7, #7]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d102      	bne.n	800b264 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b25e:	2309      	movs	r3, #9
 800b260:	617b      	str	r3, [r7, #20]
 800b262:	e001      	b.n	800b268 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b264:	2309      	movs	r3, #9
 800b266:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	68da      	ldr	r2, [r3, #12]
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	029b      	lsls	r3, r3, #10
 800b27c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b280:	431a      	orrs	r2, r3
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	371c      	adds	r7, #28
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	00d8acbf 	.word	0x00d8acbf
 800b298:	00e4e1c0 	.word	0x00e4e1c0
 800b29c:	00f42400 	.word	0x00f42400
 800b2a0:	01067380 	.word	0x01067380
 800b2a4:	011a499f 	.word	0x011a499f
 800b2a8:	01312cff 	.word	0x01312cff
 800b2ac:	014ca43f 	.word	0x014ca43f
 800b2b0:	016e3600 	.word	0x016e3600
 800b2b4:	01a6ab1f 	.word	0x01a6ab1f
 800b2b8:	01e84800 	.word	0x01e84800

0800b2bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	f043 0201 	orr.w	r2, r3, #1
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b083      	sub	sp, #12
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	f023 0201 	bic.w	r2, r3, #1
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b318:	78fb      	ldrb	r3, [r7, #3]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d106      	bne.n	800b32c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	60da      	str	r2, [r3, #12]
 800b32a:	e00b      	b.n	800b344 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d106      	bne.n	800b340 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	60da      	str	r2, [r3, #12]
 800b33e:	e001      	b.n	800b344 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e003      	b.n	800b34c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b344:	2032      	movs	r0, #50	; 0x32
 800b346:	f7f8 fc7d 	bl	8003c44 <HAL_Delay>

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b354:	b084      	sub	sp, #16
 800b356:	b580      	push	{r7, lr}
 800b358:	b086      	sub	sp, #24
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b36e:	2300      	movs	r3, #0
 800b370:	613b      	str	r3, [r7, #16]
 800b372:	e009      	b.n	800b388 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	3340      	adds	r3, #64	; 0x40
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	2200      	movs	r2, #0
 800b380:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	3301      	adds	r3, #1
 800b386:	613b      	str	r3, [r7, #16]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	2b0e      	cmp	r3, #14
 800b38c:	d9f2      	bls.n	800b374 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d11c      	bne.n	800b3ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3a2:	f043 0302 	orr.w	r3, r3, #2
 800b3a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	e005      	b.n	800b3da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	680b      	ldr	r3, [r1, #0]
 800b3f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d10c      	bne.n	800b41a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	2b00      	cmp	r3, #0
 800b404:	d104      	bne.n	800b410 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b406:	2100      	movs	r1, #0
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f949 	bl	800b6a0 <USB_SetDevSpeed>
 800b40e:	e008      	b.n	800b422 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b410:	2101      	movs	r1, #1
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f944 	bl	800b6a0 <USB_SetDevSpeed>
 800b418:	e003      	b.n	800b422 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b41a:	2103      	movs	r1, #3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f93f 	bl	800b6a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b422:	2110      	movs	r1, #16
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f8f3 	bl	800b610 <USB_FlushTxFifo>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f911 	bl	800b65c <USB_FlushRxFifo>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44a:	461a      	mov	r2, r3
 800b44c:	2300      	movs	r3, #0
 800b44e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b456:	461a      	mov	r2, r3
 800b458:	2300      	movs	r3, #0
 800b45a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b462:	461a      	mov	r2, r3
 800b464:	2300      	movs	r3, #0
 800b466:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b468:	2300      	movs	r3, #0
 800b46a:	613b      	str	r3, [r7, #16]
 800b46c:	e043      	b.n	800b4f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b484:	d118      	bne.n	800b4b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10a      	bne.n	800b4a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b498:	461a      	mov	r2, r3
 800b49a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	e013      	b.n	800b4ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	015a      	lsls	r2, r3, #5
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	e008      	b.n	800b4ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	015a      	lsls	r2, r3, #5
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	2300      	movs	r3, #0
 800b4da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	015a      	lsls	r2, r3, #5
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	613b      	str	r3, [r7, #16]
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f8:	693a      	ldr	r2, [r7, #16]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d3b7      	bcc.n	800b46e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4fe:	2300      	movs	r3, #0
 800b500:	613b      	str	r3, [r7, #16]
 800b502:	e043      	b.n	800b58c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b51a:	d118      	bne.n	800b54e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10a      	bne.n	800b538 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52e:	461a      	mov	r2, r3
 800b530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	e013      	b.n	800b560 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	015a      	lsls	r2, r3, #5
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4413      	add	r3, r2
 800b540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b544:	461a      	mov	r2, r3
 800b546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	e008      	b.n	800b560 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	015a      	lsls	r2, r3, #5
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	4413      	add	r3, r2
 800b556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b55a:	461a      	mov	r2, r3
 800b55c:	2300      	movs	r3, #0
 800b55e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b56c:	461a      	mov	r2, r3
 800b56e:	2300      	movs	r3, #0
 800b570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	015a      	lsls	r2, r3, #5
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	4413      	add	r3, r2
 800b57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b57e:	461a      	mov	r2, r3
 800b580:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b584:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	3301      	adds	r3, #1
 800b58a:	613b      	str	r3, [r7, #16]
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	429a      	cmp	r2, r3
 800b592:	d3b7      	bcc.n	800b504 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b5b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d105      	bne.n	800b5c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	f043 0210 	orr.w	r2, r3, #16
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	699a      	ldr	r2, [r3, #24]
 800b5cc:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <USB_DevInit+0x2b4>)
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d005      	beq.n	800b5e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	f043 0208 	orr.w	r2, r3, #8
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d105      	bne.n	800b5f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	699a      	ldr	r2, [r3, #24]
 800b5f0:	4b06      	ldr	r3, [pc, #24]	; (800b60c <USB_DevInit+0x2b8>)
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b604:	b004      	add	sp, #16
 800b606:	4770      	bx	lr
 800b608:	803c3800 	.word	0x803c3800
 800b60c:	40000004 	.word	0x40000004

0800b610 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	019b      	lsls	r3, r3, #6
 800b622:	f043 0220 	orr.w	r2, r3, #32
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3301      	adds	r3, #1
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4a09      	ldr	r2, [pc, #36]	; (800b658 <USB_FlushTxFifo+0x48>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d901      	bls.n	800b63c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b638:	2303      	movs	r3, #3
 800b63a:	e006      	b.n	800b64a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	f003 0320 	and.w	r3, r3, #32
 800b644:	2b20      	cmp	r3, #32
 800b646:	d0f0      	beq.n	800b62a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	00030d40 	.word	0x00030d40

0800b65c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2210      	movs	r2, #16
 800b66c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3301      	adds	r3, #1
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	4a09      	ldr	r2, [pc, #36]	; (800b69c <USB_FlushRxFifo+0x40>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d901      	bls.n	800b680 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e006      	b.n	800b68e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	f003 0310 	and.w	r3, r3, #16
 800b688:	2b10      	cmp	r3, #16
 800b68a:	d0f0      	beq.n	800b66e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	00030d40 	.word	0x00030d40

0800b6a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	78fb      	ldrb	r3, [r7, #3]
 800b6ba:	68f9      	ldr	r1, [r7, #12]
 800b6bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b087      	sub	sp, #28
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	f003 0306 	and.w	r3, r3, #6
 800b6ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	75fb      	strb	r3, [r7, #23]
 800b6f6:	e00a      	b.n	800b70e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d002      	beq.n	800b704 <USB_GetDevSpeed+0x32>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b06      	cmp	r3, #6
 800b702:	d102      	bne.n	800b70a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b704:	2302      	movs	r3, #2
 800b706:	75fb      	strb	r3, [r7, #23]
 800b708:	e001      	b.n	800b70e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b70a:	230f      	movs	r3, #15
 800b70c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b710:	4618      	mov	r0, r3
 800b712:	371c      	adds	r7, #28
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	785b      	ldrb	r3, [r3, #1]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d139      	bne.n	800b7ac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b73e:	69da      	ldr	r2, [r3, #28]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	f003 030f 	and.w	r3, r3, #15
 800b748:	2101      	movs	r1, #1
 800b74a:	fa01 f303 	lsl.w	r3, r1, r3
 800b74e:	b29b      	uxth	r3, r3
 800b750:	68f9      	ldr	r1, [r7, #12]
 800b752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b756:	4313      	orrs	r3, r2
 800b758:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	015a      	lsls	r2, r3, #5
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	4413      	add	r3, r2
 800b762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d153      	bne.n	800b818 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	78db      	ldrb	r3, [r3, #3]
 800b78a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b78c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	059b      	lsls	r3, r3, #22
 800b792:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b794:	431a      	orrs	r2, r3
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	0159      	lsls	r1, r3, #5
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	440b      	add	r3, r1
 800b79e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4b20      	ldr	r3, [pc, #128]	; (800b828 <USB_ActivateEndpoint+0x10c>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	600b      	str	r3, [r1, #0]
 800b7aa:	e035      	b.n	800b818 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b2:	69da      	ldr	r2, [r3, #28]
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	f003 030f 	and.w	r3, r3, #15
 800b7bc:	2101      	movs	r1, #1
 800b7be:	fa01 f303 	lsl.w	r3, r1, r3
 800b7c2:	041b      	lsls	r3, r3, #16
 800b7c4:	68f9      	ldr	r1, [r7, #12]
 800b7c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	015a      	lsls	r2, r3, #5
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d119      	bne.n	800b818 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	015a      	lsls	r2, r3, #5
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	78db      	ldrb	r3, [r3, #3]
 800b7fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b800:	430b      	orrs	r3, r1
 800b802:	431a      	orrs	r2, r3
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	0159      	lsls	r1, r3, #5
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	440b      	add	r3, r1
 800b80c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b810:	4619      	mov	r1, r3
 800b812:	4b05      	ldr	r3, [pc, #20]	; (800b828 <USB_ActivateEndpoint+0x10c>)
 800b814:	4313      	orrs	r3, r2
 800b816:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	10008000 	.word	0x10008000

0800b82c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	785b      	ldrb	r3, [r3, #1]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d161      	bne.n	800b90c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	015a      	lsls	r2, r3, #5
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	4413      	add	r3, r2
 800b850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b85a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b85e:	d11f      	bne.n	800b8a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	4413      	add	r3, r2
 800b868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	0151      	lsls	r1, r2, #5
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	440a      	add	r2, r1
 800b876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b87a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b87e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	0151      	lsls	r1, r2, #5
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	440a      	add	r2, r1
 800b896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b89a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b89e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	f003 030f 	and.w	r3, r3, #15
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	43db      	mvns	r3, r3
 800b8ba:	68f9      	ldr	r1, [r7, #12]
 800b8bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ca:	69da      	ldr	r2, [r3, #28]
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	f003 030f 	and.w	r3, r3, #15
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	43db      	mvns	r3, r3
 800b8de:	68f9      	ldr	r1, [r7, #12]
 800b8e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	0159      	lsls	r1, r3, #5
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	440b      	add	r3, r1
 800b8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b902:	4619      	mov	r1, r3
 800b904:	4b35      	ldr	r3, [pc, #212]	; (800b9dc <USB_DeactivateEndpoint+0x1b0>)
 800b906:	4013      	ands	r3, r2
 800b908:	600b      	str	r3, [r1, #0]
 800b90a:	e060      	b.n	800b9ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b91e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b922:	d11f      	bne.n	800b964 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	015a      	lsls	r2, r3, #5
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	4413      	add	r3, r2
 800b92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	0151      	lsls	r1, r2, #5
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	440a      	add	r2, r1
 800b93a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b93e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b942:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	0151      	lsls	r1, r2, #5
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	440a      	add	r2, r1
 800b95a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b95e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b962:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b96a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	f003 030f 	and.w	r3, r3, #15
 800b974:	2101      	movs	r1, #1
 800b976:	fa01 f303 	lsl.w	r3, r1, r3
 800b97a:	041b      	lsls	r3, r3, #16
 800b97c:	43db      	mvns	r3, r3
 800b97e:	68f9      	ldr	r1, [r7, #12]
 800b980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b984:	4013      	ands	r3, r2
 800b986:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b98e:	69da      	ldr	r2, [r3, #28]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	f003 030f 	and.w	r3, r3, #15
 800b998:	2101      	movs	r1, #1
 800b99a:	fa01 f303 	lsl.w	r3, r1, r3
 800b99e:	041b      	lsls	r3, r3, #16
 800b9a0:	43db      	mvns	r3, r3
 800b9a2:	68f9      	ldr	r1, [r7, #12]
 800b9a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	015a      	lsls	r2, r3, #5
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	0159      	lsls	r1, r3, #5
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	440b      	add	r3, r1
 800b9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <USB_DeactivateEndpoint+0x1b4>)
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	ec337800 	.word	0xec337800
 800b9e0:	eff37800 	.word	0xeff37800

0800b9e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08a      	sub	sp, #40	; 0x28
 800b9e8:	af02      	add	r7, sp, #8
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	785b      	ldrb	r3, [r3, #1]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	f040 8163 	bne.w	800bccc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d132      	bne.n	800ba74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba1a:	691a      	ldr	r2, [r3, #16]
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	0159      	lsls	r1, r3, #5
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	440b      	add	r3, r1
 800ba24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4ba5      	ldr	r3, [pc, #660]	; (800bcc0 <USB_EPStartXfer+0x2dc>)
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	015a      	lsls	r2, r3, #5
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	4413      	add	r3, r2
 800ba38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	69ba      	ldr	r2, [r7, #24]
 800ba40:	0151      	lsls	r1, r2, #5
 800ba42:	69fa      	ldr	r2, [r7, #28]
 800ba44:	440a      	add	r2, r1
 800ba46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba5c:	691a      	ldr	r2, [r3, #16]
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	0159      	lsls	r1, r3, #5
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	440b      	add	r3, r1
 800ba66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4b95      	ldr	r3, [pc, #596]	; (800bcc4 <USB_EPStartXfer+0x2e0>)
 800ba6e:	4013      	ands	r3, r2
 800ba70:	610b      	str	r3, [r1, #16]
 800ba72:	e074      	b.n	800bb5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba80:	691a      	ldr	r2, [r3, #16]
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	0159      	lsls	r1, r3, #5
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	440b      	add	r3, r1
 800ba8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4b8c      	ldr	r3, [pc, #560]	; (800bcc4 <USB_EPStartXfer+0x2e0>)
 800ba92:	4013      	ands	r3, r2
 800ba94:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa2:	691a      	ldr	r2, [r3, #16]
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	0159      	lsls	r1, r3, #5
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	440b      	add	r3, r1
 800baac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab0:	4619      	mov	r1, r3
 800bab2:	4b83      	ldr	r3, [pc, #524]	; (800bcc0 <USB_EPStartXfer+0x2dc>)
 800bab4:	4013      	ands	r3, r2
 800bab6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	015a      	lsls	r2, r3, #5
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	4413      	add	r3, r2
 800bac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac4:	691a      	ldr	r2, [r3, #16]
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	6959      	ldr	r1, [r3, #20]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	440b      	add	r3, r1
 800bad0:	1e59      	subs	r1, r3, #1
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	fbb1 f3f3 	udiv	r3, r1, r3
 800bada:	04d9      	lsls	r1, r3, #19
 800badc:	4b7a      	ldr	r3, [pc, #488]	; (800bcc8 <USB_EPStartXfer+0x2e4>)
 800bade:	400b      	ands	r3, r1
 800bae0:	69b9      	ldr	r1, [r7, #24]
 800bae2:	0148      	lsls	r0, r1, #5
 800bae4:	69f9      	ldr	r1, [r7, #28]
 800bae6:	4401      	add	r1, r0
 800bae8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800baec:	4313      	orrs	r3, r2
 800baee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bafc:	691a      	ldr	r2, [r3, #16]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb06:	69b9      	ldr	r1, [r7, #24]
 800bb08:	0148      	lsls	r0, r1, #5
 800bb0a:	69f9      	ldr	r1, [r7, #28]
 800bb0c:	4401      	add	r1, r0
 800bb0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bb12:	4313      	orrs	r3, r2
 800bb14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	78db      	ldrb	r3, [r3, #3]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d11f      	bne.n	800bb5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	015a      	lsls	r2, r3, #5
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	4413      	add	r3, r2
 800bb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	69ba      	ldr	r2, [r7, #24]
 800bb2e:	0151      	lsls	r1, r2, #5
 800bb30:	69fa      	ldr	r2, [r7, #28]
 800bb32:	440a      	add	r2, r1
 800bb34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bb3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	015a      	lsls	r2, r3, #5
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	4413      	add	r3, r2
 800bb46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	69ba      	ldr	r2, [r7, #24]
 800bb4e:	0151      	lsls	r1, r2, #5
 800bb50:	69fa      	ldr	r2, [r7, #28]
 800bb52:	440a      	add	r2, r1
 800bb54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d14b      	bne.n	800bbfc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d009      	beq.n	800bb80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	015a      	lsls	r2, r3, #5
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	4413      	add	r3, r2
 800bb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb78:	461a      	mov	r2, r3
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	78db      	ldrb	r3, [r3, #3]
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d128      	bne.n	800bbda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d110      	bne.n	800bbba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	015a      	lsls	r2, r3, #5
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	4413      	add	r3, r2
 800bba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	0151      	lsls	r1, r2, #5
 800bbaa:	69fa      	ldr	r2, [r7, #28]
 800bbac:	440a      	add	r2, r1
 800bbae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	e00f      	b.n	800bbda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	015a      	lsls	r2, r3, #5
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	69ba      	ldr	r2, [r7, #24]
 800bbca:	0151      	lsls	r1, r2, #5
 800bbcc:	69fa      	ldr	r2, [r7, #28]
 800bbce:	440a      	add	r2, r1
 800bbd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	015a      	lsls	r2, r3, #5
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	69ba      	ldr	r2, [r7, #24]
 800bbea:	0151      	lsls	r1, r2, #5
 800bbec:	69fa      	ldr	r2, [r7, #28]
 800bbee:	440a      	add	r2, r1
 800bbf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	e133      	b.n	800be64 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	015a      	lsls	r2, r3, #5
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	4413      	add	r3, r2
 800bc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	69ba      	ldr	r2, [r7, #24]
 800bc0c:	0151      	lsls	r1, r2, #5
 800bc0e:	69fa      	ldr	r2, [r7, #28]
 800bc10:	440a      	add	r2, r1
 800bc12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	78db      	ldrb	r3, [r3, #3]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d015      	beq.n	800bc50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 811b 	beq.w	800be64 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	f003 030f 	and.w	r3, r3, #15
 800bc3e:	2101      	movs	r1, #1
 800bc40:	fa01 f303 	lsl.w	r3, r1, r3
 800bc44:	69f9      	ldr	r1, [r7, #28]
 800bc46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	634b      	str	r3, [r1, #52]	; 0x34
 800bc4e:	e109      	b.n	800be64 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d110      	bne.n	800bc82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	69ba      	ldr	r2, [r7, #24]
 800bc70:	0151      	lsls	r1, r2, #5
 800bc72:	69fa      	ldr	r2, [r7, #28]
 800bc74:	440a      	add	r2, r1
 800bc76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	e00f      	b.n	800bca2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	69ba      	ldr	r2, [r7, #24]
 800bc92:	0151      	lsls	r1, r2, #5
 800bc94:	69fa      	ldr	r2, [r7, #28]
 800bc96:	440a      	add	r2, r1
 800bc98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bca0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	68d9      	ldr	r1, [r3, #12]
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	781a      	ldrb	r2, [r3, #0]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	b298      	uxth	r0, r3
 800bcb0:	79fb      	ldrb	r3, [r7, #7]
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f000 fa38 	bl	800c12c <USB_WritePacket>
 800bcbc:	e0d2      	b.n	800be64 <USB_EPStartXfer+0x480>
 800bcbe:	bf00      	nop
 800bcc0:	e007ffff 	.word	0xe007ffff
 800bcc4:	fff80000 	.word	0xfff80000
 800bcc8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	015a      	lsls	r2, r3, #5
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd8:	691a      	ldr	r2, [r3, #16]
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	0159      	lsls	r1, r3, #5
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	440b      	add	r3, r1
 800bce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce6:	4619      	mov	r1, r3
 800bce8:	4b61      	ldr	r3, [pc, #388]	; (800be70 <USB_EPStartXfer+0x48c>)
 800bcea:	4013      	ands	r3, r2
 800bcec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfa:	691a      	ldr	r2, [r3, #16]
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	0159      	lsls	r1, r3, #5
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	440b      	add	r3, r1
 800bd04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4b5a      	ldr	r3, [pc, #360]	; (800be74 <USB_EPStartXfer+0x490>)
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d123      	bne.n	800bd60 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd24:	691a      	ldr	r2, [r3, #16]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd2e:	69b9      	ldr	r1, [r7, #24]
 800bd30:	0148      	lsls	r0, r1, #5
 800bd32:	69f9      	ldr	r1, [r7, #28]
 800bd34:	4401      	add	r1, r0
 800bd36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	0151      	lsls	r1, r2, #5
 800bd50:	69fa      	ldr	r2, [r7, #28]
 800bd52:	440a      	add	r2, r1
 800bd54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd5c:	6113      	str	r3, [r2, #16]
 800bd5e:	e033      	b.n	800bdc8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	695a      	ldr	r2, [r3, #20]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	4413      	add	r3, r2
 800bd6a:	1e5a      	subs	r2, r3, #1
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd74:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd82:	691a      	ldr	r2, [r3, #16]
 800bd84:	8afb      	ldrh	r3, [r7, #22]
 800bd86:	04d9      	lsls	r1, r3, #19
 800bd88:	4b3b      	ldr	r3, [pc, #236]	; (800be78 <USB_EPStartXfer+0x494>)
 800bd8a:	400b      	ands	r3, r1
 800bd8c:	69b9      	ldr	r1, [r7, #24]
 800bd8e:	0148      	lsls	r0, r1, #5
 800bd90:	69f9      	ldr	r1, [r7, #28]
 800bd92:	4401      	add	r1, r0
 800bd94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda8:	691a      	ldr	r2, [r3, #16]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	8af9      	ldrh	r1, [r7, #22]
 800bdb0:	fb01 f303 	mul.w	r3, r1, r3
 800bdb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdb8:	69b9      	ldr	r1, [r7, #24]
 800bdba:	0148      	lsls	r0, r1, #5
 800bdbc:	69f9      	ldr	r1, [r7, #28]
 800bdbe:	4401      	add	r1, r0
 800bdc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bdc8:	79fb      	ldrb	r3, [r7, #7]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d10d      	bne.n	800bdea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d009      	beq.n	800bdea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	68d9      	ldr	r1, [r3, #12]
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	015a      	lsls	r2, r3, #5
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	4413      	add	r3, r2
 800bde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde6:	460a      	mov	r2, r1
 800bde8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	78db      	ldrb	r3, [r3, #3]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d128      	bne.n	800be44 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d110      	bne.n	800be24 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	015a      	lsls	r2, r3, #5
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	4413      	add	r3, r2
 800be0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	0151      	lsls	r1, r2, #5
 800be14:	69fa      	ldr	r2, [r7, #28]
 800be16:	440a      	add	r2, r1
 800be18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	e00f      	b.n	800be44 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	015a      	lsls	r2, r3, #5
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	4413      	add	r3, r2
 800be2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69ba      	ldr	r2, [r7, #24]
 800be34:	0151      	lsls	r1, r2, #5
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	440a      	add	r2, r1
 800be3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	015a      	lsls	r2, r3, #5
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	4413      	add	r3, r2
 800be4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	69ba      	ldr	r2, [r7, #24]
 800be54:	0151      	lsls	r1, r2, #5
 800be56:	69fa      	ldr	r2, [r7, #28]
 800be58:	440a      	add	r2, r1
 800be5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3720      	adds	r7, #32
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	fff80000 	.word	0xfff80000
 800be74:	e007ffff 	.word	0xe007ffff
 800be78:	1ff80000 	.word	0x1ff80000

0800be7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	4613      	mov	r3, r2
 800be88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	785b      	ldrb	r3, [r3, #1]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	f040 80cd 	bne.w	800c038 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d132      	bne.n	800bf0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	015a      	lsls	r2, r3, #5
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	4413      	add	r3, r2
 800beae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb2:	691a      	ldr	r2, [r3, #16]
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	0159      	lsls	r1, r3, #5
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	440b      	add	r3, r1
 800bebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec0:	4619      	mov	r1, r3
 800bec2:	4b98      	ldr	r3, [pc, #608]	; (800c124 <USB_EP0StartXfer+0x2a8>)
 800bec4:	4013      	ands	r3, r2
 800bec6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	015a      	lsls	r2, r3, #5
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	4413      	add	r3, r2
 800bed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	693a      	ldr	r2, [r7, #16]
 800bed8:	0151      	lsls	r1, r2, #5
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	440a      	add	r2, r1
 800bede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bee6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	015a      	lsls	r2, r3, #5
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	4413      	add	r3, r2
 800bef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef4:	691a      	ldr	r2, [r3, #16]
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	0159      	lsls	r1, r3, #5
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	440b      	add	r3, r1
 800befe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf02:	4619      	mov	r1, r3
 800bf04:	4b88      	ldr	r3, [pc, #544]	; (800c128 <USB_EP0StartXfer+0x2ac>)
 800bf06:	4013      	ands	r3, r2
 800bf08:	610b      	str	r3, [r1, #16]
 800bf0a:	e04e      	b.n	800bfaa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf18:	691a      	ldr	r2, [r3, #16]
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	0159      	lsls	r1, r3, #5
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	440b      	add	r3, r1
 800bf22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf26:	4619      	mov	r1, r3
 800bf28:	4b7f      	ldr	r3, [pc, #508]	; (800c128 <USB_EP0StartXfer+0x2ac>)
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf3a:	691a      	ldr	r2, [r3, #16]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	0159      	lsls	r1, r3, #5
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	440b      	add	r3, r1
 800bf44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4b76      	ldr	r3, [pc, #472]	; (800c124 <USB_EP0StartXfer+0x2a8>)
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	695a      	ldr	r2, [r3, #20]
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d903      	bls.n	800bf64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	689a      	ldr	r2, [r3, #8]
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	015a      	lsls	r2, r3, #5
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	0151      	lsls	r1, r2, #5
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	440a      	add	r2, r1
 800bf7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	015a      	lsls	r2, r3, #5
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf90:	691a      	ldr	r2, [r3, #16]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf9a:	6939      	ldr	r1, [r7, #16]
 800bf9c:	0148      	lsls	r0, r1, #5
 800bf9e:	6979      	ldr	r1, [r7, #20]
 800bfa0:	4401      	add	r1, r0
 800bfa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bfaa:	79fb      	ldrb	r3, [r7, #7]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d11e      	bne.n	800bfee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d009      	beq.n	800bfcc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	015a      	lsls	r2, r3, #5
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	015a      	lsls	r2, r3, #5
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	0151      	lsls	r1, r2, #5
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	440a      	add	r2, r1
 800bfe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfe6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	e092      	b.n	800c114 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	693a      	ldr	r2, [r7, #16]
 800bffe:	0151      	lsls	r1, r2, #5
 800c000:	697a      	ldr	r2, [r7, #20]
 800c002:	440a      	add	r2, r1
 800c004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c008:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c00c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d07e      	beq.n	800c114 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	f003 030f 	and.w	r3, r3, #15
 800c026:	2101      	movs	r1, #1
 800c028:	fa01 f303 	lsl.w	r3, r1, r3
 800c02c:	6979      	ldr	r1, [r7, #20]
 800c02e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c032:	4313      	orrs	r3, r2
 800c034:	634b      	str	r3, [r1, #52]	; 0x34
 800c036:	e06d      	b.n	800c114 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	015a      	lsls	r2, r3, #5
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	4413      	add	r3, r2
 800c040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c044:	691a      	ldr	r2, [r3, #16]
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	0159      	lsls	r1, r3, #5
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	440b      	add	r3, r1
 800c04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c052:	4619      	mov	r1, r3
 800c054:	4b34      	ldr	r3, [pc, #208]	; (800c128 <USB_EP0StartXfer+0x2ac>)
 800c056:	4013      	ands	r3, r2
 800c058:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	015a      	lsls	r2, r3, #5
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	4413      	add	r3, r2
 800c062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c066:	691a      	ldr	r2, [r3, #16]
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	0159      	lsls	r1, r3, #5
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	440b      	add	r3, r1
 800c070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c074:	4619      	mov	r1, r3
 800c076:	4b2b      	ldr	r3, [pc, #172]	; (800c124 <USB_EP0StartXfer+0x2a8>)
 800c078:	4013      	ands	r3, r2
 800c07a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	695b      	ldr	r3, [r3, #20]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d003      	beq.n	800c08c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	689a      	ldr	r2, [r3, #8]
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	015a      	lsls	r2, r3, #5
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	4413      	add	r3, r2
 800c094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	0151      	lsls	r1, r2, #5
 800c09e:	697a      	ldr	r2, [r7, #20]
 800c0a0:	440a      	add	r2, r1
 800c0a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	015a      	lsls	r2, r3, #5
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0b8:	691a      	ldr	r2, [r3, #16]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0c2:	6939      	ldr	r1, [r7, #16]
 800c0c4:	0148      	lsls	r0, r1, #5
 800c0c6:	6979      	ldr	r1, [r7, #20]
 800c0c8:	4401      	add	r1, r0
 800c0ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c0d2:	79fb      	ldrb	r3, [r7, #7]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d10d      	bne.n	800c0f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d009      	beq.n	800c0f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	68d9      	ldr	r1, [r3, #12]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	015a      	lsls	r2, r3, #5
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0f0:	460a      	mov	r2, r1
 800c0f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	693a      	ldr	r2, [r7, #16]
 800c104:	0151      	lsls	r1, r2, #5
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	440a      	add	r2, r1
 800c10a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c10e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	371c      	adds	r7, #28
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	e007ffff 	.word	0xe007ffff
 800c128:	fff80000 	.word	0xfff80000

0800c12c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b089      	sub	sp, #36	; 0x24
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	4611      	mov	r1, r2
 800c138:	461a      	mov	r2, r3
 800c13a:	460b      	mov	r3, r1
 800c13c:	71fb      	strb	r3, [r7, #7]
 800c13e:	4613      	mov	r3, r2
 800c140:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c14a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d11a      	bne.n	800c188 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c152:	88bb      	ldrh	r3, [r7, #4]
 800c154:	3303      	adds	r3, #3
 800c156:	089b      	lsrs	r3, r3, #2
 800c158:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c15a:	2300      	movs	r3, #0
 800c15c:	61bb      	str	r3, [r7, #24]
 800c15e:	e00f      	b.n	800c180 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c160:	79fb      	ldrb	r3, [r7, #7]
 800c162:	031a      	lsls	r2, r3, #12
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	4413      	add	r3, r2
 800c168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c16c:	461a      	mov	r2, r3
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	3304      	adds	r3, #4
 800c178:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	3301      	adds	r3, #1
 800c17e:	61bb      	str	r3, [r7, #24]
 800c180:	69ba      	ldr	r2, [r7, #24]
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	429a      	cmp	r2, r3
 800c186:	d3eb      	bcc.n	800c160 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3724      	adds	r7, #36	; 0x24
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c196:	b480      	push	{r7}
 800c198:	b089      	sub	sp, #36	; 0x24
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c1ac:	88fb      	ldrh	r3, [r7, #6]
 800c1ae:	3303      	adds	r3, #3
 800c1b0:	089b      	lsrs	r3, r3, #2
 800c1b2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	61bb      	str	r3, [r7, #24]
 800c1b8:	e00b      	b.n	800c1d2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	601a      	str	r2, [r3, #0]
    pDest++;
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	61bb      	str	r3, [r7, #24]
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d3ef      	bcc.n	800c1ba <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c1da:	69fb      	ldr	r3, [r7, #28]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3724      	adds	r7, #36	; 0x24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	785b      	ldrb	r3, [r3, #1]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d12c      	bne.n	800c25e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	015a      	lsls	r2, r3, #5
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	4413      	add	r3, r2
 800c20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	db12      	blt.n	800c23c <USB_EPSetStall+0x54>
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00f      	beq.n	800c23c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	0151      	lsls	r1, r2, #5
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	440a      	add	r2, r1
 800c232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c236:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c23a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	0151      	lsls	r1, r2, #5
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	440a      	add	r2, r1
 800c252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c256:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c25a:	6013      	str	r3, [r2, #0]
 800c25c:	e02b      	b.n	800c2b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	015a      	lsls	r2, r3, #5
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4413      	add	r3, r2
 800c266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	db12      	blt.n	800c296 <USB_EPSetStall+0xae>
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00f      	beq.n	800c296 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	015a      	lsls	r2, r3, #5
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	4413      	add	r3, r2
 800c27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	0151      	lsls	r1, r2, #5
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	440a      	add	r2, r1
 800c28c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c294:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	015a      	lsls	r2, r3, #5
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	0151      	lsls	r1, r2, #5
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	440a      	add	r2, r1
 800c2ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3714      	adds	r7, #20
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	785b      	ldrb	r3, [r3, #1]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d128      	bne.n	800c332 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	015a      	lsls	r2, r3, #5
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	0151      	lsls	r1, r2, #5
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	440a      	add	r2, r1
 800c2f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	78db      	ldrb	r3, [r3, #3]
 800c304:	2b03      	cmp	r3, #3
 800c306:	d003      	beq.n	800c310 <USB_EPClearStall+0x4c>
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	78db      	ldrb	r3, [r3, #3]
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d138      	bne.n	800c382 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	015a      	lsls	r2, r3, #5
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	4413      	add	r3, r2
 800c318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	0151      	lsls	r1, r2, #5
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	440a      	add	r2, r1
 800c326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c32a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	e027      	b.n	800c382 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	0151      	lsls	r1, r2, #5
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	440a      	add	r2, r1
 800c348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c34c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c350:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	78db      	ldrb	r3, [r3, #3]
 800c356:	2b03      	cmp	r3, #3
 800c358:	d003      	beq.n	800c362 <USB_EPClearStall+0x9e>
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	78db      	ldrb	r3, [r3, #3]
 800c35e:	2b02      	cmp	r3, #2
 800c360:	d10f      	bne.n	800c382 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	015a      	lsls	r2, r3, #5
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	4413      	add	r3, r2
 800c36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	0151      	lsls	r1, r2, #5
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	440a      	add	r2, r1
 800c378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c37c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c380:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c3b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	78fb      	ldrb	r3, [r7, #3]
 800c3be:	011b      	lsls	r3, r3, #4
 800c3c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c3c4:	68f9      	ldr	r1, [r7, #12]
 800c3c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3f6:	f023 0302 	bic.w	r3, r3, #2
 800c3fa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c3fc:	2003      	movs	r0, #3
 800c3fe:	f7f7 fc21 	bl	8003c44 <HAL_Delay>

  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c426:	f043 0302 	orr.w	r3, r3, #2
 800c42a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c42c:	2003      	movs	r0, #3
 800c42e:	f7f7 fc09 	bl	8003c44 <HAL_Delay>

  return HAL_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	4013      	ands	r3, r2
 800c452:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c454:	68fb      	ldr	r3, [r7, #12]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c462:	b480      	push	{r7}
 800c464:	b085      	sub	sp, #20
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c47e:	69db      	ldr	r3, [r3, #28]
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	4013      	ands	r3, r2
 800c484:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	0c1b      	lsrs	r3, r3, #16
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c496:	b480      	push	{r7}
 800c498:	b085      	sub	sp, #20
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a8:	699b      	ldr	r3, [r3, #24]
 800c4aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4b2:	69db      	ldr	r3, [r3, #28]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	b29b      	uxth	r3, r3
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr

0800c4ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c4ca:	b480      	push	{r7}
 800c4cc:	b085      	sub	sp, #20
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c4da:	78fb      	ldrb	r3, [r7, #3]
 800c4dc:	015a      	lsls	r2, r3, #5
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c4f8:	68bb      	ldr	r3, [r7, #8]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c506:	b480      	push	{r7}
 800c508:	b087      	sub	sp, #28
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	460b      	mov	r3, r1
 800c510:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c528:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c52a:	78fb      	ldrb	r3, [r7, #3]
 800c52c:	f003 030f 	and.w	r3, r3, #15
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	fa22 f303 	lsr.w	r3, r2, r3
 800c536:	01db      	lsls	r3, r3, #7
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	4413      	add	r3, r2
 800c548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	693a      	ldr	r2, [r7, #16]
 800c550:	4013      	ands	r3, r2
 800c552:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c554:	68bb      	ldr	r3, [r7, #8]
}
 800c556:	4618      	mov	r0, r3
 800c558:	371c      	adds	r7, #28
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c562:	b480      	push	{r7}
 800c564:	b083      	sub	sp, #12
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	f003 0301 	and.w	r3, r3, #1
}
 800c572:	4618      	mov	r0, r3
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
	...

0800c580 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c59a:	4619      	mov	r1, r3
 800c59c:	4b09      	ldr	r3, [pc, #36]	; (800c5c4 <USB_ActivateSetup+0x44>)
 800c59e:	4013      	ands	r3, r2
 800c5a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	fffff800 	.word	0xfffff800

0800c5c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	607a      	str	r2, [r7, #4]
 800c5d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	333c      	adds	r3, #60	; 0x3c
 800c5de:	3304      	adds	r3, #4
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	4a26      	ldr	r2, [pc, #152]	; (800c680 <USB_EP0_OutStart+0xb8>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d90a      	bls.n	800c602 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5fc:	d101      	bne.n	800c602 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c5fe:	2300      	movs	r3, #0
 800c600:	e037      	b.n	800c672 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c608:	461a      	mov	r2, r3
 800c60a:	2300      	movs	r3, #0
 800c60c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c61c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c630:	f043 0318 	orr.w	r3, r3, #24
 800c634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c644:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c648:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c64a:	7afb      	ldrb	r3, [r7, #11]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d10f      	bne.n	800c670 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c656:	461a      	mov	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c66a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c66e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	371c      	adds	r7, #28
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	4f54300a 	.word	0x4f54300a

0800c684 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	60fb      	str	r3, [r7, #12]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	4a13      	ldr	r2, [pc, #76]	; (800c6e8 <USB_CoreReset+0x64>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d901      	bls.n	800c6a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e01b      	b.n	800c6da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	daf2      	bge.n	800c690 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	f043 0201 	orr.w	r2, r3, #1
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	4a09      	ldr	r2, [pc, #36]	; (800c6e8 <USB_CoreReset+0x64>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d901      	bls.n	800c6cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e006      	b.n	800c6da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d0f0      	beq.n	800c6ba <USB_CoreReset+0x36>

  return HAL_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	00030d40 	.word	0x00030d40

0800c6ec <EventQueue_Init>:
 *      Author: marcwech
 */

#include "EventQueue.h"

EventQueue* EventQueue_Init(){
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0

	EventQueue *endofQueue = NULL;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	607b      	str	r3, [r7, #4]

	return endofQueue;
 800c6f6:	687b      	ldr	r3, [r7, #4]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <addEvent>:

void addEvent(EventQueue **endofQueue, Event *evt){
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]

	if(evt == NULL)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d016      	beq.n	800c742 <addEvent+0x3e>
		return;

	EventQueue *newElement = malloc (sizeof(EventQueue));
 800c714:	200c      	movs	r0, #12
 800c716:	f002 fa55 	bl	800ebc4 <malloc>
 800c71a:	4603      	mov	r3, r0
 800c71c:	60fb      	str	r3, [r7, #12]

	if(newElement != NULL){
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d010      	beq.n	800c746 <addEvent+0x42>
		newElement->data = *evt;
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	881b      	ldrh	r3, [r3, #0]
 800c72a:	8013      	strh	r3, [r2, #0]
		newElement->next = NULL;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	605a      	str	r2, [r3, #4]
		newElement->prev = *endofQueue;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	609a      	str	r2, [r3, #8]

		*endofQueue = newElement;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	601a      	str	r2, [r3, #0]
	}
	return;
 800c740:	e001      	b.n	800c746 <addEvent+0x42>
		return;
 800c742:	bf00      	nop
 800c744:	e000      	b.n	800c748 <addEvent+0x44>
	return;
 800c746:	bf00      	nop
}
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <getEvent>:

Event getEvent(EventQueue *endofQueue){
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]

	Event evt;

	if(endofQueue == NULL){
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d106      	bne.n	800c76a <getEvent+0x1c>
		evt.class = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	723b      	strb	r3, [r7, #8]
		evt.source = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	727b      	strb	r3, [r7, #9]
		return evt;
 800c764:	893b      	ldrh	r3, [r7, #8]
 800c766:	81bb      	strh	r3, [r7, #12]
 800c768:	e016      	b.n	800c798 <getEvent+0x4a>
	}

	evt = endofQueue->data;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	813b      	strh	r3, [r7, #8]

	if(endofQueue->prev == NULL){
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d105      	bne.n	800c784 <getEvent+0x36>
		free(endofQueue);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f002 fa2b 	bl	800ebd4 <free>
		endofQueue = NULL;
 800c77e:	2300      	movs	r3, #0
 800c780:	607b      	str	r3, [r7, #4]
 800c782:	e007      	b.n	800c794 <getEvent+0x46>
	}
	else{
		endofQueue = endofQueue->prev;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	607b      	str	r3, [r7, #4]
		free(endofQueue->next);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	4618      	mov	r0, r3
 800c790:	f002 fa20 	bl	800ebd4 <free>
	}


	return evt;
 800c794:	893b      	ldrh	r3, [r7, #8]
 800c796:	81bb      	strh	r3, [r7, #12]
}
 800c798:	2300      	movs	r3, #0
 800c79a:	7b3a      	ldrb	r2, [r7, #12]
 800c79c:	f362 0307 	bfi	r3, r2, #0, #8
 800c7a0:	7b7a      	ldrb	r2, [r7, #13]
 800c7a2:	f362 230f 	bfi	r3, r2, #8, #8
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c7ba:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c7be:	f002 fa01 	bl	800ebc4 <malloc>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d105      	bne.n	800c7d8 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	e066      	b.n	800c8a6 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	7c1b      	ldrb	r3, [r3, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d119      	bne.n	800c81c <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7ec:	2202      	movs	r2, #2
 800c7ee:	2181      	movs	r1, #129	; 0x81
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f002 f86e 	bl	800e8d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c7fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c800:	2202      	movs	r2, #2
 800c802:	2101      	movs	r1, #1
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f002 f864 	bl	800e8d2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2210      	movs	r2, #16
 800c816:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c81a:	e016      	b.n	800c84a <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c81c:	2340      	movs	r3, #64	; 0x40
 800c81e:	2202      	movs	r2, #2
 800c820:	2181      	movs	r1, #129	; 0x81
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f002 f855 	bl	800e8d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c82e:	2340      	movs	r3, #64	; 0x40
 800c830:	2202      	movs	r2, #2
 800c832:	2101      	movs	r1, #1
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f002 f84c 	bl	800e8d2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2210      	movs	r2, #16
 800c846:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c84a:	2308      	movs	r3, #8
 800c84c:	2203      	movs	r2, #3
 800c84e:	2182      	movs	r1, #130	; 0x82
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f002 f83e 	bl	800e8d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2200      	movs	r2, #0
 800c874:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7c1b      	ldrb	r3, [r3, #16]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d109      	bne.n	800c894 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c88a:	2101      	movs	r1, #1
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f002 f90f 	bl	800eab0 <USBD_LL_PrepareReceive>
 800c892:	e007      	b.n	800c8a4 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c89a:	2340      	movs	r3, #64	; 0x40
 800c89c:	2101      	movs	r1, #1
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f002 f906 	bl	800eab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c8be:	2181      	movs	r1, #129	; 0x81
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f002 f82c 	bl	800e91e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c8cc:	2101      	movs	r1, #1
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f002 f825 	bl	800e91e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c8dc:	2182      	movs	r1, #130	; 0x82
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f002 f81d 	bl	800e91e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00e      	beq.n	800c91c <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c90e:	4618      	mov	r0, r3
 800c910:	f002 f960 	bl	800ebd4 <free>
    pdev->pClassData = NULL;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
	...

0800c928 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c938:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c93a:	2300      	movs	r3, #0
 800c93c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c93e:	2300      	movs	r3, #0
 800c940:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d03a      	beq.n	800c9c8 <USBD_CDC_Setup+0xa0>
 800c952:	2b20      	cmp	r3, #32
 800c954:	f040 8097 	bne.w	800ca86 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	88db      	ldrh	r3, [r3, #6]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d029      	beq.n	800c9b4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	b25b      	sxtb	r3, r3
 800c966:	2b00      	cmp	r3, #0
 800c968:	da11      	bge.n	800c98e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	683a      	ldr	r2, [r7, #0]
 800c974:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800c976:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c978:	683a      	ldr	r2, [r7, #0]
 800c97a:	88d2      	ldrh	r2, [r2, #6]
 800c97c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c97e:	6939      	ldr	r1, [r7, #16]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	88db      	ldrh	r3, [r3, #6]
 800c984:	461a      	mov	r2, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f001 faac 	bl	800dee4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800c98c:	e082      	b.n	800ca94 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	785a      	ldrb	r2, [r3, #1]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	88db      	ldrh	r3, [r3, #6]
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c9a4:	6939      	ldr	r1, [r7, #16]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	88db      	ldrh	r3, [r3, #6]
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f001 fac5 	bl	800df3c <USBD_CtlPrepareRx>
    break;
 800c9b2:	e06f      	b.n	800ca94 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	683a      	ldr	r2, [r7, #0]
 800c9be:	7850      	ldrb	r0, [r2, #1]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	4798      	blx	r3
    break;
 800c9c6:	e065      	b.n	800ca94 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	785b      	ldrb	r3, [r3, #1]
 800c9cc:	2b0b      	cmp	r3, #11
 800c9ce:	d84f      	bhi.n	800ca70 <USBD_CDC_Setup+0x148>
 800c9d0:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <USBD_CDC_Setup+0xb0>)
 800c9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d6:	bf00      	nop
 800c9d8:	0800ca09 	.word	0x0800ca09
 800c9dc:	0800ca7f 	.word	0x0800ca7f
 800c9e0:	0800ca71 	.word	0x0800ca71
 800c9e4:	0800ca71 	.word	0x0800ca71
 800c9e8:	0800ca71 	.word	0x0800ca71
 800c9ec:	0800ca71 	.word	0x0800ca71
 800c9f0:	0800ca71 	.word	0x0800ca71
 800c9f4:	0800ca71 	.word	0x0800ca71
 800c9f8:	0800ca71 	.word	0x0800ca71
 800c9fc:	0800ca71 	.word	0x0800ca71
 800ca00:	0800ca31 	.word	0x0800ca31
 800ca04:	0800ca59 	.word	0x0800ca59
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d107      	bne.n	800ca22 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ca12:	f107 030c 	add.w	r3, r7, #12
 800ca16:	2202      	movs	r2, #2
 800ca18:	4619      	mov	r1, r3
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f001 fa62 	bl	800dee4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ca20:	e030      	b.n	800ca84 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f001 f9ec 	bl	800de02 <USBD_CtlError>
        ret = USBD_FAIL;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ca2e:	e029      	b.n	800ca84 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	d107      	bne.n	800ca4a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ca3a:	f107 030f 	add.w	r3, r7, #15
 800ca3e:	2201      	movs	r2, #1
 800ca40:	4619      	mov	r1, r3
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f001 fa4e 	bl	800dee4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ca48:	e01c      	b.n	800ca84 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 f9d8 	bl	800de02 <USBD_CtlError>
        ret = USBD_FAIL;
 800ca52:	2303      	movs	r3, #3
 800ca54:	75fb      	strb	r3, [r7, #23]
      break;
 800ca56:	e015      	b.n	800ca84 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d00f      	beq.n	800ca82 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f001 f9cc 	bl	800de02 <USBD_CtlError>
        ret = USBD_FAIL;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ca6e:	e008      	b.n	800ca82 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f001 f9c5 	bl	800de02 <USBD_CtlError>
      ret = USBD_FAIL;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca7c:	e002      	b.n	800ca84 <USBD_CDC_Setup+0x15c>
      break;
 800ca7e:	bf00      	nop
 800ca80:	e008      	b.n	800ca94 <USBD_CDC_Setup+0x16c>
      break;
 800ca82:	bf00      	nop
    }
    break;
 800ca84:	e006      	b.n	800ca94 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f001 f9ba 	bl	800de02 <USBD_CtlError>
    ret = USBD_FAIL;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	75fb      	strb	r3, [r7, #23]
    break;
 800ca92:	bf00      	nop
  }

  return (uint8_t)ret;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop

0800caa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	460b      	mov	r3, r1
 800caaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cabe:	2303      	movs	r3, #3
 800cac0:	e049      	b.n	800cb56 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cac8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800caca:	78fa      	ldrb	r2, [r7, #3]
 800cacc:	6879      	ldr	r1, [r7, #4]
 800cace:	4613      	mov	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	440b      	add	r3, r1
 800cad8:	3318      	adds	r3, #24
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d029      	beq.n	800cb34 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cae0:	78fa      	ldrb	r2, [r7, #3]
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	4613      	mov	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4413      	add	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	440b      	add	r3, r1
 800caee:	3318      	adds	r3, #24
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	78f9      	ldrb	r1, [r7, #3]
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	460b      	mov	r3, r1
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	1a5b      	subs	r3, r3, r1
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4403      	add	r3, r0
 800cb00:	3344      	adds	r3, #68	; 0x44
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb08:	fb01 f303 	mul.w	r3, r1, r3
 800cb0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d110      	bne.n	800cb34 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cb12:	78fa      	ldrb	r2, [r7, #3]
 800cb14:	6879      	ldr	r1, [r7, #4]
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	440b      	add	r3, r1
 800cb20:	3318      	adds	r3, #24
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cb26:	78f9      	ldrb	r1, [r7, #3]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f001 ff9e 	bl	800ea6e <USBD_LL_Transmit>
 800cb32:	e00f      	b.n	800cb54 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cb50:	78fa      	ldrb	r2, [r7, #3]
 800cb52:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	460b      	mov	r3, r1
 800cb68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb7c:	2303      	movs	r3, #3
 800cb7e:	e015      	b.n	800cbac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cb80:	78fb      	ldrb	r3, [r7, #3]
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f001 ffb4 	bl	800eaf2 <USBD_LL_GetRxDataSize>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cba6:	4611      	mov	r1, r2
 800cba8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbc2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d015      	beq.n	800cbfa <USBD_CDC_EP0_RxReady+0x46>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cbd4:	2bff      	cmp	r3, #255	; 0xff
 800cbd6:	d010      	beq.n	800cbfa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cbe6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cbee:	b292      	uxth	r2, r2
 800cbf0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	22ff      	movs	r2, #255	; 0xff
 800cbf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2243      	movs	r2, #67	; 0x43
 800cc10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cc12:	4b03      	ldr	r3, [pc, #12]	; (800cc20 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr
 800cc20:	24003940 	.word	0x24003940

0800cc24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2243      	movs	r2, #67	; 0x43
 800cc30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cc32:	4b03      	ldr	r3, [pc, #12]	; (800cc40 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr
 800cc40:	240038fc 	.word	0x240038fc

0800cc44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2243      	movs	r2, #67	; 0x43
 800cc50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cc52:	4b03      	ldr	r3, [pc, #12]	; (800cc60 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	24003984 	.word	0x24003984

0800cc64 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	220a      	movs	r2, #10
 800cc70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cc72:	4b03      	ldr	r3, [pc, #12]	; (800cc80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	240038b8 	.word	0x240038b8

0800cc84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cc94:	2303      	movs	r3, #3
 800cc96:	e004      	b.n	800cca2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b087      	sub	sp, #28
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	60f8      	str	r0, [r7, #12]
 800ccb6:	60b9      	str	r1, [r7, #8]
 800ccb8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccc0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	371c      	adds	r7, #28
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccf0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3714      	adds	r7, #20
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d101      	bne.n	800cd2a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd26:	2303      	movs	r3, #3
 800cd28:	e01a      	b.n	800cd60 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d114      	bne.n	800cd5e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cd52:	2181      	movs	r1, #129	; 0x81
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f001 fe8a 	bl	800ea6e <USBD_LL_Transmit>

    ret = USBD_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e016      	b.n	800cdb4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	7c1b      	ldrb	r3, [r3, #16]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d109      	bne.n	800cda2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd98:	2101      	movs	r1, #1
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f001 fe88 	bl	800eab0 <USBD_LL_PrepareReceive>
 800cda0:	e007      	b.n	800cdb2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cda8:	2340      	movs	r3, #64	; 0x40
 800cdaa:	2101      	movs	r1, #1
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f001 fe7f 	bl	800eab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e025      	b.n	800ce20 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d003      	beq.n	800cde6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d003      	beq.n	800cdf8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d003      	beq.n	800ce06 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	68ba      	ldr	r2, [r7, #8]
 800ce02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	79fa      	ldrb	r2, [r7, #7]
 800ce12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f001 fcf1 	bl	800e7fc <USBD_LL_Init>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3718      	adds	r7, #24
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce32:	2300      	movs	r3, #0
 800ce34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d101      	bne.n	800ce40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	e010      	b.n	800ce62 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	683a      	ldr	r2, [r7, #0]
 800ce44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce50:	f107 020e 	add.w	r2, r7, #14
 800ce54:	4610      	mov	r0, r2
 800ce56:	4798      	blx	r3
 800ce58:	4602      	mov	r2, r0
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f001 fd12 	bl	800e89c <USBD_LL_Start>
 800ce78:	4603      	mov	r3, r0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ce82:	b480      	push	{r7}
 800ce84:	b083      	sub	sp, #12
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	460b      	mov	r3, r1
 800cea2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cea4:	2303      	movs	r3, #3
 800cea6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d009      	beq.n	800cec6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	78fa      	ldrb	r2, [r7, #3]
 800cebc:	4611      	mov	r1, r2
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	4798      	blx	r3
 800cec2:	4603      	mov	r3, r0
 800cec4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d007      	beq.n	800cef6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	78fa      	ldrb	r2, [r7, #3]
 800cef0:	4611      	mov	r1, r2
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	4798      	blx	r3
  }

  return USBD_OK;
 800cef6:	2300      	movs	r3, #0
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf10:	6839      	ldr	r1, [r7, #0]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 ff3b 	bl	800dd8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cf26:	461a      	mov	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf34:	f003 031f 	and.w	r3, r3, #31
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d01a      	beq.n	800cf72 <USBD_LL_SetupStage+0x72>
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d822      	bhi.n	800cf86 <USBD_LL_SetupStage+0x86>
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <USBD_LL_SetupStage+0x4a>
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d00a      	beq.n	800cf5e <USBD_LL_SetupStage+0x5e>
 800cf48:	e01d      	b.n	800cf86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf50:	4619      	mov	r1, r3
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fa18 	bl	800d388 <USBD_StdDevReq>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf5c:	e020      	b.n	800cfa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fa7c 	bl	800d464 <USBD_StdItfReq>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf70:	e016      	b.n	800cfa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 faba 	bl	800d4f4 <USBD_StdEPReq>
 800cf80:	4603      	mov	r3, r0
 800cf82:	73fb      	strb	r3, [r7, #15]
      break;
 800cf84:	e00c      	b.n	800cfa0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f001 fce1 	bl	800e95c <USBD_LL_StallEP>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	73fb      	strb	r3, [r7, #15]
      break;
 800cf9e:	bf00      	nop
  }

  return ret;
 800cfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b086      	sub	sp, #24
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	60f8      	str	r0, [r7, #12]
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	607a      	str	r2, [r7, #4]
 800cfb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cfb8:	7afb      	ldrb	r3, [r7, #11]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d137      	bne.n	800d02e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cfc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	d14a      	bne.n	800d066 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	689a      	ldr	r2, [r3, #8]
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d913      	bls.n	800d004 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	689a      	ldr	r2, [r3, #8]
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	1ad2      	subs	r2, r2, r3
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	68da      	ldr	r2, [r3, #12]
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	4293      	cmp	r3, r2
 800cff4:	bf28      	it	cs
 800cff6:	4613      	movcs	r3, r2
 800cff8:	461a      	mov	r2, r3
 800cffa:	6879      	ldr	r1, [r7, #4]
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f000 ffba 	bl	800df76 <USBD_CtlContinueRx>
 800d002:	e030      	b.n	800d066 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00a      	beq.n	800d026 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d016:	2b03      	cmp	r3, #3
 800d018:	d105      	bne.n	800d026 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	f000 ffb6 	bl	800df98 <USBD_CtlSendStatus>
 800d02c:	e01b      	b.n	800d066 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d034:	699b      	ldr	r3, [r3, #24]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d013      	beq.n	800d062 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d040:	2b03      	cmp	r3, #3
 800d042:	d10e      	bne.n	800d062 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	7afa      	ldrb	r2, [r7, #11]
 800d04e:	4611      	mov	r1, r2
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	4798      	blx	r3
 800d054:	4603      	mov	r3, r0
 800d056:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d058:	7dfb      	ldrb	r3, [r7, #23]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d003      	beq.n	800d066 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800d05e:	7dfb      	ldrb	r3, [r7, #23]
 800d060:	e002      	b.n	800d068 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d062:	2303      	movs	r3, #3
 800d064:	e000      	b.n	800d068 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	460b      	mov	r3, r1
 800d07a:	607a      	str	r2, [r7, #4]
 800d07c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d07e:	7afb      	ldrb	r3, [r7, #11]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d16a      	bne.n	800d15a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3314      	adds	r3, #20
 800d088:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d090:	2b02      	cmp	r3, #2
 800d092:	d155      	bne.n	800d140 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	689a      	ldr	r2, [r3, #8]
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d914      	bls.n	800d0ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	689a      	ldr	r2, [r3, #8]
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	1ad2      	subs	r2, r2, r3
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	6879      	ldr	r1, [r7, #4]
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f000 ff2f 	bl	800df1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0bc:	2300      	movs	r3, #0
 800d0be:	2200      	movs	r2, #0
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f001 fcf4 	bl	800eab0 <USBD_LL_PrepareReceive>
 800d0c8:	e03a      	b.n	800d140 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	68da      	ldr	r2, [r3, #12]
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d11c      	bne.n	800d110 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	685a      	ldr	r2, [r3, #4]
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d316      	bcc.n	800d110 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	685a      	ldr	r2, [r3, #4]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d20f      	bcs.n	800d110 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f000 ff10 	bl	800df1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d102:	2300      	movs	r3, #0
 800d104:	2200      	movs	r2, #0
 800d106:	2100      	movs	r1, #0
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f001 fcd1 	bl	800eab0 <USBD_LL_PrepareReceive>
 800d10e:	e017      	b.n	800d140 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00a      	beq.n	800d132 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d122:	2b03      	cmp	r3, #3
 800d124:	d105      	bne.n	800d132 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d132:	2180      	movs	r1, #128	; 0x80
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f001 fc11 	bl	800e95c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f000 ff3f 	bl	800dfbe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d146:	2b01      	cmp	r3, #1
 800d148:	d123      	bne.n	800d192 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f7ff fe99 	bl	800ce82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d158:	e01b      	b.n	800d192 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d013      	beq.n	800d18e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d16c:	2b03      	cmp	r3, #3
 800d16e:	d10e      	bne.n	800d18e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d176:	695b      	ldr	r3, [r3, #20]
 800d178:	7afa      	ldrb	r2, [r7, #11]
 800d17a:	4611      	mov	r1, r2
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	4798      	blx	r3
 800d180:	4603      	mov	r3, r0
 800d182:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d184:	7dfb      	ldrb	r3, [r7, #23]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800d18a:	7dfb      	ldrb	r3, [r7, #23]
 800d18c:	e002      	b.n	800d194 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d18e:	2303      	movs	r3, #3
 800d190:	e000      	b.n	800d194 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3718      	adds	r7, #24
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d009      	beq.n	800d1e0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	6852      	ldr	r2, [r2, #4]
 800d1d8:	b2d2      	uxtb	r2, r2
 800d1da:	4611      	mov	r1, r2
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1e0:	2340      	movs	r3, #64	; 0x40
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f001 fb73 	bl	800e8d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2240      	movs	r2, #64	; 0x40
 800d1f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1fc:	2340      	movs	r3, #64	; 0x40
 800d1fe:	2200      	movs	r2, #0
 800d200:	2180      	movs	r1, #128	; 0x80
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f001 fb65 	bl	800e8d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2240      	movs	r2, #64	; 0x40
 800d212:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d21e:	b480      	push	{r7}
 800d220:	b083      	sub	sp, #12
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	460b      	mov	r3, r1
 800d228:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	78fa      	ldrb	r2, [r7, #3]
 800d22e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	370c      	adds	r7, #12
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr

0800d23e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d23e:	b480      	push	{r7}
 800d240:	b083      	sub	sp, #12
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2204      	movs	r2, #4
 800d256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d276:	2b04      	cmp	r3, #4
 800d278:	d105      	bne.n	800d286 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2a2:	2b03      	cmp	r3, #3
 800d2a4:	d10b      	bne.n	800d2be <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ac:	69db      	ldr	r3, [r3, #28]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d005      	beq.n	800d2be <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3708      	adds	r7, #8
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	370c      	adds	r7, #12
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr

0800d312 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b082      	sub	sp, #8
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2201      	movs	r2, #1
 800d31e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d009      	beq.n	800d340 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	6852      	ldr	r2, [r2, #4]
 800d338:	b2d2      	uxtb	r2, r2
 800d33a:	4611      	mov	r1, r2
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	4798      	blx	r3
  }

  return USBD_OK;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d34a:	b480      	push	{r7}
 800d34c:	b087      	sub	sp, #28
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	3301      	adds	r3, #1
 800d360:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d368:	8a3b      	ldrh	r3, [r7, #16]
 800d36a:	021b      	lsls	r3, r3, #8
 800d36c:	b21a      	sxth	r2, r3
 800d36e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d372:	4313      	orrs	r3, r2
 800d374:	b21b      	sxth	r3, r3
 800d376:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d378:	89fb      	ldrh	r3, [r7, #14]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	371c      	adds	r7, #28
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
	...

0800d388 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d39e:	2b40      	cmp	r3, #64	; 0x40
 800d3a0:	d005      	beq.n	800d3ae <USBD_StdDevReq+0x26>
 800d3a2:	2b40      	cmp	r3, #64	; 0x40
 800d3a4:	d853      	bhi.n	800d44e <USBD_StdDevReq+0xc6>
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00b      	beq.n	800d3c2 <USBD_StdDevReq+0x3a>
 800d3aa:	2b20      	cmp	r3, #32
 800d3ac:	d14f      	bne.n	800d44e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	4798      	blx	r3
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c0:	e04a      	b.n	800d458 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	785b      	ldrb	r3, [r3, #1]
 800d3c6:	2b09      	cmp	r3, #9
 800d3c8:	d83b      	bhi.n	800d442 <USBD_StdDevReq+0xba>
 800d3ca:	a201      	add	r2, pc, #4	; (adr r2, 800d3d0 <USBD_StdDevReq+0x48>)
 800d3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d0:	0800d425 	.word	0x0800d425
 800d3d4:	0800d439 	.word	0x0800d439
 800d3d8:	0800d443 	.word	0x0800d443
 800d3dc:	0800d42f 	.word	0x0800d42f
 800d3e0:	0800d443 	.word	0x0800d443
 800d3e4:	0800d403 	.word	0x0800d403
 800d3e8:	0800d3f9 	.word	0x0800d3f9
 800d3ec:	0800d443 	.word	0x0800d443
 800d3f0:	0800d41b 	.word	0x0800d41b
 800d3f4:	0800d40d 	.word	0x0800d40d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800d3f8:	6839      	ldr	r1, [r7, #0]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f9d8 	bl	800d7b0 <USBD_GetDescriptor>
      break;
 800d400:	e024      	b.n	800d44c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800d402:	6839      	ldr	r1, [r7, #0]
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 fb3d 	bl	800da84 <USBD_SetAddress>
      break;
 800d40a:	e01f      	b.n	800d44c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fb7c 	bl	800db0c <USBD_SetConfig>
 800d414:	4603      	mov	r3, r0
 800d416:	73fb      	strb	r3, [r7, #15]
      break;
 800d418:	e018      	b.n	800d44c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800d41a:	6839      	ldr	r1, [r7, #0]
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f000 fc19 	bl	800dc54 <USBD_GetConfig>
      break;
 800d422:	e013      	b.n	800d44c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fc49 	bl	800dcbe <USBD_GetStatus>
      break;
 800d42c:	e00e      	b.n	800d44c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800d42e:	6839      	ldr	r1, [r7, #0]
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 fc77 	bl	800dd24 <USBD_SetFeature>
      break;
 800d436:	e009      	b.n	800d44c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800d438:	6839      	ldr	r1, [r7, #0]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 fc86 	bl	800dd4c <USBD_ClrFeature>
      break;
 800d440:	e004      	b.n	800d44c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800d442:	6839      	ldr	r1, [r7, #0]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 fcdc 	bl	800de02 <USBD_CtlError>
      break;
 800d44a:	bf00      	nop
    }
    break;
 800d44c:	e004      	b.n	800d458 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fcd6 	bl	800de02 <USBD_CtlError>
    break;
 800d456:	bf00      	nop
  }

  return ret;
 800d458:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop

0800d464 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d47a:	2b40      	cmp	r3, #64	; 0x40
 800d47c:	d005      	beq.n	800d48a <USBD_StdItfReq+0x26>
 800d47e:	2b40      	cmp	r3, #64	; 0x40
 800d480:	d82e      	bhi.n	800d4e0 <USBD_StdItfReq+0x7c>
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <USBD_StdItfReq+0x26>
 800d486:	2b20      	cmp	r3, #32
 800d488:	d12a      	bne.n	800d4e0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d490:	3b01      	subs	r3, #1
 800d492:	2b02      	cmp	r3, #2
 800d494:	d81d      	bhi.n	800d4d2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	889b      	ldrh	r3, [r3, #4]
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d813      	bhi.n	800d4c8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	4798      	blx	r3
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	88db      	ldrh	r3, [r3, #6]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d110      	bne.n	800d4dc <USBD_StdItfReq+0x78>
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10d      	bne.n	800d4dc <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 fd69 	bl	800df98 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d4c6:	e009      	b.n	800d4dc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d4c8:	6839      	ldr	r1, [r7, #0]
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fc99 	bl	800de02 <USBD_CtlError>
      break;
 800d4d0:	e004      	b.n	800d4dc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fc94 	bl	800de02 <USBD_CtlError>
      break;
 800d4da:	e000      	b.n	800d4de <USBD_StdItfReq+0x7a>
      break;
 800d4dc:	bf00      	nop
    }
    break;
 800d4de:	e004      	b.n	800d4ea <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d4e0:	6839      	ldr	r1, [r7, #0]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fc8d 	bl	800de02 <USBD_CtlError>
    break;
 800d4e8:	bf00      	nop
  }

  return ret;
 800d4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	889b      	ldrh	r3, [r3, #4]
 800d506:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d510:	2b40      	cmp	r3, #64	; 0x40
 800d512:	d007      	beq.n	800d524 <USBD_StdEPReq+0x30>
 800d514:	2b40      	cmp	r3, #64	; 0x40
 800d516:	f200 8140 	bhi.w	800d79a <USBD_StdEPReq+0x2a6>
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00c      	beq.n	800d538 <USBD_StdEPReq+0x44>
 800d51e:	2b20      	cmp	r3, #32
 800d520:	f040 813b 	bne.w	800d79a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	4798      	blx	r3
 800d532:	4603      	mov	r3, r0
 800d534:	73fb      	strb	r3, [r7, #15]
    break;
 800d536:	e135      	b.n	800d7a4 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	785b      	ldrb	r3, [r3, #1]
 800d53c:	2b03      	cmp	r3, #3
 800d53e:	d007      	beq.n	800d550 <USBD_StdEPReq+0x5c>
 800d540:	2b03      	cmp	r3, #3
 800d542:	f300 8124 	bgt.w	800d78e <USBD_StdEPReq+0x29a>
 800d546:	2b00      	cmp	r3, #0
 800d548:	d07b      	beq.n	800d642 <USBD_StdEPReq+0x14e>
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d03b      	beq.n	800d5c6 <USBD_StdEPReq+0xd2>
 800d54e:	e11e      	b.n	800d78e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d556:	2b02      	cmp	r3, #2
 800d558:	d002      	beq.n	800d560 <USBD_StdEPReq+0x6c>
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d016      	beq.n	800d58c <USBD_StdEPReq+0x98>
 800d55e:	e02c      	b.n	800d5ba <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d560:	7bbb      	ldrb	r3, [r7, #14]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00d      	beq.n	800d582 <USBD_StdEPReq+0x8e>
 800d566:	7bbb      	ldrb	r3, [r7, #14]
 800d568:	2b80      	cmp	r3, #128	; 0x80
 800d56a:	d00a      	beq.n	800d582 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d56c:	7bbb      	ldrb	r3, [r7, #14]
 800d56e:	4619      	mov	r1, r3
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f001 f9f3 	bl	800e95c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d576:	2180      	movs	r1, #128	; 0x80
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f001 f9ef 	bl	800e95c <USBD_LL_StallEP>
 800d57e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d580:	e020      	b.n	800d5c4 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 fc3c 	bl	800de02 <USBD_CtlError>
        break;
 800d58a:	e01b      	b.n	800d5c4 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	885b      	ldrh	r3, [r3, #2]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10e      	bne.n	800d5b2 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d594:	7bbb      	ldrb	r3, [r7, #14]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00b      	beq.n	800d5b2 <USBD_StdEPReq+0xbe>
 800d59a:	7bbb      	ldrb	r3, [r7, #14]
 800d59c:	2b80      	cmp	r3, #128	; 0x80
 800d59e:	d008      	beq.n	800d5b2 <USBD_StdEPReq+0xbe>
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	88db      	ldrh	r3, [r3, #6]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d104      	bne.n	800d5b2 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5a8:	7bbb      	ldrb	r3, [r7, #14]
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f001 f9d5 	bl	800e95c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 fcf0 	bl	800df98 <USBD_CtlSendStatus>

        break;
 800d5b8:	e004      	b.n	800d5c4 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800d5ba:	6839      	ldr	r1, [r7, #0]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 fc20 	bl	800de02 <USBD_CtlError>
        break;
 800d5c2:	bf00      	nop
      }
      break;
 800d5c4:	e0e8      	b.n	800d798 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	d002      	beq.n	800d5d6 <USBD_StdEPReq+0xe2>
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	d016      	beq.n	800d602 <USBD_StdEPReq+0x10e>
 800d5d4:	e02e      	b.n	800d634 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00d      	beq.n	800d5f8 <USBD_StdEPReq+0x104>
 800d5dc:	7bbb      	ldrb	r3, [r7, #14]
 800d5de:	2b80      	cmp	r3, #128	; 0x80
 800d5e0:	d00a      	beq.n	800d5f8 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5e2:	7bbb      	ldrb	r3, [r7, #14]
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f001 f9b8 	bl	800e95c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5ec:	2180      	movs	r1, #128	; 0x80
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f001 f9b4 	bl	800e95c <USBD_LL_StallEP>
 800d5f4:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d5f6:	e023      	b.n	800d640 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 fc01 	bl	800de02 <USBD_CtlError>
        break;
 800d600:	e01e      	b.n	800d640 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	885b      	ldrh	r3, [r3, #2]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d119      	bne.n	800d63e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d60a:	7bbb      	ldrb	r3, [r7, #14]
 800d60c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d610:	2b00      	cmp	r3, #0
 800d612:	d004      	beq.n	800d61e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d614:	7bbb      	ldrb	r3, [r7, #14]
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f001 f9be 	bl	800e99a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fcba 	bl	800df98 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	6839      	ldr	r1, [r7, #0]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	4798      	blx	r3
        }
        break;
 800d632:	e004      	b.n	800d63e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800d634:	6839      	ldr	r1, [r7, #0]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 fbe3 	bl	800de02 <USBD_CtlError>
        break;
 800d63c:	e000      	b.n	800d640 <USBD_StdEPReq+0x14c>
        break;
 800d63e:	bf00      	nop
      }
      break;
 800d640:	e0aa      	b.n	800d798 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d002      	beq.n	800d652 <USBD_StdEPReq+0x15e>
 800d64c:	2b03      	cmp	r3, #3
 800d64e:	d032      	beq.n	800d6b6 <USBD_StdEPReq+0x1c2>
 800d650:	e097      	b.n	800d782 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d652:	7bbb      	ldrb	r3, [r7, #14]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d007      	beq.n	800d668 <USBD_StdEPReq+0x174>
 800d658:	7bbb      	ldrb	r3, [r7, #14]
 800d65a:	2b80      	cmp	r3, #128	; 0x80
 800d65c:	d004      	beq.n	800d668 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fbce 	bl	800de02 <USBD_CtlError>
          break;
 800d666:	e091      	b.n	800d78c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	da0b      	bge.n	800d688 <USBD_StdEPReq+0x194>
 800d670:	7bbb      	ldrb	r3, [r7, #14]
 800d672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d676:	4613      	mov	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	3310      	adds	r3, #16
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	4413      	add	r3, r2
 800d684:	3304      	adds	r3, #4
 800d686:	e00b      	b.n	800d6a0 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d688:	7bbb      	ldrb	r3, [r7, #14]
 800d68a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d68e:	4613      	mov	r3, r2
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	4413      	add	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	4413      	add	r3, r2
 800d69e:	3304      	adds	r3, #4
 800d6a0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fc18 	bl	800dee4 <USBD_CtlSendData>
        break;
 800d6b4:	e06a      	b.n	800d78c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800d6b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	da11      	bge.n	800d6e2 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d6be:	7bbb      	ldrb	r3, [r7, #14]
 800d6c0:	f003 020f 	and.w	r2, r3, #15
 800d6c4:	6879      	ldr	r1, [r7, #4]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4413      	add	r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3324      	adds	r3, #36	; 0x24
 800d6d2:	881b      	ldrh	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d117      	bne.n	800d708 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800d6d8:	6839      	ldr	r1, [r7, #0]
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fb91 	bl	800de02 <USBD_CtlError>
            break;
 800d6e0:	e054      	b.n	800d78c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d6e2:	7bbb      	ldrb	r3, [r7, #14]
 800d6e4:	f003 020f 	and.w	r2, r3, #15
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	4413      	add	r3, r2
 800d6f0:	009b      	lsls	r3, r3, #2
 800d6f2:	440b      	add	r3, r1
 800d6f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d6f8:	881b      	ldrh	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d104      	bne.n	800d708 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 fb7e 	bl	800de02 <USBD_CtlError>
            break;
 800d706:	e041      	b.n	800d78c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	da0b      	bge.n	800d728 <USBD_StdEPReq+0x234>
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	3310      	adds	r3, #16
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	4413      	add	r3, r2
 800d724:	3304      	adds	r3, #4
 800d726:	e00b      	b.n	800d740 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d728:	7bbb      	ldrb	r3, [r7, #14]
 800d72a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d72e:	4613      	mov	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4413      	add	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	4413      	add	r3, r2
 800d73e:	3304      	adds	r3, #4
 800d740:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d742:	7bbb      	ldrb	r3, [r7, #14]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d002      	beq.n	800d74e <USBD_StdEPReq+0x25a>
 800d748:	7bbb      	ldrb	r3, [r7, #14]
 800d74a:	2b80      	cmp	r3, #128	; 0x80
 800d74c:	d103      	bne.n	800d756 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2200      	movs	r2, #0
 800d752:	601a      	str	r2, [r3, #0]
 800d754:	e00e      	b.n	800d774 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d756:	7bbb      	ldrb	r3, [r7, #14]
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f001 f93c 	bl	800e9d8 <USBD_LL_IsStallEP>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d003      	beq.n	800d76e <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	2201      	movs	r2, #1
 800d76a:	601a      	str	r2, [r3, #0]
 800d76c:	e002      	b.n	800d774 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	2200      	movs	r2, #0
 800d772:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2202      	movs	r2, #2
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 fbb2 	bl	800dee4 <USBD_CtlSendData>
          break;
 800d780:	e004      	b.n	800d78c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 fb3c 	bl	800de02 <USBD_CtlError>
        break;
 800d78a:	bf00      	nop
      }
      break;
 800d78c:	e004      	b.n	800d798 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800d78e:	6839      	ldr	r1, [r7, #0]
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 fb36 	bl	800de02 <USBD_CtlError>
      break;
 800d796:	bf00      	nop
    }
    break;
 800d798:	e004      	b.n	800d7a4 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800d79a:	6839      	ldr	r1, [r7, #0]
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 fb30 	bl	800de02 <USBD_CtlError>
    break;
 800d7a2:	bf00      	nop
  }

  return ret;
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
	...

0800d7b0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	885b      	ldrh	r3, [r3, #2]
 800d7ca:	0a1b      	lsrs	r3, r3, #8
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	2b06      	cmp	r3, #6
 800d7d2:	f200 8128 	bhi.w	800da26 <USBD_GetDescriptor+0x276>
 800d7d6:	a201      	add	r2, pc, #4	; (adr r2, 800d7dc <USBD_GetDescriptor+0x2c>)
 800d7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7dc:	0800d7f9 	.word	0x0800d7f9
 800d7e0:	0800d811 	.word	0x0800d811
 800d7e4:	0800d851 	.word	0x0800d851
 800d7e8:	0800da27 	.word	0x0800da27
 800d7ec:	0800da27 	.word	0x0800da27
 800d7f0:	0800d9c7 	.word	0x0800d9c7
 800d7f4:	0800d9f3 	.word	0x0800d9f3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	7c12      	ldrb	r2, [r2, #16]
 800d804:	f107 0108 	add.w	r1, r7, #8
 800d808:	4610      	mov	r0, r2
 800d80a:	4798      	blx	r3
 800d80c:	60f8      	str	r0, [r7, #12]
    break;
 800d80e:	e112      	b.n	800da36 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7c1b      	ldrb	r3, [r3, #16]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10d      	bne.n	800d834 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d820:	f107 0208 	add.w	r2, r7, #8
 800d824:	4610      	mov	r0, r2
 800d826:	4798      	blx	r3
 800d828:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3301      	adds	r3, #1
 800d82e:	2202      	movs	r2, #2
 800d830:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d832:	e100      	b.n	800da36 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83c:	f107 0208 	add.w	r2, r7, #8
 800d840:	4610      	mov	r0, r2
 800d842:	4798      	blx	r3
 800d844:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3301      	adds	r3, #1
 800d84a:	2202      	movs	r2, #2
 800d84c:	701a      	strb	r2, [r3, #0]
    break;
 800d84e:	e0f2      	b.n	800da36 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	885b      	ldrh	r3, [r3, #2]
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b05      	cmp	r3, #5
 800d858:	f200 80ac 	bhi.w	800d9b4 <USBD_GetDescriptor+0x204>
 800d85c:	a201      	add	r2, pc, #4	; (adr r2, 800d864 <USBD_GetDescriptor+0xb4>)
 800d85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d862:	bf00      	nop
 800d864:	0800d87d 	.word	0x0800d87d
 800d868:	0800d8b1 	.word	0x0800d8b1
 800d86c:	0800d8e5 	.word	0x0800d8e5
 800d870:	0800d919 	.word	0x0800d919
 800d874:	0800d94d 	.word	0x0800d94d
 800d878:	0800d981 	.word	0x0800d981
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00b      	beq.n	800d8a0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	7c12      	ldrb	r2, [r2, #16]
 800d894:	f107 0108 	add.w	r1, r7, #8
 800d898:	4610      	mov	r0, r2
 800d89a:	4798      	blx	r3
 800d89c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d89e:	e091      	b.n	800d9c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d8a0:	6839      	ldr	r1, [r7, #0]
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 faad 	bl	800de02 <USBD_CtlError>
        err++;
 800d8a8:	7afb      	ldrb	r3, [r7, #11]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	72fb      	strb	r3, [r7, #11]
      break;
 800d8ae:	e089      	b.n	800d9c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00b      	beq.n	800d8d4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	7c12      	ldrb	r2, [r2, #16]
 800d8c8:	f107 0108 	add.w	r1, r7, #8
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	4798      	blx	r3
 800d8d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8d2:	e077      	b.n	800d9c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d8d4:	6839      	ldr	r1, [r7, #0]
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fa93 	bl	800de02 <USBD_CtlError>
        err++;
 800d8dc:	7afb      	ldrb	r3, [r7, #11]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	72fb      	strb	r3, [r7, #11]
      break;
 800d8e2:	e06f      	b.n	800d9c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00b      	beq.n	800d908 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	7c12      	ldrb	r2, [r2, #16]
 800d8fc:	f107 0108 	add.w	r1, r7, #8
 800d900:	4610      	mov	r0, r2
 800d902:	4798      	blx	r3
 800d904:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d906:	e05d      	b.n	800d9c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fa79 	bl	800de02 <USBD_CtlError>
        err++;
 800d910:	7afb      	ldrb	r3, [r7, #11]
 800d912:	3301      	adds	r3, #1
 800d914:	72fb      	strb	r3, [r7, #11]
      break;
 800d916:	e055      	b.n	800d9c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00b      	beq.n	800d93c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	7c12      	ldrb	r2, [r2, #16]
 800d930:	f107 0108 	add.w	r1, r7, #8
 800d934:	4610      	mov	r0, r2
 800d936:	4798      	blx	r3
 800d938:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d93a:	e043      	b.n	800d9c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d93c:	6839      	ldr	r1, [r7, #0]
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 fa5f 	bl	800de02 <USBD_CtlError>
        err++;
 800d944:	7afb      	ldrb	r3, [r7, #11]
 800d946:	3301      	adds	r3, #1
 800d948:	72fb      	strb	r3, [r7, #11]
      break;
 800d94a:	e03b      	b.n	800d9c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00b      	beq.n	800d970 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d95e:	695b      	ldr	r3, [r3, #20]
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	7c12      	ldrb	r2, [r2, #16]
 800d964:	f107 0108 	add.w	r1, r7, #8
 800d968:	4610      	mov	r0, r2
 800d96a:	4798      	blx	r3
 800d96c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d96e:	e029      	b.n	800d9c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d970:	6839      	ldr	r1, [r7, #0]
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 fa45 	bl	800de02 <USBD_CtlError>
        err++;
 800d978:	7afb      	ldrb	r3, [r7, #11]
 800d97a:	3301      	adds	r3, #1
 800d97c:	72fb      	strb	r3, [r7, #11]
      break;
 800d97e:	e021      	b.n	800d9c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00b      	beq.n	800d9a4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	7c12      	ldrb	r2, [r2, #16]
 800d998:	f107 0108 	add.w	r1, r7, #8
 800d99c:	4610      	mov	r0, r2
 800d99e:	4798      	blx	r3
 800d9a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9a2:	e00f      	b.n	800d9c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fa2b 	bl	800de02 <USBD_CtlError>
        err++;
 800d9ac:	7afb      	ldrb	r3, [r7, #11]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	72fb      	strb	r3, [r7, #11]
      break;
 800d9b2:	e007      	b.n	800d9c4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800d9b4:	6839      	ldr	r1, [r7, #0]
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 fa23 	bl	800de02 <USBD_CtlError>
      err++;
 800d9bc:	7afb      	ldrb	r3, [r7, #11]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800d9c2:	bf00      	nop
    }
    break;
 800d9c4:	e037      	b.n	800da36 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	7c1b      	ldrb	r3, [r3, #16]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d109      	bne.n	800d9e2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d6:	f107 0208 	add.w	r2, r7, #8
 800d9da:	4610      	mov	r0, r2
 800d9dc:	4798      	blx	r3
 800d9de:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d9e0:	e029      	b.n	800da36 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 fa0c 	bl	800de02 <USBD_CtlError>
      err++;
 800d9ea:	7afb      	ldrb	r3, [r7, #11]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	72fb      	strb	r3, [r7, #11]
    break;
 800d9f0:	e021      	b.n	800da36 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	7c1b      	ldrb	r3, [r3, #16]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10d      	bne.n	800da16 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da02:	f107 0208 	add.w	r2, r7, #8
 800da06:	4610      	mov	r0, r2
 800da08:	4798      	blx	r3
 800da0a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	3301      	adds	r3, #1
 800da10:	2207      	movs	r2, #7
 800da12:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800da14:	e00f      	b.n	800da36 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800da16:	6839      	ldr	r1, [r7, #0]
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f9f2 	bl	800de02 <USBD_CtlError>
      err++;
 800da1e:	7afb      	ldrb	r3, [r7, #11]
 800da20:	3301      	adds	r3, #1
 800da22:	72fb      	strb	r3, [r7, #11]
    break;
 800da24:	e007      	b.n	800da36 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800da26:	6839      	ldr	r1, [r7, #0]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 f9ea 	bl	800de02 <USBD_CtlError>
    err++;
 800da2e:	7afb      	ldrb	r3, [r7, #11]
 800da30:	3301      	adds	r3, #1
 800da32:	72fb      	strb	r3, [r7, #11]
    break;
 800da34:	bf00      	nop
  }

  if (err != 0U)
 800da36:	7afb      	ldrb	r3, [r7, #11]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d11e      	bne.n	800da7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	88db      	ldrh	r3, [r3, #6]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d016      	beq.n	800da72 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800da44:	893b      	ldrh	r3, [r7, #8]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00e      	beq.n	800da68 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	88da      	ldrh	r2, [r3, #6]
 800da4e:	893b      	ldrh	r3, [r7, #8]
 800da50:	4293      	cmp	r3, r2
 800da52:	bf28      	it	cs
 800da54:	4613      	movcs	r3, r2
 800da56:	b29b      	uxth	r3, r3
 800da58:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800da5a:	893b      	ldrh	r3, [r7, #8]
 800da5c:	461a      	mov	r2, r3
 800da5e:	68f9      	ldr	r1, [r7, #12]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fa3f 	bl	800dee4 <USBD_CtlSendData>
 800da66:	e009      	b.n	800da7c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800da68:	6839      	ldr	r1, [r7, #0]
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f9c9 	bl	800de02 <USBD_CtlError>
 800da70:	e004      	b.n	800da7c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 fa90 	bl	800df98 <USBD_CtlSendStatus>
 800da78:	e000      	b.n	800da7c <USBD_GetDescriptor+0x2cc>
    return;
 800da7a:	bf00      	nop
    }
  }
}
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop

0800da84 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	889b      	ldrh	r3, [r3, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d130      	bne.n	800daf8 <USBD_SetAddress+0x74>
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	88db      	ldrh	r3, [r3, #6]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d12c      	bne.n	800daf8 <USBD_SetAddress+0x74>
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	885b      	ldrh	r3, [r3, #2]
 800daa2:	2b7f      	cmp	r3, #127	; 0x7f
 800daa4:	d828      	bhi.n	800daf8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	885b      	ldrh	r3, [r3, #2]
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dab8:	2b03      	cmp	r3, #3
 800daba:	d104      	bne.n	800dac6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f99f 	bl	800de02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dac4:	e01d      	b.n	800db02 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7bfa      	ldrb	r2, [r7, #15]
 800daca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dace:	7bfb      	ldrb	r3, [r7, #15]
 800dad0:	4619      	mov	r1, r3
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 ffac 	bl	800ea30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 fa5d 	bl	800df98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d004      	beq.n	800daee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2202      	movs	r2, #2
 800dae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daec:	e009      	b.n	800db02 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daf6:	e004      	b.n	800db02 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800daf8:	6839      	ldr	r1, [r7, #0]
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f981 	bl	800de02 <USBD_CtlError>
  }
}
 800db00:	bf00      	nop
 800db02:	bf00      	nop
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
	...

0800db0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	885b      	ldrh	r3, [r3, #2]
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	4b4b      	ldr	r3, [pc, #300]	; (800dc50 <USBD_SetConfig+0x144>)
 800db22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800db24:	4b4a      	ldr	r3, [pc, #296]	; (800dc50 <USBD_SetConfig+0x144>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d905      	bls.n	800db38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800db2c:	6839      	ldr	r1, [r7, #0]
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f967 	bl	800de02 <USBD_CtlError>
    return USBD_FAIL;
 800db34:	2303      	movs	r3, #3
 800db36:	e087      	b.n	800dc48 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d002      	beq.n	800db48 <USBD_SetConfig+0x3c>
 800db42:	2b03      	cmp	r3, #3
 800db44:	d025      	beq.n	800db92 <USBD_SetConfig+0x86>
 800db46:	e071      	b.n	800dc2c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800db48:	4b41      	ldr	r3, [pc, #260]	; (800dc50 <USBD_SetConfig+0x144>)
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01c      	beq.n	800db8a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800db50:	4b3f      	ldr	r3, [pc, #252]	; (800dc50 <USBD_SetConfig+0x144>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	461a      	mov	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800db5a:	4b3d      	ldr	r3, [pc, #244]	; (800dc50 <USBD_SetConfig+0x144>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff f999 	bl	800ce98 <USBD_SetClassConfig>
 800db66:	4603      	mov	r3, r0
 800db68:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d004      	beq.n	800db7a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800db70:	6839      	ldr	r1, [r7, #0]
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f945 	bl	800de02 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800db78:	e065      	b.n	800dc46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fa0c 	bl	800df98 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2203      	movs	r2, #3
 800db84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800db88:	e05d      	b.n	800dc46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fa04 	bl	800df98 <USBD_CtlSendStatus>
    break;
 800db90:	e059      	b.n	800dc46 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800db92:	4b2f      	ldr	r3, [pc, #188]	; (800dc50 <USBD_SetConfig+0x144>)
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d112      	bne.n	800dbc0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2202      	movs	r2, #2
 800db9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800dba2:	4b2b      	ldr	r3, [pc, #172]	; (800dc50 <USBD_SetConfig+0x144>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dbac:	4b28      	ldr	r3, [pc, #160]	; (800dc50 <USBD_SetConfig+0x144>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff f98c 	bl	800ced0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 f9ed 	bl	800df98 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800dbbe:	e042      	b.n	800dc46 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800dbc0:	4b23      	ldr	r3, [pc, #140]	; (800dc50 <USBD_SetConfig+0x144>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d02a      	beq.n	800dc24 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7ff f97a 	bl	800ced0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800dbdc:	4b1c      	ldr	r3, [pc, #112]	; (800dc50 <USBD_SetConfig+0x144>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbe6:	4b1a      	ldr	r3, [pc, #104]	; (800dc50 <USBD_SetConfig+0x144>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	4619      	mov	r1, r3
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7ff f953 	bl	800ce98 <USBD_SetClassConfig>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800dbf6:	7bfb      	ldrb	r3, [r7, #15]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00f      	beq.n	800dc1c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800dbfc:	6839      	ldr	r1, [r7, #0]
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 f8ff 	bl	800de02 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff f95f 	bl	800ced0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2202      	movs	r2, #2
 800dc16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800dc1a:	e014      	b.n	800dc46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f9bb 	bl	800df98 <USBD_CtlSendStatus>
    break;
 800dc22:	e010      	b.n	800dc46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 f9b7 	bl	800df98 <USBD_CtlSendStatus>
    break;
 800dc2a:	e00c      	b.n	800dc46 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f8e7 	bl	800de02 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc34:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <USBD_SetConfig+0x144>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7ff f948 	bl	800ced0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800dc40:	2303      	movs	r3, #3
 800dc42:	73fb      	strb	r3, [r7, #15]
    break;
 800dc44:	bf00      	nop
  }

  return ret;
 800dc46:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	24005444 	.word	0x24005444

0800dc54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	88db      	ldrh	r3, [r3, #6]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d004      	beq.n	800dc70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 f8ca 	bl	800de02 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800dc6e:	e022      	b.n	800dcb6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	dc02      	bgt.n	800dc80 <USBD_GetConfig+0x2c>
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	dc03      	bgt.n	800dc86 <USBD_GetConfig+0x32>
 800dc7e:	e015      	b.n	800dcac <USBD_GetConfig+0x58>
 800dc80:	2b03      	cmp	r3, #3
 800dc82:	d00b      	beq.n	800dc9c <USBD_GetConfig+0x48>
 800dc84:	e012      	b.n	800dcac <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	3308      	adds	r3, #8
 800dc90:	2201      	movs	r2, #1
 800dc92:	4619      	mov	r1, r3
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 f925 	bl	800dee4 <USBD_CtlSendData>
      break;
 800dc9a:	e00c      	b.n	800dcb6 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	3304      	adds	r3, #4
 800dca0:	2201      	movs	r2, #1
 800dca2:	4619      	mov	r1, r3
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 f91d 	bl	800dee4 <USBD_CtlSendData>
      break;
 800dcaa:	e004      	b.n	800dcb6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f8a7 	bl	800de02 <USBD_CtlError>
      break;
 800dcb4:	bf00      	nop
}
 800dcb6:	bf00      	nop
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
 800dcc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d81e      	bhi.n	800dd12 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	88db      	ldrh	r3, [r3, #6]
 800dcd8:	2b02      	cmp	r3, #2
 800dcda:	d004      	beq.n	800dce6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f88f 	bl	800de02 <USBD_CtlError>
      break;
 800dce4:	e01a      	b.n	800dd1c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2201      	movs	r2, #1
 800dcea:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d005      	beq.n	800dd02 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	f043 0202 	orr.w	r2, r3, #2
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	330c      	adds	r3, #12
 800dd06:	2202      	movs	r2, #2
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f8ea 	bl	800dee4 <USBD_CtlSendData>
    break;
 800dd10:	e004      	b.n	800dd1c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 f874 	bl	800de02 <USBD_CtlError>
    break;
 800dd1a:	bf00      	nop
  }
}
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	885b      	ldrh	r3, [r3, #2]
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d106      	bne.n	800dd44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 f92a 	bl	800df98 <USBD_CtlSendStatus>
  }
}
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d80b      	bhi.n	800dd7a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	885b      	ldrh	r3, [r3, #2]
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d10c      	bne.n	800dd84 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 f910 	bl	800df98 <USBD_CtlSendStatus>
      }
      break;
 800dd78:	e004      	b.n	800dd84 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f840 	bl	800de02 <USBD_CtlError>
      break;
 800dd82:	e000      	b.n	800dd86 <USBD_ClrFeature+0x3a>
      break;
 800dd84:	bf00      	nop
  }
}
 800dd86:	bf00      	nop
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b084      	sub	sp, #16
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
 800dd96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	781a      	ldrb	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3301      	adds	r3, #1
 800dda8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	781a      	ldrb	r2, [r3, #0]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7ff fac6 	bl	800d34a <SWAPBYTE>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f7ff fab9 	bl	800d34a <SWAPBYTE>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	461a      	mov	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	3301      	adds	r3, #1
 800dde4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3301      	adds	r3, #1
 800ddea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f7ff faac 	bl	800d34a <SWAPBYTE>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	80da      	strh	r2, [r3, #6]
}
 800ddfa:	bf00      	nop
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b082      	sub	sp, #8
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de0c:	2180      	movs	r1, #128	; 0x80
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fda4 	bl	800e95c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de14:	2100      	movs	r1, #0
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 fda0 	bl	800e95c <USBD_LL_StallEP>
}
 800de1c:	bf00      	nop
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800de30:	2300      	movs	r3, #0
 800de32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d036      	beq.n	800dea8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800de3e:	6938      	ldr	r0, [r7, #16]
 800de40:	f000 f836 	bl	800deb0 <USBD_GetLen>
 800de44:	4603      	mov	r3, r0
 800de46:	3301      	adds	r3, #1
 800de48:	b29b      	uxth	r3, r3
 800de4a:	005b      	lsls	r3, r3, #1
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800de52:	7dfb      	ldrb	r3, [r7, #23]
 800de54:	68ba      	ldr	r2, [r7, #8]
 800de56:	4413      	add	r3, r2
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	7812      	ldrb	r2, [r2, #0]
 800de5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	3301      	adds	r3, #1
 800de62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800de64:	7dfb      	ldrb	r3, [r7, #23]
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	4413      	add	r3, r2
 800de6a:	2203      	movs	r2, #3
 800de6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800de6e:	7dfb      	ldrb	r3, [r7, #23]
 800de70:	3301      	adds	r3, #1
 800de72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800de74:	e013      	b.n	800de9e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800de76:	7dfb      	ldrb	r3, [r7, #23]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	4413      	add	r3, r2
 800de7c:	693a      	ldr	r2, [r7, #16]
 800de7e:	7812      	ldrb	r2, [r2, #0]
 800de80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	3301      	adds	r3, #1
 800de86:	613b      	str	r3, [r7, #16]
    idx++;
 800de88:	7dfb      	ldrb	r3, [r7, #23]
 800de8a:	3301      	adds	r3, #1
 800de8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	4413      	add	r3, r2
 800de94:	2200      	movs	r2, #0
 800de96:	701a      	strb	r2, [r3, #0]
    idx++;
 800de98:	7dfb      	ldrb	r3, [r7, #23]
 800de9a:	3301      	adds	r3, #1
 800de9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1e7      	bne.n	800de76 <USBD_GetString+0x52>
 800dea6:	e000      	b.n	800deaa <USBD_GetString+0x86>
    return;
 800dea8:	bf00      	nop
  }
}
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800deb8:	2300      	movs	r3, #0
 800deba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dec0:	e005      	b.n	800dece <USBD_GetLen+0x1e>
  {
    len++;
 800dec2:	7bfb      	ldrb	r3, [r7, #15]
 800dec4:	3301      	adds	r3, #1
 800dec6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	3301      	adds	r3, #1
 800decc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1f5      	bne.n	800dec2 <USBD_GetLen+0x12>
  }

  return len;
 800ded6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3714      	adds	r7, #20
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2202      	movs	r2, #2
 800def4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68ba      	ldr	r2, [r7, #8]
 800df08:	2100      	movs	r1, #0
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f000 fdaf 	bl	800ea6e <USBD_LL_Transmit>

  return USBD_OK;
 800df10:	2300      	movs	r3, #0
}
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b084      	sub	sp, #16
 800df1e:	af00      	add	r7, sp, #0
 800df20:	60f8      	str	r0, [r7, #12]
 800df22:	60b9      	str	r1, [r7, #8]
 800df24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	2100      	movs	r1, #0
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f000 fd9e 	bl	800ea6e <USBD_LL_Transmit>

  return USBD_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2203      	movs	r2, #3
 800df4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68ba      	ldr	r2, [r7, #8]
 800df64:	2100      	movs	r1, #0
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f000 fda2 	bl	800eab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b084      	sub	sp, #16
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	2100      	movs	r1, #0
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f000 fd91 	bl	800eab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df8e:	2300      	movs	r3, #0
}
 800df90:	4618      	mov	r0, r3
 800df92:	3710      	adds	r7, #16
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2204      	movs	r2, #4
 800dfa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	2200      	movs	r2, #0
 800dfac:	2100      	movs	r1, #0
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fd5d 	bl	800ea6e <USBD_LL_Transmit>

  return USBD_OK;
 800dfb4:	2300      	movs	r3, #0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b082      	sub	sp, #8
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2205      	movs	r2, #5
 800dfca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dfce:	2300      	movs	r3, #0
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 fd6b 	bl	800eab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dfe8:	2200      	movs	r2, #0
 800dfea:	4913      	ldr	r1, [pc, #76]	; (800e038 <MX_USB_DEVICE_Init+0x54>)
 800dfec:	4813      	ldr	r0, [pc, #76]	; (800e03c <MX_USB_DEVICE_Init+0x58>)
 800dfee:	f7fe fee5 	bl	800cdbc <USBD_Init>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dff8:	f7f3 fce6 	bl	80019c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dffc:	4910      	ldr	r1, [pc, #64]	; (800e040 <MX_USB_DEVICE_Init+0x5c>)
 800dffe:	480f      	ldr	r0, [pc, #60]	; (800e03c <MX_USB_DEVICE_Init+0x58>)
 800e000:	f7fe ff12 	bl	800ce28 <USBD_RegisterClass>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d001      	beq.n	800e00e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e00a:	f7f3 fcdd 	bl	80019c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e00e:	490d      	ldr	r1, [pc, #52]	; (800e044 <MX_USB_DEVICE_Init+0x60>)
 800e010:	480a      	ldr	r0, [pc, #40]	; (800e03c <MX_USB_DEVICE_Init+0x58>)
 800e012:	f7fe fe37 	bl	800cc84 <USBD_CDC_RegisterInterface>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e01c:	f7f3 fcd4 	bl	80019c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e020:	4806      	ldr	r0, [pc, #24]	; (800e03c <MX_USB_DEVICE_Init+0x58>)
 800e022:	f7fe ff22 	bl	800ce6a <USBD_Start>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e02c:	f7f3 fccc 	bl	80019c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e030:	f7f8 fc04 	bl	800683c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e034:	bf00      	nop
 800e036:	bd80      	pop	{r7, pc}
 800e038:	240039dc 	.word	0x240039dc
 800e03c:	24005448 	.word	0x24005448
 800e040:	240038c4 	.word	0x240038c4
 800e044:	240039c8 	.word	0x240039c8

0800e048 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBuffer1_FS, 0);
 800e04c:	2200      	movs	r2, #0
 800e04e:	4905      	ldr	r1, [pc, #20]	; (800e064 <CDC_Init_FS+0x1c>)
 800e050:	4805      	ldr	r0, [pc, #20]	; (800e068 <CDC_Init_FS+0x20>)
 800e052:	f7fe fe2c 	bl	800ccae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBuffer2_FS);
 800e056:	4905      	ldr	r1, [pc, #20]	; (800e06c <CDC_Init_FS+0x24>)
 800e058:	4803      	ldr	r0, [pc, #12]	; (800e068 <CDC_Init_FS+0x20>)
 800e05a:	f7fe fe41 	bl	800cce0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e05e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e060:	4618      	mov	r0, r3
 800e062:	bd80      	pop	{r7, pc}
 800e064:	24005720 	.word	0x24005720
 800e068:	24005448 	.word	0x24005448
 800e06c:	24005f24 	.word	0x24005f24

0800e070 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e070:	b480      	push	{r7}
 800e072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e074:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e076:	4618      	mov	r0, r3
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	6039      	str	r1, [r7, #0]
 800e08a:	71fb      	strb	r3, [r7, #7]
 800e08c:	4613      	mov	r3, r2
 800e08e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e090:	79fb      	ldrb	r3, [r7, #7]
 800e092:	2b23      	cmp	r3, #35	; 0x23
 800e094:	f200 808c 	bhi.w	800e1b0 <CDC_Control_FS+0x130>
 800e098:	a201      	add	r2, pc, #4	; (adr r2, 800e0a0 <CDC_Control_FS+0x20>)
 800e09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09e:	bf00      	nop
 800e0a0:	0800e1b1 	.word	0x0800e1b1
 800e0a4:	0800e1b1 	.word	0x0800e1b1
 800e0a8:	0800e1b1 	.word	0x0800e1b1
 800e0ac:	0800e1b1 	.word	0x0800e1b1
 800e0b0:	0800e1b1 	.word	0x0800e1b1
 800e0b4:	0800e1b1 	.word	0x0800e1b1
 800e0b8:	0800e1b1 	.word	0x0800e1b1
 800e0bc:	0800e1b1 	.word	0x0800e1b1
 800e0c0:	0800e1b1 	.word	0x0800e1b1
 800e0c4:	0800e1b1 	.word	0x0800e1b1
 800e0c8:	0800e1b1 	.word	0x0800e1b1
 800e0cc:	0800e1b1 	.word	0x0800e1b1
 800e0d0:	0800e1b1 	.word	0x0800e1b1
 800e0d4:	0800e1b1 	.word	0x0800e1b1
 800e0d8:	0800e1b1 	.word	0x0800e1b1
 800e0dc:	0800e1b1 	.word	0x0800e1b1
 800e0e0:	0800e1b1 	.word	0x0800e1b1
 800e0e4:	0800e1b1 	.word	0x0800e1b1
 800e0e8:	0800e1b1 	.word	0x0800e1b1
 800e0ec:	0800e1b1 	.word	0x0800e1b1
 800e0f0:	0800e1b1 	.word	0x0800e1b1
 800e0f4:	0800e1b1 	.word	0x0800e1b1
 800e0f8:	0800e1b1 	.word	0x0800e1b1
 800e0fc:	0800e1b1 	.word	0x0800e1b1
 800e100:	0800e1b1 	.word	0x0800e1b1
 800e104:	0800e1b1 	.word	0x0800e1b1
 800e108:	0800e1b1 	.word	0x0800e1b1
 800e10c:	0800e1b1 	.word	0x0800e1b1
 800e110:	0800e1b1 	.word	0x0800e1b1
 800e114:	0800e1b1 	.word	0x0800e1b1
 800e118:	0800e1b1 	.word	0x0800e1b1
 800e11c:	0800e1b1 	.word	0x0800e1b1
 800e120:	0800e131 	.word	0x0800e131
 800e124:	0800e16b 	.word	0x0800e16b
 800e128:	0800e1b1 	.word	0x0800e1b1
 800e12c:	0800e1b1 	.word	0x0800e1b1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buf[0] = pbuf[0];
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	781a      	ldrb	r2, [r3, #0]
 800e134:	4b22      	ldr	r3, [pc, #136]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e136:	701a      	strb	r2, [r3, #0]
    	buf[1] = pbuf[1];
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	785a      	ldrb	r2, [r3, #1]
 800e13c:	4b20      	ldr	r3, [pc, #128]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e13e:	705a      	strb	r2, [r3, #1]
    	buf[2] = pbuf[2];
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	789a      	ldrb	r2, [r3, #2]
 800e144:	4b1e      	ldr	r3, [pc, #120]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e146:	709a      	strb	r2, [r3, #2]
    	buf[3] = pbuf[3];
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	78da      	ldrb	r2, [r3, #3]
 800e14c:	4b1c      	ldr	r3, [pc, #112]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e14e:	70da      	strb	r2, [r3, #3]
    	buf[4] = pbuf[4];
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	791a      	ldrb	r2, [r3, #4]
 800e154:	4b1a      	ldr	r3, [pc, #104]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e156:	711a      	strb	r2, [r3, #4]
    	buf[5] = pbuf[5];
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	795a      	ldrb	r2, [r3, #5]
 800e15c:	4b18      	ldr	r3, [pc, #96]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e15e:	715a      	strb	r2, [r3, #5]
    	buf[6] = pbuf[6];
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	799a      	ldrb	r2, [r3, #6]
 800e164:	4b16      	ldr	r3, [pc, #88]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e166:	719a      	strb	r2, [r3, #6]
    break;
 800e168:	e023      	b.n	800e1b2 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buf[0];
 800e16a:	4b15      	ldr	r3, [pc, #84]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e16c:	781a      	ldrb	r2, [r3, #0]
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	701a      	strb	r2, [r3, #0]
		pbuf[1] = buf[1];
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	3301      	adds	r3, #1
 800e176:	4a12      	ldr	r2, [pc, #72]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e178:	7852      	ldrb	r2, [r2, #1]
 800e17a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = buf[2];
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	3302      	adds	r3, #2
 800e180:	4a0f      	ldr	r2, [pc, #60]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e182:	7892      	ldrb	r2, [r2, #2]
 800e184:	701a      	strb	r2, [r3, #0]
		pbuf[3] = buf[3];
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	3303      	adds	r3, #3
 800e18a:	4a0d      	ldr	r2, [pc, #52]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e18c:	78d2      	ldrb	r2, [r2, #3]
 800e18e:	701a      	strb	r2, [r3, #0]
		pbuf[4] = buf[4];
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	3304      	adds	r3, #4
 800e194:	4a0a      	ldr	r2, [pc, #40]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e196:	7912      	ldrb	r2, [r2, #4]
 800e198:	701a      	strb	r2, [r3, #0]
		pbuf[5] = buf[5];
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	3305      	adds	r3, #5
 800e19e:	4a08      	ldr	r2, [pc, #32]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e1a0:	7952      	ldrb	r2, [r2, #5]
 800e1a2:	701a      	strb	r2, [r3, #0]
		pbuf[6] = buf[6];
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	3306      	adds	r3, #6
 800e1a8:	4a05      	ldr	r2, [pc, #20]	; (800e1c0 <CDC_Control_FS+0x140>)
 800e1aa:	7992      	ldrb	r2, [r2, #6]
 800e1ac:	701a      	strb	r2, [r3, #0]
    break;
 800e1ae:	e000      	b.n	800e1b2 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e1b0:	bf00      	nop
  }

  return (USBD_OK);
 800e1b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	24005718 	.word	0x24005718

0800e1c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t len = (uint8_t) *Len; // Get length
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	733b      	strb	r3, [r7, #12]
	uint16_t tempHeadPos = rxBufferHeadPos; // Increment temp head pos while writing, then update main variable when complete
 800e1d4:	4b20      	ldr	r3, [pc, #128]	; (800e258 <CDC_Receive_FS+0x94>)
 800e1d6:	881b      	ldrh	r3, [r3, #0]
 800e1d8:	81fb      	strh	r3, [r7, #14]
	if(tempHeadPos < CDC_RX_BUFFER_SIZE) {
 800e1da:	89fb      	ldrh	r3, [r7, #14]
 800e1dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1e0:	d21c      	bcs.n	800e21c <CDC_Receive_FS+0x58>
		for (uint8_t i = 0; i < len; i++) {
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	737b      	strb	r3, [r7, #13]
 800e1e6:	e010      	b.n	800e20a <CDC_Receive_FS+0x46>
			UserRxBuffer1_FS[tempHeadPos] = Buf[i];
 800e1e8:	7b7b      	ldrb	r3, [r7, #13]
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	441a      	add	r2, r3
 800e1ee:	89fb      	ldrh	r3, [r7, #14]
 800e1f0:	7811      	ldrb	r1, [r2, #0]
 800e1f2:	4a1a      	ldr	r2, [pc, #104]	; (800e25c <CDC_Receive_FS+0x98>)
 800e1f4:	54d1      	strb	r1, [r2, r3]
			tempHeadPos = tempHeadPos + 1;
 800e1f6:	89fb      	ldrh	r3, [r7, #14]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	81fb      	strh	r3, [r7, #14]
			if (tempHeadPos >= CDC_RX_BUFFER_SIZE) {
 800e1fc:	89fb      	ldrh	r3, [r7, #14]
 800e1fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e202:	d207      	bcs.n	800e214 <CDC_Receive_FS+0x50>
		for (uint8_t i = 0; i < len; i++) {
 800e204:	7b7b      	ldrb	r3, [r7, #13]
 800e206:	3301      	adds	r3, #1
 800e208:	737b      	strb	r3, [r7, #13]
 800e20a:	7b7a      	ldrb	r2, [r7, #13]
 800e20c:	7b3b      	ldrb	r3, [r7, #12]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d3ea      	bcc.n	800e1e8 <CDC_Receive_FS+0x24>
 800e212:	e000      	b.n	800e216 <CDC_Receive_FS+0x52>
				break;
 800e214:	bf00      	nop
			}
		}
		rxBufferHeadPos = tempHeadPos;
 800e216:	4a10      	ldr	r2, [pc, #64]	; (800e258 <CDC_Receive_FS+0x94>)
 800e218:	89fb      	ldrh	r3, [r7, #14]
 800e21a:	8013      	strh	r3, [r2, #0]
	}

	if((rxBufferHeadPos >= CDC_RX_BUFFER_SIZE) || UserRxBuffer1_FS[rxBufferHeadPos-1] == '\r') {
 800e21c:	4b0e      	ldr	r3, [pc, #56]	; (800e258 <CDC_Receive_FS+0x94>)
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	b29b      	uxth	r3, r3
 800e222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e226:	d207      	bcs.n	800e238 <CDC_Receive_FS+0x74>
 800e228:	4b0b      	ldr	r3, [pc, #44]	; (800e258 <CDC_Receive_FS+0x94>)
 800e22a:	881b      	ldrh	r3, [r3, #0]
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	3b01      	subs	r3, #1
 800e230:	4a0a      	ldr	r2, [pc, #40]	; (800e25c <CDC_Receive_FS+0x98>)
 800e232:	5cd3      	ldrb	r3, [r2, r3]
 800e234:	2b0d      	cmp	r3, #13
 800e236:	d103      	bne.n	800e240 <CDC_Receive_FS+0x7c>
		rxBufferFull = 1;
 800e238:	4b09      	ldr	r3, [pc, #36]	; (800e260 <CDC_Receive_FS+0x9c>)
 800e23a:	2201      	movs	r2, #1
 800e23c:	701a      	strb	r2, [r3, #0]
 800e23e:	e002      	b.n	800e246 <CDC_Receive_FS+0x82>
	} else {
		USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e240:	4808      	ldr	r0, [pc, #32]	; (800e264 <CDC_Receive_FS+0xa0>)
 800e242:	f7fe fd91 	bl	800cd68 <USBD_CDC_ReceivePacket>
	}
	HAL_IWDG_Refresh(&hiwdg1);
 800e246:	4808      	ldr	r0, [pc, #32]	; (800e268 <CDC_Receive_FS+0xa4>)
 800e248:	f7f7 f8d2 	bl	80053f0 <HAL_IWDG_Refresh>

	return (USBD_OK);
 800e24c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	24005b20 	.word	0x24005b20
 800e25c:	24005b24 	.word	0x24005b24
 800e260:	24005b22 	.word	0x24005b22
 800e264:	24005448 	.word	0x24005448
 800e268:	24003c80 	.word	0x24003c80

0800e26c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	460b      	mov	r3, r1
 800e276:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  transmit_complete = 0;
 800e27c:	4b10      	ldr	r3, [pc, #64]	; (800e2c0 <CDC_Transmit_FS+0x54>)
 800e27e:	2200      	movs	r2, #0
 800e280:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e282:	4b10      	ldr	r3, [pc, #64]	; (800e2c4 <CDC_Transmit_FS+0x58>)
 800e284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e288:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e290:	2b00      	cmp	r3, #0
 800e292:	d001      	beq.n	800e298 <CDC_Transmit_FS+0x2c>
    return USBD_BUSY;
 800e294:	2301      	movs	r3, #1
 800e296:	e00e      	b.n	800e2b6 <CDC_Transmit_FS+0x4a>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e298:	887b      	ldrh	r3, [r7, #2]
 800e29a:	461a      	mov	r2, r3
 800e29c:	6879      	ldr	r1, [r7, #4]
 800e29e:	4809      	ldr	r0, [pc, #36]	; (800e2c4 <CDC_Transmit_FS+0x58>)
 800e2a0:	f7fe fd05 	bl	800ccae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e2a4:	4807      	ldr	r0, [pc, #28]	; (800e2c4 <CDC_Transmit_FS+0x58>)
 800e2a6:	f7fe fd2f 	bl	800cd08 <USBD_CDC_TransmitPacket>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	73fb      	strb	r3, [r7, #15]
  HAL_IWDG_Refresh(&hiwdg1);
 800e2ae:	4806      	ldr	r0, [pc, #24]	; (800e2c8 <CDC_Transmit_FS+0x5c>)
 800e2b0:	f7f7 f89e 	bl	80053f0 <HAL_IWDG_Refresh>
  /* USER CODE END 7 */
  return result;
 800e2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	240039c7 	.word	0x240039c7
 800e2c4:	24005448 	.word	0x24005448
 800e2c8:	24003c80 	.word	0x24003c80

0800e2cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b087      	sub	sp, #28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  transmit_complete = 1;
 800e2de:	4b05      	ldr	r3, [pc, #20]	; (800e2f4 <CDC_TransmitCplt_FS+0x28>)
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	701a      	strb	r2, [r3, #0]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e2e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	371c      	adds	r7, #28
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr
 800e2f4:	240039c7 	.word	0x240039c7

0800e2f8 <CDC_Receive_Complete_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Receive_Complete_FS()
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	af00      	add	r7, sp, #0
	return rxBufferFull;
 800e2fc:	4b03      	ldr	r3, [pc, #12]	; (800e30c <CDC_Receive_Complete_FS+0x14>)
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	b2db      	uxtb	r3, r3
}
 800e302:	4618      	mov	r0, r3
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	24005b22 	.word	0x24005b22

0800e310 <CDC_Transmit_Complete_FS>:

uint8_t CDC_Transmit_Complete_FS()
{
 800e310:	b480      	push	{r7}
 800e312:	af00      	add	r7, sp, #0
	return transmit_complete;
 800e314:	4b03      	ldr	r3, [pc, #12]	; (800e324 <CDC_Transmit_Complete_FS+0x14>)
 800e316:	781b      	ldrb	r3, [r3, #0]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	240039c7 	.word	0x240039c7

0800e328 <CDC_Receive_Data>:

void* CDC_Receive_Data() {
 800e328:	b580      	push	{r7, lr}
 800e32a:	af00      	add	r7, sp, #0
	rxBufferHeadPos = 0;
 800e32c:	4b05      	ldr	r3, [pc, #20]	; (800e344 <CDC_Receive_Data+0x1c>)
 800e32e:	2200      	movs	r2, #0
 800e330:	801a      	strh	r2, [r3, #0]
	rxBufferFull = 0;
 800e332:	4b05      	ldr	r3, [pc, #20]	; (800e348 <CDC_Receive_Data+0x20>)
 800e334:	2200      	movs	r2, #0
 800e336:	701a      	strb	r2, [r3, #0]
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e338:	4804      	ldr	r0, [pc, #16]	; (800e34c <CDC_Receive_Data+0x24>)
 800e33a:	f7fe fd15 	bl	800cd68 <USBD_CDC_ReceivePacket>
	return &UserRxBuffer1_FS;
 800e33e:	4b04      	ldr	r3, [pc, #16]	; (800e350 <CDC_Receive_Data+0x28>)
}
 800e340:	4618      	mov	r0, r3
 800e342:	bd80      	pop	{r7, pc}
 800e344:	24005b20 	.word	0x24005b20
 800e348:	24005b22 	.word	0x24005b22
 800e34c:	24005448 	.word	0x24005448
 800e350:	24005b24 	.word	0x24005b24

0800e354 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	4603      	mov	r3, r0
 800e35c:	6039      	str	r1, [r7, #0]
 800e35e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2212      	movs	r2, #18
 800e364:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e366:	4b03      	ldr	r3, [pc, #12]	; (800e374 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e368:	4618      	mov	r0, r3
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	240039f8 	.word	0x240039f8

0800e378 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	4603      	mov	r3, r0
 800e380:	6039      	str	r1, [r7, #0]
 800e382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	2204      	movs	r2, #4
 800e388:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e38a:	4b03      	ldr	r3, [pc, #12]	; (800e398 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr
 800e398:	24003a0c 	.word	0x24003a0c

0800e39c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	6039      	str	r1, [r7, #0]
 800e3a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e3a8:	79fb      	ldrb	r3, [r7, #7]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d105      	bne.n	800e3ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e3ae:	683a      	ldr	r2, [r7, #0]
 800e3b0:	4907      	ldr	r1, [pc, #28]	; (800e3d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e3b2:	4808      	ldr	r0, [pc, #32]	; (800e3d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e3b4:	f7ff fd36 	bl	800de24 <USBD_GetString>
 800e3b8:	e004      	b.n	800e3c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e3ba:	683a      	ldr	r2, [r7, #0]
 800e3bc:	4904      	ldr	r1, [pc, #16]	; (800e3d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e3be:	4805      	ldr	r0, [pc, #20]	; (800e3d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e3c0:	f7ff fd30 	bl	800de24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3c4:	4b02      	ldr	r3, [pc, #8]	; (800e3d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	24005f64 	.word	0x24005f64
 800e3d4:	08011e8c 	.word	0x08011e8c

0800e3d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	4603      	mov	r3, r0
 800e3e0:	6039      	str	r1, [r7, #0]
 800e3e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e3e4:	683a      	ldr	r2, [r7, #0]
 800e3e6:	4904      	ldr	r1, [pc, #16]	; (800e3f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e3e8:	4804      	ldr	r0, [pc, #16]	; (800e3fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e3ea:	f7ff fd1b 	bl	800de24 <USBD_GetString>
  return USBD_StrDesc;
 800e3ee:	4b02      	ldr	r3, [pc, #8]	; (800e3f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	24005f64 	.word	0x24005f64
 800e3fc:	08011ea4 	.word	0x08011ea4

0800e400 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	4603      	mov	r3, r0
 800e408:	6039      	str	r1, [r7, #0]
 800e40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	221a      	movs	r2, #26
 800e410:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e412:	f000 f843 	bl	800e49c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e416:	4b02      	ldr	r3, [pc, #8]	; (800e420 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	24003a10 	.word	0x24003a10

0800e424 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	4603      	mov	r3, r0
 800e42c:	6039      	str	r1, [r7, #0]
 800e42e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e430:	79fb      	ldrb	r3, [r7, #7]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d105      	bne.n	800e442 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e436:	683a      	ldr	r2, [r7, #0]
 800e438:	4907      	ldr	r1, [pc, #28]	; (800e458 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e43a:	4808      	ldr	r0, [pc, #32]	; (800e45c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e43c:	f7ff fcf2 	bl	800de24 <USBD_GetString>
 800e440:	e004      	b.n	800e44c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e442:	683a      	ldr	r2, [r7, #0]
 800e444:	4904      	ldr	r1, [pc, #16]	; (800e458 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e446:	4805      	ldr	r0, [pc, #20]	; (800e45c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e448:	f7ff fcec 	bl	800de24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e44c:	4b02      	ldr	r3, [pc, #8]	; (800e458 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3708      	adds	r7, #8
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	24005f64 	.word	0x24005f64
 800e45c:	08011eb8 	.word	0x08011eb8

0800e460 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	4603      	mov	r3, r0
 800e468:	6039      	str	r1, [r7, #0]
 800e46a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e46c:	79fb      	ldrb	r3, [r7, #7]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d105      	bne.n	800e47e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e472:	683a      	ldr	r2, [r7, #0]
 800e474:	4907      	ldr	r1, [pc, #28]	; (800e494 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e476:	4808      	ldr	r0, [pc, #32]	; (800e498 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e478:	f7ff fcd4 	bl	800de24 <USBD_GetString>
 800e47c:	e004      	b.n	800e488 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e47e:	683a      	ldr	r2, [r7, #0]
 800e480:	4904      	ldr	r1, [pc, #16]	; (800e494 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e482:	4805      	ldr	r0, [pc, #20]	; (800e498 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e484:	f7ff fcce 	bl	800de24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e488:	4b02      	ldr	r3, [pc, #8]	; (800e494 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	24005f64 	.word	0x24005f64
 800e498:	08011ec4 	.word	0x08011ec4

0800e49c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e4a2:	4b0f      	ldr	r3, [pc, #60]	; (800e4e0 <Get_SerialNum+0x44>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e4a8:	4b0e      	ldr	r3, [pc, #56]	; (800e4e4 <Get_SerialNum+0x48>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e4ae:	4b0e      	ldr	r3, [pc, #56]	; (800e4e8 <Get_SerialNum+0x4c>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d009      	beq.n	800e4d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e4c2:	2208      	movs	r2, #8
 800e4c4:	4909      	ldr	r1, [pc, #36]	; (800e4ec <Get_SerialNum+0x50>)
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f000 f814 	bl	800e4f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e4cc:	2204      	movs	r2, #4
 800e4ce:	4908      	ldr	r1, [pc, #32]	; (800e4f0 <Get_SerialNum+0x54>)
 800e4d0:	68b8      	ldr	r0, [r7, #8]
 800e4d2:	f000 f80f 	bl	800e4f4 <IntToUnicode>
  }
}
 800e4d6:	bf00      	nop
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	1ff1e800 	.word	0x1ff1e800
 800e4e4:	1ff1e804 	.word	0x1ff1e804
 800e4e8:	1ff1e808 	.word	0x1ff1e808
 800e4ec:	24003a12 	.word	0x24003a12
 800e4f0:	24003a22 	.word	0x24003a22

0800e4f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b087      	sub	sp, #28
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	4613      	mov	r3, r2
 800e500:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e502:	2300      	movs	r3, #0
 800e504:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e506:	2300      	movs	r3, #0
 800e508:	75fb      	strb	r3, [r7, #23]
 800e50a:	e027      	b.n	800e55c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	0f1b      	lsrs	r3, r3, #28
 800e510:	2b09      	cmp	r3, #9
 800e512:	d80b      	bhi.n	800e52c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	0f1b      	lsrs	r3, r3, #28
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	7dfb      	ldrb	r3, [r7, #23]
 800e51c:	005b      	lsls	r3, r3, #1
 800e51e:	4619      	mov	r1, r3
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	440b      	add	r3, r1
 800e524:	3230      	adds	r2, #48	; 0x30
 800e526:	b2d2      	uxtb	r2, r2
 800e528:	701a      	strb	r2, [r3, #0]
 800e52a:	e00a      	b.n	800e542 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	0f1b      	lsrs	r3, r3, #28
 800e530:	b2da      	uxtb	r2, r3
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	005b      	lsls	r3, r3, #1
 800e536:	4619      	mov	r1, r3
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	440b      	add	r3, r1
 800e53c:	3237      	adds	r2, #55	; 0x37
 800e53e:	b2d2      	uxtb	r2, r2
 800e540:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	011b      	lsls	r3, r3, #4
 800e546:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e548:	7dfb      	ldrb	r3, [r7, #23]
 800e54a:	005b      	lsls	r3, r3, #1
 800e54c:	3301      	adds	r3, #1
 800e54e:	68ba      	ldr	r2, [r7, #8]
 800e550:	4413      	add	r3, r2
 800e552:	2200      	movs	r2, #0
 800e554:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e556:	7dfb      	ldrb	r3, [r7, #23]
 800e558:	3301      	adds	r3, #1
 800e55a:	75fb      	strb	r3, [r7, #23]
 800e55c:	7dfa      	ldrb	r2, [r7, #23]
 800e55e:	79fb      	ldrb	r3, [r7, #7]
 800e560:	429a      	cmp	r2, r3
 800e562:	d3d3      	bcc.n	800e50c <IntToUnicode+0x18>
  }
}
 800e564:	bf00      	nop
 800e566:	bf00      	nop
 800e568:	371c      	adds	r7, #28
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr
	...

0800e574 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b08a      	sub	sp, #40	; 0x28
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e57c:	f107 0314 	add.w	r3, r7, #20
 800e580:	2200      	movs	r2, #0
 800e582:	601a      	str	r2, [r3, #0]
 800e584:	605a      	str	r2, [r3, #4]
 800e586:	609a      	str	r2, [r3, #8]
 800e588:	60da      	str	r2, [r3, #12]
 800e58a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a1e      	ldr	r2, [pc, #120]	; (800e60c <HAL_PCD_MspInit+0x98>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d136      	bne.n	800e604 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e596:	4b1e      	ldr	r3, [pc, #120]	; (800e610 <HAL_PCD_MspInit+0x9c>)
 800e598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e59c:	4a1c      	ldr	r2, [pc, #112]	; (800e610 <HAL_PCD_MspInit+0x9c>)
 800e59e:	f043 0301 	orr.w	r3, r3, #1
 800e5a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e5a6:	4b1a      	ldr	r3, [pc, #104]	; (800e610 <HAL_PCD_MspInit+0x9c>)
 800e5a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	613b      	str	r3, [r7, #16]
 800e5b2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e5b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e5b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5ba:	2302      	movs	r3, #2
 800e5bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e5c6:	230a      	movs	r3, #10
 800e5c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5ca:	f107 0314 	add.w	r3, r7, #20
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4810      	ldr	r0, [pc, #64]	; (800e614 <HAL_PCD_MspInit+0xa0>)
 800e5d2:	f7f6 fcc1 	bl	8004f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e5d6:	4b0e      	ldr	r3, [pc, #56]	; (800e610 <HAL_PCD_MspInit+0x9c>)
 800e5d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e5dc:	4a0c      	ldr	r2, [pc, #48]	; (800e610 <HAL_PCD_MspInit+0x9c>)
 800e5de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e5e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e5e6:	4b0a      	ldr	r3, [pc, #40]	; (800e610 <HAL_PCD_MspInit+0x9c>)
 800e5e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e5ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5f0:	60fb      	str	r3, [r7, #12]
 800e5f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	2065      	movs	r0, #101	; 0x65
 800e5fa:	f7f6 fc78 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e5fe:	2065      	movs	r0, #101	; 0x65
 800e600:	f7f6 fc8f 	bl	8004f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e604:	bf00      	nop
 800e606:	3728      	adds	r7, #40	; 0x28
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	40080000 	.word	0x40080000
 800e610:	58024400 	.word	0x58024400
 800e614:	58020000 	.word	0x58020000

0800e618 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e62c:	4619      	mov	r1, r3
 800e62e:	4610      	mov	r0, r2
 800e630:	f7fe fc66 	bl	800cf00 <USBD_LL_SetupStage>
}
 800e634:	bf00      	nop
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	460b      	mov	r3, r1
 800e646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e64e:	78fa      	ldrb	r2, [r7, #3]
 800e650:	6879      	ldr	r1, [r7, #4]
 800e652:	4613      	mov	r3, r2
 800e654:	00db      	lsls	r3, r3, #3
 800e656:	1a9b      	subs	r3, r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	440b      	add	r3, r1
 800e65c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	78fb      	ldrb	r3, [r7, #3]
 800e664:	4619      	mov	r1, r3
 800e666:	f7fe fca0 	bl	800cfaa <USBD_LL_DataOutStage>
}
 800e66a:	bf00      	nop
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e672:	b580      	push	{r7, lr}
 800e674:	b082      	sub	sp, #8
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	460b      	mov	r3, r1
 800e67c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e684:	78fa      	ldrb	r2, [r7, #3]
 800e686:	6879      	ldr	r1, [r7, #4]
 800e688:	4613      	mov	r3, r2
 800e68a:	00db      	lsls	r3, r3, #3
 800e68c:	1a9b      	subs	r3, r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	440b      	add	r3, r1
 800e692:	3348      	adds	r3, #72	; 0x48
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	78fb      	ldrb	r3, [r7, #3]
 800e698:	4619      	mov	r1, r3
 800e69a:	f7fe fce9 	bl	800d070 <USBD_LL_DataInStage>
}
 800e69e:	bf00      	nop
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b082      	sub	sp, #8
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fe fded 	bl	800d294 <USBD_LL_SOF>
}
 800e6ba:	bf00      	nop
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	68db      	ldr	r3, [r3, #12]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d102      	bne.n	800e6dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	73fb      	strb	r3, [r7, #15]
 800e6da:	e008      	b.n	800e6ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	2b02      	cmp	r3, #2
 800e6e2:	d102      	bne.n	800e6ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	73fb      	strb	r3, [r7, #15]
 800e6e8:	e001      	b.n	800e6ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e6ea:	f7f3 f96d 	bl	80019c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e6f4:	7bfa      	ldrb	r2, [r7, #15]
 800e6f6:	4611      	mov	r1, r2
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fe fd90 	bl	800d21e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe fd49 	bl	800d19c <USBD_LL_Reset>
}
 800e70a:	bf00      	nop
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
	...

0800e714 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e722:	4618      	mov	r0, r3
 800e724:	f7fe fd8b 	bl	800d23e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	6812      	ldr	r2, [r2, #0]
 800e736:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e73a:	f043 0301 	orr.w	r3, r3, #1
 800e73e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a1b      	ldr	r3, [r3, #32]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d005      	beq.n	800e754 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e748:	4b04      	ldr	r3, [pc, #16]	; (800e75c <HAL_PCD_SuspendCallback+0x48>)
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	4a03      	ldr	r2, [pc, #12]	; (800e75c <HAL_PCD_SuspendCallback+0x48>)
 800e74e:	f043 0306 	orr.w	r3, r3, #6
 800e752:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e754:	bf00      	nop
 800e756:	3708      	adds	r7, #8
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	e000ed00 	.word	0xe000ed00

0800e760 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fd7a 	bl	800d268 <USBD_LL_Resume>
}
 800e774:	bf00      	nop
 800e776:	3708      	adds	r7, #8
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	460b      	mov	r3, r1
 800e786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e78e:	78fa      	ldrb	r2, [r7, #3]
 800e790:	4611      	mov	r1, r2
 800e792:	4618      	mov	r0, r3
 800e794:	f7fe fda5 	bl	800d2e2 <USBD_LL_IsoOUTIncomplete>
}
 800e798:	bf00      	nop
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e7b2:	78fa      	ldrb	r2, [r7, #3]
 800e7b4:	4611      	mov	r1, r2
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fe fd86 	bl	800d2c8 <USBD_LL_IsoINIncomplete>
}
 800e7bc:	bf00      	nop
 800e7be:	3708      	adds	r7, #8
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fe fd92 	bl	800d2fc <USBD_LL_DevConnected>
}
 800e7d8:	bf00      	nop
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fe fd8f 	bl	800d312 <USBD_LL_DevDisconnected>
}
 800e7f4:	bf00      	nop
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d13e      	bne.n	800e88a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e80c:	4a21      	ldr	r2, [pc, #132]	; (800e894 <USBD_LL_Init+0x98>)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4a1f      	ldr	r2, [pc, #124]	; (800e894 <USBD_LL_Init+0x98>)
 800e818:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e81c:	4b1d      	ldr	r3, [pc, #116]	; (800e894 <USBD_LL_Init+0x98>)
 800e81e:	4a1e      	ldr	r2, [pc, #120]	; (800e898 <USBD_LL_Init+0x9c>)
 800e820:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e822:	4b1c      	ldr	r3, [pc, #112]	; (800e894 <USBD_LL_Init+0x98>)
 800e824:	2209      	movs	r2, #9
 800e826:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e828:	4b1a      	ldr	r3, [pc, #104]	; (800e894 <USBD_LL_Init+0x98>)
 800e82a:	2202      	movs	r2, #2
 800e82c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e82e:	4b19      	ldr	r3, [pc, #100]	; (800e894 <USBD_LL_Init+0x98>)
 800e830:	2200      	movs	r2, #0
 800e832:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e834:	4b17      	ldr	r3, [pc, #92]	; (800e894 <USBD_LL_Init+0x98>)
 800e836:	2202      	movs	r2, #2
 800e838:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e83a:	4b16      	ldr	r3, [pc, #88]	; (800e894 <USBD_LL_Init+0x98>)
 800e83c:	2200      	movs	r2, #0
 800e83e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e840:	4b14      	ldr	r3, [pc, #80]	; (800e894 <USBD_LL_Init+0x98>)
 800e842:	2200      	movs	r2, #0
 800e844:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e846:	4b13      	ldr	r3, [pc, #76]	; (800e894 <USBD_LL_Init+0x98>)
 800e848:	2200      	movs	r2, #0
 800e84a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e84c:	4b11      	ldr	r3, [pc, #68]	; (800e894 <USBD_LL_Init+0x98>)
 800e84e:	2200      	movs	r2, #0
 800e850:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e852:	4b10      	ldr	r3, [pc, #64]	; (800e894 <USBD_LL_Init+0x98>)
 800e854:	2200      	movs	r2, #0
 800e856:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e858:	4b0e      	ldr	r3, [pc, #56]	; (800e894 <USBD_LL_Init+0x98>)
 800e85a:	2200      	movs	r2, #0
 800e85c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e85e:	480d      	ldr	r0, [pc, #52]	; (800e894 <USBD_LL_Init+0x98>)
 800e860:	f7f6 fdd6 	bl	8005410 <HAL_PCD_Init>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e86a:	f7f3 f8ad 	bl	80019c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e86e:	2180      	movs	r1, #128	; 0x80
 800e870:	4808      	ldr	r0, [pc, #32]	; (800e894 <USBD_LL_Init+0x98>)
 800e872:	f7f7 ff68 	bl	8006746 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e876:	2240      	movs	r2, #64	; 0x40
 800e878:	2100      	movs	r1, #0
 800e87a:	4806      	ldr	r0, [pc, #24]	; (800e894 <USBD_LL_Init+0x98>)
 800e87c:	f7f7 ff1c 	bl	80066b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e880:	2280      	movs	r2, #128	; 0x80
 800e882:	2101      	movs	r1, #1
 800e884:	4803      	ldr	r0, [pc, #12]	; (800e894 <USBD_LL_Init+0x98>)
 800e886:	f7f7 ff17 	bl	80066b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e88a:	2300      	movs	r3, #0
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	24006164 	.word	0x24006164
 800e898:	40080000 	.word	0x40080000

0800e89c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7f6 fed0 	bl	8005658 <HAL_PCD_Start>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8bc:	7bfb      	ldrb	r3, [r7, #15]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f000 f92a 	bl	800eb18 <USBD_Get_USB_Status>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b084      	sub	sp, #16
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
 800e8da:	4608      	mov	r0, r1
 800e8dc:	4611      	mov	r1, r2
 800e8de:	461a      	mov	r2, r3
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	70fb      	strb	r3, [r7, #3]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	70bb      	strb	r3, [r7, #2]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e8fa:	78bb      	ldrb	r3, [r7, #2]
 800e8fc:	883a      	ldrh	r2, [r7, #0]
 800e8fe:	78f9      	ldrb	r1, [r7, #3]
 800e900:	f7f7 fae1 	bl	8005ec6 <HAL_PCD_EP_Open>
 800e904:	4603      	mov	r3, r0
 800e906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e908:	7bfb      	ldrb	r3, [r7, #15]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f000 f904 	bl	800eb18 <USBD_Get_USB_Status>
 800e910:	4603      	mov	r3, r0
 800e912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e914:	7bbb      	ldrb	r3, [r7, #14]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}

0800e91e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e91e:	b580      	push	{r7, lr}
 800e920:	b084      	sub	sp, #16
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
 800e926:	460b      	mov	r3, r1
 800e928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e92a:	2300      	movs	r3, #0
 800e92c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e92e:	2300      	movs	r3, #0
 800e930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e938:	78fa      	ldrb	r2, [r7, #3]
 800e93a:	4611      	mov	r1, r2
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7f7 fb2a 	bl	8005f96 <HAL_PCD_EP_Close>
 800e942:	4603      	mov	r3, r0
 800e944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e946:	7bfb      	ldrb	r3, [r7, #15]
 800e948:	4618      	mov	r0, r3
 800e94a:	f000 f8e5 	bl	800eb18 <USBD_Get_USB_Status>
 800e94e:	4603      	mov	r3, r0
 800e950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e952:	7bbb      	ldrb	r3, [r7, #14]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	460b      	mov	r3, r1
 800e966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e968:	2300      	movs	r3, #0
 800e96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e976:	78fa      	ldrb	r2, [r7, #3]
 800e978:	4611      	mov	r1, r2
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7f7 fc02 	bl	8006184 <HAL_PCD_EP_SetStall>
 800e980:	4603      	mov	r3, r0
 800e982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e984:	7bfb      	ldrb	r3, [r7, #15]
 800e986:	4618      	mov	r0, r3
 800e988:	f000 f8c6 	bl	800eb18 <USBD_Get_USB_Status>
 800e98c:	4603      	mov	r3, r0
 800e98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e990:	7bbb      	ldrb	r3, [r7, #14]
}
 800e992:	4618      	mov	r0, r3
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b084      	sub	sp, #16
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e9b4:	78fa      	ldrb	r2, [r7, #3]
 800e9b6:	4611      	mov	r1, r2
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7f7 fc47 	bl	800624c <HAL_PCD_EP_ClrStall>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9c2:	7bfb      	ldrb	r3, [r7, #15]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f000 f8a7 	bl	800eb18 <USBD_Get_USB_Status>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e9ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e9ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	da0b      	bge.n	800ea0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e9f4:	78fb      	ldrb	r3, [r7, #3]
 800e9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e9fa:	68f9      	ldr	r1, [r7, #12]
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	00db      	lsls	r3, r3, #3
 800ea00:	1a9b      	subs	r3, r3, r2
 800ea02:	009b      	lsls	r3, r3, #2
 800ea04:	440b      	add	r3, r1
 800ea06:	333e      	adds	r3, #62	; 0x3e
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	e00b      	b.n	800ea24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ea0c:	78fb      	ldrb	r3, [r7, #3]
 800ea0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea12:	68f9      	ldr	r1, [r7, #12]
 800ea14:	4613      	mov	r3, r2
 800ea16:	00db      	lsls	r3, r3, #3
 800ea18:	1a9b      	subs	r3, r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	440b      	add	r3, r1
 800ea1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea22:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3714      	adds	r7, #20
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	460b      	mov	r3, r1
 800ea3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea40:	2300      	movs	r3, #0
 800ea42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea4a:	78fa      	ldrb	r2, [r7, #3]
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7f7 fa14 	bl	8005e7c <HAL_PCD_SetAddress>
 800ea54:	4603      	mov	r3, r0
 800ea56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea58:	7bfb      	ldrb	r3, [r7, #15]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f000 f85c 	bl	800eb18 <USBD_Get_USB_Status>
 800ea60:	4603      	mov	r3, r0
 800ea62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b086      	sub	sp, #24
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	60f8      	str	r0, [r7, #12]
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	603b      	str	r3, [r7, #0]
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ea8c:	7af9      	ldrb	r1, [r7, #11]
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	f7f7 fb2d 	bl	80060f0 <HAL_PCD_EP_Transmit>
 800ea96:	4603      	mov	r3, r0
 800ea98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea9a:	7dfb      	ldrb	r3, [r7, #23]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f000 f83b 	bl	800eb18 <USBD_Get_USB_Status>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eaa6:	7dbb      	ldrb	r3, [r7, #22]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3718      	adds	r7, #24
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b086      	sub	sp, #24
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	607a      	str	r2, [r7, #4]
 800eaba:	603b      	str	r3, [r7, #0]
 800eabc:	460b      	mov	r3, r1
 800eabe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eac0:	2300      	movs	r3, #0
 800eac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eac4:	2300      	movs	r3, #0
 800eac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eace:	7af9      	ldrb	r1, [r7, #11]
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	f7f7 faa9 	bl	800602a <HAL_PCD_EP_Receive>
 800ead8:	4603      	mov	r3, r0
 800eada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eadc:	7dfb      	ldrb	r3, [r7, #23]
 800eade:	4618      	mov	r0, r3
 800eae0:	f000 f81a 	bl	800eb18 <USBD_Get_USB_Status>
 800eae4:	4603      	mov	r3, r0
 800eae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eae8:	7dbb      	ldrb	r3, [r7, #22]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3718      	adds	r7, #24
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
 800eafa:	460b      	mov	r3, r1
 800eafc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb04:	78fa      	ldrb	r2, [r7, #3]
 800eb06:	4611      	mov	r1, r2
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7f7 fad9 	bl	80060c0 <HAL_PCD_EP_GetRxCount>
 800eb0e:	4603      	mov	r3, r0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4603      	mov	r3, r0
 800eb20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eb26:	79fb      	ldrb	r3, [r7, #7]
 800eb28:	2b03      	cmp	r3, #3
 800eb2a:	d817      	bhi.n	800eb5c <USBD_Get_USB_Status+0x44>
 800eb2c:	a201      	add	r2, pc, #4	; (adr r2, 800eb34 <USBD_Get_USB_Status+0x1c>)
 800eb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb32:	bf00      	nop
 800eb34:	0800eb45 	.word	0x0800eb45
 800eb38:	0800eb4b 	.word	0x0800eb4b
 800eb3c:	0800eb51 	.word	0x0800eb51
 800eb40:	0800eb57 	.word	0x0800eb57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	73fb      	strb	r3, [r7, #15]
    break;
 800eb48:	e00b      	b.n	800eb62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb4e:	e008      	b.n	800eb62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb50:	2301      	movs	r3, #1
 800eb52:	73fb      	strb	r3, [r7, #15]
    break;
 800eb54:	e005      	b.n	800eb62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb56:	2303      	movs	r3, #3
 800eb58:	73fb      	strb	r3, [r7, #15]
    break;
 800eb5a:	e002      	b.n	800eb62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eb5c:	2303      	movs	r3, #3
 800eb5e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb60:	bf00      	nop
  }
  return usb_status;
 800eb62:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3714      	adds	r7, #20
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <__errno>:
 800eb70:	4b01      	ldr	r3, [pc, #4]	; (800eb78 <__errno+0x8>)
 800eb72:	6818      	ldr	r0, [r3, #0]
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	24003a2c 	.word	0x24003a2c

0800eb7c <__libc_init_array>:
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	4d0d      	ldr	r5, [pc, #52]	; (800ebb4 <__libc_init_array+0x38>)
 800eb80:	4c0d      	ldr	r4, [pc, #52]	; (800ebb8 <__libc_init_array+0x3c>)
 800eb82:	1b64      	subs	r4, r4, r5
 800eb84:	10a4      	asrs	r4, r4, #2
 800eb86:	2600      	movs	r6, #0
 800eb88:	42a6      	cmp	r6, r4
 800eb8a:	d109      	bne.n	800eba0 <__libc_init_array+0x24>
 800eb8c:	4d0b      	ldr	r5, [pc, #44]	; (800ebbc <__libc_init_array+0x40>)
 800eb8e:	4c0c      	ldr	r4, [pc, #48]	; (800ebc0 <__libc_init_array+0x44>)
 800eb90:	f003 f912 	bl	8011db8 <_init>
 800eb94:	1b64      	subs	r4, r4, r5
 800eb96:	10a4      	asrs	r4, r4, #2
 800eb98:	2600      	movs	r6, #0
 800eb9a:	42a6      	cmp	r6, r4
 800eb9c:	d105      	bne.n	800ebaa <__libc_init_array+0x2e>
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eba4:	4798      	blx	r3
 800eba6:	3601      	adds	r6, #1
 800eba8:	e7ee      	b.n	800eb88 <__libc_init_array+0xc>
 800ebaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebae:	4798      	blx	r3
 800ebb0:	3601      	adds	r6, #1
 800ebb2:	e7f2      	b.n	800eb9a <__libc_init_array+0x1e>
 800ebb4:	08012490 	.word	0x08012490
 800ebb8:	08012490 	.word	0x08012490
 800ebbc:	08012490 	.word	0x08012490
 800ebc0:	08012494 	.word	0x08012494

0800ebc4 <malloc>:
 800ebc4:	4b02      	ldr	r3, [pc, #8]	; (800ebd0 <malloc+0xc>)
 800ebc6:	4601      	mov	r1, r0
 800ebc8:	6818      	ldr	r0, [r3, #0]
 800ebca:	f000 b88d 	b.w	800ece8 <_malloc_r>
 800ebce:	bf00      	nop
 800ebd0:	24003a2c 	.word	0x24003a2c

0800ebd4 <free>:
 800ebd4:	4b02      	ldr	r3, [pc, #8]	; (800ebe0 <free+0xc>)
 800ebd6:	4601      	mov	r1, r0
 800ebd8:	6818      	ldr	r0, [r3, #0]
 800ebda:	f000 b819 	b.w	800ec10 <_free_r>
 800ebde:	bf00      	nop
 800ebe0:	24003a2c 	.word	0x24003a2c

0800ebe4 <memcpy>:
 800ebe4:	440a      	add	r2, r1
 800ebe6:	4291      	cmp	r1, r2
 800ebe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebec:	d100      	bne.n	800ebf0 <memcpy+0xc>
 800ebee:	4770      	bx	lr
 800ebf0:	b510      	push	{r4, lr}
 800ebf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebfa:	4291      	cmp	r1, r2
 800ebfc:	d1f9      	bne.n	800ebf2 <memcpy+0xe>
 800ebfe:	bd10      	pop	{r4, pc}

0800ec00 <memset>:
 800ec00:	4402      	add	r2, r0
 800ec02:	4603      	mov	r3, r0
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d100      	bne.n	800ec0a <memset+0xa>
 800ec08:	4770      	bx	lr
 800ec0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec0e:	e7f9      	b.n	800ec04 <memset+0x4>

0800ec10 <_free_r>:
 800ec10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec12:	2900      	cmp	r1, #0
 800ec14:	d044      	beq.n	800eca0 <_free_r+0x90>
 800ec16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec1a:	9001      	str	r0, [sp, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ec22:	bfb8      	it	lt
 800ec24:	18e4      	addlt	r4, r4, r3
 800ec26:	f001 fc3f 	bl	80104a8 <__malloc_lock>
 800ec2a:	4a1e      	ldr	r2, [pc, #120]	; (800eca4 <_free_r+0x94>)
 800ec2c:	9801      	ldr	r0, [sp, #4]
 800ec2e:	6813      	ldr	r3, [r2, #0]
 800ec30:	b933      	cbnz	r3, 800ec40 <_free_r+0x30>
 800ec32:	6063      	str	r3, [r4, #4]
 800ec34:	6014      	str	r4, [r2, #0]
 800ec36:	b003      	add	sp, #12
 800ec38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec3c:	f001 bc3a 	b.w	80104b4 <__malloc_unlock>
 800ec40:	42a3      	cmp	r3, r4
 800ec42:	d908      	bls.n	800ec56 <_free_r+0x46>
 800ec44:	6825      	ldr	r5, [r4, #0]
 800ec46:	1961      	adds	r1, r4, r5
 800ec48:	428b      	cmp	r3, r1
 800ec4a:	bf01      	itttt	eq
 800ec4c:	6819      	ldreq	r1, [r3, #0]
 800ec4e:	685b      	ldreq	r3, [r3, #4]
 800ec50:	1949      	addeq	r1, r1, r5
 800ec52:	6021      	streq	r1, [r4, #0]
 800ec54:	e7ed      	b.n	800ec32 <_free_r+0x22>
 800ec56:	461a      	mov	r2, r3
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	b10b      	cbz	r3, 800ec60 <_free_r+0x50>
 800ec5c:	42a3      	cmp	r3, r4
 800ec5e:	d9fa      	bls.n	800ec56 <_free_r+0x46>
 800ec60:	6811      	ldr	r1, [r2, #0]
 800ec62:	1855      	adds	r5, r2, r1
 800ec64:	42a5      	cmp	r5, r4
 800ec66:	d10b      	bne.n	800ec80 <_free_r+0x70>
 800ec68:	6824      	ldr	r4, [r4, #0]
 800ec6a:	4421      	add	r1, r4
 800ec6c:	1854      	adds	r4, r2, r1
 800ec6e:	42a3      	cmp	r3, r4
 800ec70:	6011      	str	r1, [r2, #0]
 800ec72:	d1e0      	bne.n	800ec36 <_free_r+0x26>
 800ec74:	681c      	ldr	r4, [r3, #0]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	6053      	str	r3, [r2, #4]
 800ec7a:	4421      	add	r1, r4
 800ec7c:	6011      	str	r1, [r2, #0]
 800ec7e:	e7da      	b.n	800ec36 <_free_r+0x26>
 800ec80:	d902      	bls.n	800ec88 <_free_r+0x78>
 800ec82:	230c      	movs	r3, #12
 800ec84:	6003      	str	r3, [r0, #0]
 800ec86:	e7d6      	b.n	800ec36 <_free_r+0x26>
 800ec88:	6825      	ldr	r5, [r4, #0]
 800ec8a:	1961      	adds	r1, r4, r5
 800ec8c:	428b      	cmp	r3, r1
 800ec8e:	bf04      	itt	eq
 800ec90:	6819      	ldreq	r1, [r3, #0]
 800ec92:	685b      	ldreq	r3, [r3, #4]
 800ec94:	6063      	str	r3, [r4, #4]
 800ec96:	bf04      	itt	eq
 800ec98:	1949      	addeq	r1, r1, r5
 800ec9a:	6021      	streq	r1, [r4, #0]
 800ec9c:	6054      	str	r4, [r2, #4]
 800ec9e:	e7ca      	b.n	800ec36 <_free_r+0x26>
 800eca0:	b003      	add	sp, #12
 800eca2:	bd30      	pop	{r4, r5, pc}
 800eca4:	2400656c 	.word	0x2400656c

0800eca8 <sbrk_aligned>:
 800eca8:	b570      	push	{r4, r5, r6, lr}
 800ecaa:	4e0e      	ldr	r6, [pc, #56]	; (800ece4 <sbrk_aligned+0x3c>)
 800ecac:	460c      	mov	r4, r1
 800ecae:	6831      	ldr	r1, [r6, #0]
 800ecb0:	4605      	mov	r5, r0
 800ecb2:	b911      	cbnz	r1, 800ecba <sbrk_aligned+0x12>
 800ecb4:	f000 f8a4 	bl	800ee00 <_sbrk_r>
 800ecb8:	6030      	str	r0, [r6, #0]
 800ecba:	4621      	mov	r1, r4
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	f000 f89f 	bl	800ee00 <_sbrk_r>
 800ecc2:	1c43      	adds	r3, r0, #1
 800ecc4:	d00a      	beq.n	800ecdc <sbrk_aligned+0x34>
 800ecc6:	1cc4      	adds	r4, r0, #3
 800ecc8:	f024 0403 	bic.w	r4, r4, #3
 800eccc:	42a0      	cmp	r0, r4
 800ecce:	d007      	beq.n	800ece0 <sbrk_aligned+0x38>
 800ecd0:	1a21      	subs	r1, r4, r0
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	f000 f894 	bl	800ee00 <_sbrk_r>
 800ecd8:	3001      	adds	r0, #1
 800ecda:	d101      	bne.n	800ece0 <sbrk_aligned+0x38>
 800ecdc:	f04f 34ff 	mov.w	r4, #4294967295
 800ece0:	4620      	mov	r0, r4
 800ece2:	bd70      	pop	{r4, r5, r6, pc}
 800ece4:	24006570 	.word	0x24006570

0800ece8 <_malloc_r>:
 800ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecec:	1ccd      	adds	r5, r1, #3
 800ecee:	f025 0503 	bic.w	r5, r5, #3
 800ecf2:	3508      	adds	r5, #8
 800ecf4:	2d0c      	cmp	r5, #12
 800ecf6:	bf38      	it	cc
 800ecf8:	250c      	movcc	r5, #12
 800ecfa:	2d00      	cmp	r5, #0
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	db01      	blt.n	800ed04 <_malloc_r+0x1c>
 800ed00:	42a9      	cmp	r1, r5
 800ed02:	d905      	bls.n	800ed10 <_malloc_r+0x28>
 800ed04:	230c      	movs	r3, #12
 800ed06:	603b      	str	r3, [r7, #0]
 800ed08:	2600      	movs	r6, #0
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed10:	4e2e      	ldr	r6, [pc, #184]	; (800edcc <_malloc_r+0xe4>)
 800ed12:	f001 fbc9 	bl	80104a8 <__malloc_lock>
 800ed16:	6833      	ldr	r3, [r6, #0]
 800ed18:	461c      	mov	r4, r3
 800ed1a:	bb34      	cbnz	r4, 800ed6a <_malloc_r+0x82>
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	4638      	mov	r0, r7
 800ed20:	f7ff ffc2 	bl	800eca8 <sbrk_aligned>
 800ed24:	1c43      	adds	r3, r0, #1
 800ed26:	4604      	mov	r4, r0
 800ed28:	d14d      	bne.n	800edc6 <_malloc_r+0xde>
 800ed2a:	6834      	ldr	r4, [r6, #0]
 800ed2c:	4626      	mov	r6, r4
 800ed2e:	2e00      	cmp	r6, #0
 800ed30:	d140      	bne.n	800edb4 <_malloc_r+0xcc>
 800ed32:	6823      	ldr	r3, [r4, #0]
 800ed34:	4631      	mov	r1, r6
 800ed36:	4638      	mov	r0, r7
 800ed38:	eb04 0803 	add.w	r8, r4, r3
 800ed3c:	f000 f860 	bl	800ee00 <_sbrk_r>
 800ed40:	4580      	cmp	r8, r0
 800ed42:	d13a      	bne.n	800edba <_malloc_r+0xd2>
 800ed44:	6821      	ldr	r1, [r4, #0]
 800ed46:	3503      	adds	r5, #3
 800ed48:	1a6d      	subs	r5, r5, r1
 800ed4a:	f025 0503 	bic.w	r5, r5, #3
 800ed4e:	3508      	adds	r5, #8
 800ed50:	2d0c      	cmp	r5, #12
 800ed52:	bf38      	it	cc
 800ed54:	250c      	movcc	r5, #12
 800ed56:	4629      	mov	r1, r5
 800ed58:	4638      	mov	r0, r7
 800ed5a:	f7ff ffa5 	bl	800eca8 <sbrk_aligned>
 800ed5e:	3001      	adds	r0, #1
 800ed60:	d02b      	beq.n	800edba <_malloc_r+0xd2>
 800ed62:	6823      	ldr	r3, [r4, #0]
 800ed64:	442b      	add	r3, r5
 800ed66:	6023      	str	r3, [r4, #0]
 800ed68:	e00e      	b.n	800ed88 <_malloc_r+0xa0>
 800ed6a:	6822      	ldr	r2, [r4, #0]
 800ed6c:	1b52      	subs	r2, r2, r5
 800ed6e:	d41e      	bmi.n	800edae <_malloc_r+0xc6>
 800ed70:	2a0b      	cmp	r2, #11
 800ed72:	d916      	bls.n	800eda2 <_malloc_r+0xba>
 800ed74:	1961      	adds	r1, r4, r5
 800ed76:	42a3      	cmp	r3, r4
 800ed78:	6025      	str	r5, [r4, #0]
 800ed7a:	bf18      	it	ne
 800ed7c:	6059      	strne	r1, [r3, #4]
 800ed7e:	6863      	ldr	r3, [r4, #4]
 800ed80:	bf08      	it	eq
 800ed82:	6031      	streq	r1, [r6, #0]
 800ed84:	5162      	str	r2, [r4, r5]
 800ed86:	604b      	str	r3, [r1, #4]
 800ed88:	4638      	mov	r0, r7
 800ed8a:	f104 060b 	add.w	r6, r4, #11
 800ed8e:	f001 fb91 	bl	80104b4 <__malloc_unlock>
 800ed92:	f026 0607 	bic.w	r6, r6, #7
 800ed96:	1d23      	adds	r3, r4, #4
 800ed98:	1af2      	subs	r2, r6, r3
 800ed9a:	d0b6      	beq.n	800ed0a <_malloc_r+0x22>
 800ed9c:	1b9b      	subs	r3, r3, r6
 800ed9e:	50a3      	str	r3, [r4, r2]
 800eda0:	e7b3      	b.n	800ed0a <_malloc_r+0x22>
 800eda2:	6862      	ldr	r2, [r4, #4]
 800eda4:	42a3      	cmp	r3, r4
 800eda6:	bf0c      	ite	eq
 800eda8:	6032      	streq	r2, [r6, #0]
 800edaa:	605a      	strne	r2, [r3, #4]
 800edac:	e7ec      	b.n	800ed88 <_malloc_r+0xa0>
 800edae:	4623      	mov	r3, r4
 800edb0:	6864      	ldr	r4, [r4, #4]
 800edb2:	e7b2      	b.n	800ed1a <_malloc_r+0x32>
 800edb4:	4634      	mov	r4, r6
 800edb6:	6876      	ldr	r6, [r6, #4]
 800edb8:	e7b9      	b.n	800ed2e <_malloc_r+0x46>
 800edba:	230c      	movs	r3, #12
 800edbc:	603b      	str	r3, [r7, #0]
 800edbe:	4638      	mov	r0, r7
 800edc0:	f001 fb78 	bl	80104b4 <__malloc_unlock>
 800edc4:	e7a1      	b.n	800ed0a <_malloc_r+0x22>
 800edc6:	6025      	str	r5, [r4, #0]
 800edc8:	e7de      	b.n	800ed88 <_malloc_r+0xa0>
 800edca:	bf00      	nop
 800edcc:	2400656c 	.word	0x2400656c

0800edd0 <iprintf>:
 800edd0:	b40f      	push	{r0, r1, r2, r3}
 800edd2:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <iprintf+0x2c>)
 800edd4:	b513      	push	{r0, r1, r4, lr}
 800edd6:	681c      	ldr	r4, [r3, #0]
 800edd8:	b124      	cbz	r4, 800ede4 <iprintf+0x14>
 800edda:	69a3      	ldr	r3, [r4, #24]
 800eddc:	b913      	cbnz	r3, 800ede4 <iprintf+0x14>
 800edde:	4620      	mov	r0, r4
 800ede0:	f000 ff2e 	bl	800fc40 <__sinit>
 800ede4:	ab05      	add	r3, sp, #20
 800ede6:	9a04      	ldr	r2, [sp, #16]
 800ede8:	68a1      	ldr	r1, [r4, #8]
 800edea:	9301      	str	r3, [sp, #4]
 800edec:	4620      	mov	r0, r4
 800edee:	f002 f9c1 	bl	8011174 <_vfiprintf_r>
 800edf2:	b002      	add	sp, #8
 800edf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edf8:	b004      	add	sp, #16
 800edfa:	4770      	bx	lr
 800edfc:	24003a2c 	.word	0x24003a2c

0800ee00 <_sbrk_r>:
 800ee00:	b538      	push	{r3, r4, r5, lr}
 800ee02:	4d06      	ldr	r5, [pc, #24]	; (800ee1c <_sbrk_r+0x1c>)
 800ee04:	2300      	movs	r3, #0
 800ee06:	4604      	mov	r4, r0
 800ee08:	4608      	mov	r0, r1
 800ee0a:	602b      	str	r3, [r5, #0]
 800ee0c:	f7f4 f9f4 	bl	80031f8 <_sbrk>
 800ee10:	1c43      	adds	r3, r0, #1
 800ee12:	d102      	bne.n	800ee1a <_sbrk_r+0x1a>
 800ee14:	682b      	ldr	r3, [r5, #0]
 800ee16:	b103      	cbz	r3, 800ee1a <_sbrk_r+0x1a>
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	bd38      	pop	{r3, r4, r5, pc}
 800ee1c:	24006578 	.word	0x24006578

0800ee20 <sniprintf>:
 800ee20:	b40c      	push	{r2, r3}
 800ee22:	b530      	push	{r4, r5, lr}
 800ee24:	4b17      	ldr	r3, [pc, #92]	; (800ee84 <sniprintf+0x64>)
 800ee26:	1e0c      	subs	r4, r1, #0
 800ee28:	681d      	ldr	r5, [r3, #0]
 800ee2a:	b09d      	sub	sp, #116	; 0x74
 800ee2c:	da08      	bge.n	800ee40 <sniprintf+0x20>
 800ee2e:	238b      	movs	r3, #139	; 0x8b
 800ee30:	602b      	str	r3, [r5, #0]
 800ee32:	f04f 30ff 	mov.w	r0, #4294967295
 800ee36:	b01d      	add	sp, #116	; 0x74
 800ee38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee3c:	b002      	add	sp, #8
 800ee3e:	4770      	bx	lr
 800ee40:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ee44:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ee48:	bf14      	ite	ne
 800ee4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ee4e:	4623      	moveq	r3, r4
 800ee50:	9304      	str	r3, [sp, #16]
 800ee52:	9307      	str	r3, [sp, #28]
 800ee54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee58:	9002      	str	r0, [sp, #8]
 800ee5a:	9006      	str	r0, [sp, #24]
 800ee5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ee60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ee62:	ab21      	add	r3, sp, #132	; 0x84
 800ee64:	a902      	add	r1, sp, #8
 800ee66:	4628      	mov	r0, r5
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	f002 f859 	bl	8010f20 <_svfiprintf_r>
 800ee6e:	1c43      	adds	r3, r0, #1
 800ee70:	bfbc      	itt	lt
 800ee72:	238b      	movlt	r3, #139	; 0x8b
 800ee74:	602b      	strlt	r3, [r5, #0]
 800ee76:	2c00      	cmp	r4, #0
 800ee78:	d0dd      	beq.n	800ee36 <sniprintf+0x16>
 800ee7a:	9b02      	ldr	r3, [sp, #8]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	701a      	strb	r2, [r3, #0]
 800ee80:	e7d9      	b.n	800ee36 <sniprintf+0x16>
 800ee82:	bf00      	nop
 800ee84:	24003a2c 	.word	0x24003a2c

0800ee88 <strchr>:
 800ee88:	b2c9      	uxtb	r1, r1
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee90:	b11a      	cbz	r2, 800ee9a <strchr+0x12>
 800ee92:	428a      	cmp	r2, r1
 800ee94:	d1f9      	bne.n	800ee8a <strchr+0x2>
 800ee96:	4618      	mov	r0, r3
 800ee98:	4770      	bx	lr
 800ee9a:	2900      	cmp	r1, #0
 800ee9c:	bf18      	it	ne
 800ee9e:	2300      	movne	r3, #0
 800eea0:	e7f9      	b.n	800ee96 <strchr+0xe>

0800eea2 <strcpy>:
 800eea2:	4603      	mov	r3, r0
 800eea4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eea8:	f803 2b01 	strb.w	r2, [r3], #1
 800eeac:	2a00      	cmp	r2, #0
 800eeae:	d1f9      	bne.n	800eea4 <strcpy+0x2>
 800eeb0:	4770      	bx	lr

0800eeb2 <strstr>:
 800eeb2:	780a      	ldrb	r2, [r1, #0]
 800eeb4:	b570      	push	{r4, r5, r6, lr}
 800eeb6:	b96a      	cbnz	r2, 800eed4 <strstr+0x22>
 800eeb8:	bd70      	pop	{r4, r5, r6, pc}
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d109      	bne.n	800eed2 <strstr+0x20>
 800eebe:	460c      	mov	r4, r1
 800eec0:	4605      	mov	r5, r0
 800eec2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d0f6      	beq.n	800eeb8 <strstr+0x6>
 800eeca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800eece:	429e      	cmp	r6, r3
 800eed0:	d0f7      	beq.n	800eec2 <strstr+0x10>
 800eed2:	3001      	adds	r0, #1
 800eed4:	7803      	ldrb	r3, [r0, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1ef      	bne.n	800eeba <strstr+0x8>
 800eeda:	4618      	mov	r0, r3
 800eedc:	e7ec      	b.n	800eeb8 <strstr+0x6>

0800eede <sulp>:
 800eede:	b570      	push	{r4, r5, r6, lr}
 800eee0:	4604      	mov	r4, r0
 800eee2:	460d      	mov	r5, r1
 800eee4:	4616      	mov	r6, r2
 800eee6:	ec45 4b10 	vmov	d0, r4, r5
 800eeea:	f001 fe5b 	bl	8010ba4 <__ulp>
 800eeee:	b17e      	cbz	r6, 800ef10 <sulp+0x32>
 800eef0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eef4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	dd09      	ble.n	800ef10 <sulp+0x32>
 800eefc:	051b      	lsls	r3, r3, #20
 800eefe:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ef02:	2000      	movs	r0, #0
 800ef04:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ef08:	ec41 0b17 	vmov	d7, r0, r1
 800ef0c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef10:	bd70      	pop	{r4, r5, r6, pc}
 800ef12:	0000      	movs	r0, r0
 800ef14:	0000      	movs	r0, r0
	...

0800ef18 <_strtod_l>:
 800ef18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1c:	ed2d 8b0e 	vpush	{d8-d14}
 800ef20:	b097      	sub	sp, #92	; 0x5c
 800ef22:	461f      	mov	r7, r3
 800ef24:	2300      	movs	r3, #0
 800ef26:	9312      	str	r3, [sp, #72]	; 0x48
 800ef28:	4ba1      	ldr	r3, [pc, #644]	; (800f1b0 <_strtod_l+0x298>)
 800ef2a:	920d      	str	r2, [sp, #52]	; 0x34
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	9307      	str	r3, [sp, #28]
 800ef30:	4604      	mov	r4, r0
 800ef32:	4618      	mov	r0, r3
 800ef34:	468b      	mov	fp, r1
 800ef36:	f7f1 f9d3 	bl	80002e0 <strlen>
 800ef3a:	f04f 0800 	mov.w	r8, #0
 800ef3e:	4605      	mov	r5, r0
 800ef40:	f04f 0900 	mov.w	r9, #0
 800ef44:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ef48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef4a:	7813      	ldrb	r3, [r2, #0]
 800ef4c:	2b2b      	cmp	r3, #43	; 0x2b
 800ef4e:	d04d      	beq.n	800efec <_strtod_l+0xd4>
 800ef50:	d83a      	bhi.n	800efc8 <_strtod_l+0xb0>
 800ef52:	2b0d      	cmp	r3, #13
 800ef54:	d833      	bhi.n	800efbe <_strtod_l+0xa6>
 800ef56:	2b08      	cmp	r3, #8
 800ef58:	d833      	bhi.n	800efc2 <_strtod_l+0xaa>
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d03d      	beq.n	800efda <_strtod_l+0xc2>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	9308      	str	r3, [sp, #32]
 800ef62:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ef64:	7833      	ldrb	r3, [r6, #0]
 800ef66:	2b30      	cmp	r3, #48	; 0x30
 800ef68:	f040 80b0 	bne.w	800f0cc <_strtod_l+0x1b4>
 800ef6c:	7873      	ldrb	r3, [r6, #1]
 800ef6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef72:	2b58      	cmp	r3, #88	; 0x58
 800ef74:	d167      	bne.n	800f046 <_strtod_l+0x12e>
 800ef76:	9b08      	ldr	r3, [sp, #32]
 800ef78:	9301      	str	r3, [sp, #4]
 800ef7a:	ab12      	add	r3, sp, #72	; 0x48
 800ef7c:	9702      	str	r7, [sp, #8]
 800ef7e:	9300      	str	r3, [sp, #0]
 800ef80:	4a8c      	ldr	r2, [pc, #560]	; (800f1b4 <_strtod_l+0x29c>)
 800ef82:	ab13      	add	r3, sp, #76	; 0x4c
 800ef84:	a911      	add	r1, sp, #68	; 0x44
 800ef86:	4620      	mov	r0, r4
 800ef88:	f000 ff70 	bl	800fe6c <__gethex>
 800ef8c:	f010 0507 	ands.w	r5, r0, #7
 800ef90:	4607      	mov	r7, r0
 800ef92:	d005      	beq.n	800efa0 <_strtod_l+0x88>
 800ef94:	2d06      	cmp	r5, #6
 800ef96:	d12b      	bne.n	800eff0 <_strtod_l+0xd8>
 800ef98:	3601      	adds	r6, #1
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	9611      	str	r6, [sp, #68]	; 0x44
 800ef9e:	9308      	str	r3, [sp, #32]
 800efa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f040 854e 	bne.w	800fa44 <_strtod_l+0xb2c>
 800efa8:	9b08      	ldr	r3, [sp, #32]
 800efaa:	b1e3      	cbz	r3, 800efe6 <_strtod_l+0xce>
 800efac:	ec49 8b17 	vmov	d7, r8, r9
 800efb0:	eeb1 0b47 	vneg.f64	d0, d7
 800efb4:	b017      	add	sp, #92	; 0x5c
 800efb6:	ecbd 8b0e 	vpop	{d8-d14}
 800efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efbe:	2b20      	cmp	r3, #32
 800efc0:	d1cd      	bne.n	800ef5e <_strtod_l+0x46>
 800efc2:	3201      	adds	r2, #1
 800efc4:	9211      	str	r2, [sp, #68]	; 0x44
 800efc6:	e7bf      	b.n	800ef48 <_strtod_l+0x30>
 800efc8:	2b2d      	cmp	r3, #45	; 0x2d
 800efca:	d1c8      	bne.n	800ef5e <_strtod_l+0x46>
 800efcc:	2301      	movs	r3, #1
 800efce:	9308      	str	r3, [sp, #32]
 800efd0:	1c53      	adds	r3, r2, #1
 800efd2:	9311      	str	r3, [sp, #68]	; 0x44
 800efd4:	7853      	ldrb	r3, [r2, #1]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1c3      	bne.n	800ef62 <_strtod_l+0x4a>
 800efda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efdc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f040 852d 	bne.w	800fa40 <_strtod_l+0xb28>
 800efe6:	ec49 8b10 	vmov	d0, r8, r9
 800efea:	e7e3      	b.n	800efb4 <_strtod_l+0x9c>
 800efec:	2300      	movs	r3, #0
 800efee:	e7ee      	b.n	800efce <_strtod_l+0xb6>
 800eff0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eff2:	b13a      	cbz	r2, 800f004 <_strtod_l+0xec>
 800eff4:	2135      	movs	r1, #53	; 0x35
 800eff6:	a814      	add	r0, sp, #80	; 0x50
 800eff8:	f001 fedc 	bl	8010db4 <__copybits>
 800effc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800effe:	4620      	mov	r0, r4
 800f000:	f001 fa9e 	bl	8010540 <_Bfree>
 800f004:	3d01      	subs	r5, #1
 800f006:	2d04      	cmp	r5, #4
 800f008:	d806      	bhi.n	800f018 <_strtod_l+0x100>
 800f00a:	e8df f005 	tbb	[pc, r5]
 800f00e:	030a      	.short	0x030a
 800f010:	1714      	.short	0x1714
 800f012:	0a          	.byte	0x0a
 800f013:	00          	.byte	0x00
 800f014:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f018:	073f      	lsls	r7, r7, #28
 800f01a:	d5c1      	bpl.n	800efa0 <_strtod_l+0x88>
 800f01c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f020:	e7be      	b.n	800efa0 <_strtod_l+0x88>
 800f022:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f026:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f028:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f02c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f030:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f034:	e7f0      	b.n	800f018 <_strtod_l+0x100>
 800f036:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f1b8 <_strtod_l+0x2a0>
 800f03a:	e7ed      	b.n	800f018 <_strtod_l+0x100>
 800f03c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f040:	f04f 38ff 	mov.w	r8, #4294967295
 800f044:	e7e8      	b.n	800f018 <_strtod_l+0x100>
 800f046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f048:	1c5a      	adds	r2, r3, #1
 800f04a:	9211      	str	r2, [sp, #68]	; 0x44
 800f04c:	785b      	ldrb	r3, [r3, #1]
 800f04e:	2b30      	cmp	r3, #48	; 0x30
 800f050:	d0f9      	beq.n	800f046 <_strtod_l+0x12e>
 800f052:	2b00      	cmp	r3, #0
 800f054:	d0a4      	beq.n	800efa0 <_strtod_l+0x88>
 800f056:	2301      	movs	r3, #1
 800f058:	f04f 0a00 	mov.w	sl, #0
 800f05c:	9304      	str	r3, [sp, #16]
 800f05e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f060:	930a      	str	r3, [sp, #40]	; 0x28
 800f062:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f066:	f8cd a018 	str.w	sl, [sp, #24]
 800f06a:	220a      	movs	r2, #10
 800f06c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f06e:	7807      	ldrb	r7, [r0, #0]
 800f070:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f074:	b2d9      	uxtb	r1, r3
 800f076:	2909      	cmp	r1, #9
 800f078:	d92a      	bls.n	800f0d0 <_strtod_l+0x1b8>
 800f07a:	9907      	ldr	r1, [sp, #28]
 800f07c:	462a      	mov	r2, r5
 800f07e:	f002 fb8a 	bl	8011796 <strncmp>
 800f082:	2800      	cmp	r0, #0
 800f084:	d033      	beq.n	800f0ee <_strtod_l+0x1d6>
 800f086:	2000      	movs	r0, #0
 800f088:	9b06      	ldr	r3, [sp, #24]
 800f08a:	463a      	mov	r2, r7
 800f08c:	4601      	mov	r1, r0
 800f08e:	4607      	mov	r7, r0
 800f090:	2a65      	cmp	r2, #101	; 0x65
 800f092:	d001      	beq.n	800f098 <_strtod_l+0x180>
 800f094:	2a45      	cmp	r2, #69	; 0x45
 800f096:	d117      	bne.n	800f0c8 <_strtod_l+0x1b0>
 800f098:	b91b      	cbnz	r3, 800f0a2 <_strtod_l+0x18a>
 800f09a:	9b04      	ldr	r3, [sp, #16]
 800f09c:	4303      	orrs	r3, r0
 800f09e:	d09c      	beq.n	800efda <_strtod_l+0xc2>
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f0a6:	f10b 0201 	add.w	r2, fp, #1
 800f0aa:	9211      	str	r2, [sp, #68]	; 0x44
 800f0ac:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f0b0:	2a2b      	cmp	r2, #43	; 0x2b
 800f0b2:	d071      	beq.n	800f198 <_strtod_l+0x280>
 800f0b4:	2a2d      	cmp	r2, #45	; 0x2d
 800f0b6:	d077      	beq.n	800f1a8 <_strtod_l+0x290>
 800f0b8:	f04f 0e00 	mov.w	lr, #0
 800f0bc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f0c0:	2d09      	cmp	r5, #9
 800f0c2:	d97f      	bls.n	800f1c4 <_strtod_l+0x2ac>
 800f0c4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f0c8:	2500      	movs	r5, #0
 800f0ca:	e09b      	b.n	800f204 <_strtod_l+0x2ec>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e7c3      	b.n	800f058 <_strtod_l+0x140>
 800f0d0:	9906      	ldr	r1, [sp, #24]
 800f0d2:	2908      	cmp	r1, #8
 800f0d4:	bfdd      	ittte	le
 800f0d6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f0d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f0dc:	9309      	strle	r3, [sp, #36]	; 0x24
 800f0de:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f0e2:	9b06      	ldr	r3, [sp, #24]
 800f0e4:	3001      	adds	r0, #1
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	9306      	str	r3, [sp, #24]
 800f0ea:	9011      	str	r0, [sp, #68]	; 0x44
 800f0ec:	e7be      	b.n	800f06c <_strtod_l+0x154>
 800f0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0f0:	195a      	adds	r2, r3, r5
 800f0f2:	9211      	str	r2, [sp, #68]	; 0x44
 800f0f4:	5d5a      	ldrb	r2, [r3, r5]
 800f0f6:	9b06      	ldr	r3, [sp, #24]
 800f0f8:	b3a3      	cbz	r3, 800f164 <_strtod_l+0x24c>
 800f0fa:	4607      	mov	r7, r0
 800f0fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f100:	2909      	cmp	r1, #9
 800f102:	d912      	bls.n	800f12a <_strtod_l+0x212>
 800f104:	2101      	movs	r1, #1
 800f106:	e7c3      	b.n	800f090 <_strtod_l+0x178>
 800f108:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f10a:	1c5a      	adds	r2, r3, #1
 800f10c:	9211      	str	r2, [sp, #68]	; 0x44
 800f10e:	785a      	ldrb	r2, [r3, #1]
 800f110:	3001      	adds	r0, #1
 800f112:	2a30      	cmp	r2, #48	; 0x30
 800f114:	d0f8      	beq.n	800f108 <_strtod_l+0x1f0>
 800f116:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f11a:	2b08      	cmp	r3, #8
 800f11c:	f200 8497 	bhi.w	800fa4e <_strtod_l+0xb36>
 800f120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f122:	930a      	str	r3, [sp, #40]	; 0x28
 800f124:	4607      	mov	r7, r0
 800f126:	2000      	movs	r0, #0
 800f128:	4603      	mov	r3, r0
 800f12a:	3a30      	subs	r2, #48	; 0x30
 800f12c:	f100 0101 	add.w	r1, r0, #1
 800f130:	d012      	beq.n	800f158 <_strtod_l+0x240>
 800f132:	440f      	add	r7, r1
 800f134:	eb00 0c03 	add.w	ip, r0, r3
 800f138:	4619      	mov	r1, r3
 800f13a:	250a      	movs	r5, #10
 800f13c:	4561      	cmp	r1, ip
 800f13e:	d113      	bne.n	800f168 <_strtod_l+0x250>
 800f140:	1819      	adds	r1, r3, r0
 800f142:	2908      	cmp	r1, #8
 800f144:	f103 0301 	add.w	r3, r3, #1
 800f148:	4403      	add	r3, r0
 800f14a:	dc1c      	bgt.n	800f186 <_strtod_l+0x26e>
 800f14c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f14e:	210a      	movs	r1, #10
 800f150:	fb01 2200 	mla	r2, r1, r0, r2
 800f154:	9209      	str	r2, [sp, #36]	; 0x24
 800f156:	2100      	movs	r1, #0
 800f158:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f15a:	1c50      	adds	r0, r2, #1
 800f15c:	9011      	str	r0, [sp, #68]	; 0x44
 800f15e:	7852      	ldrb	r2, [r2, #1]
 800f160:	4608      	mov	r0, r1
 800f162:	e7cb      	b.n	800f0fc <_strtod_l+0x1e4>
 800f164:	9806      	ldr	r0, [sp, #24]
 800f166:	e7d4      	b.n	800f112 <_strtod_l+0x1fa>
 800f168:	2908      	cmp	r1, #8
 800f16a:	dc04      	bgt.n	800f176 <_strtod_l+0x25e>
 800f16c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f16e:	436e      	muls	r6, r5
 800f170:	9609      	str	r6, [sp, #36]	; 0x24
 800f172:	3101      	adds	r1, #1
 800f174:	e7e2      	b.n	800f13c <_strtod_l+0x224>
 800f176:	f101 0e01 	add.w	lr, r1, #1
 800f17a:	f1be 0f10 	cmp.w	lr, #16
 800f17e:	bfd8      	it	le
 800f180:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f184:	e7f5      	b.n	800f172 <_strtod_l+0x25a>
 800f186:	2b10      	cmp	r3, #16
 800f188:	bfdc      	itt	le
 800f18a:	210a      	movle	r1, #10
 800f18c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f190:	e7e1      	b.n	800f156 <_strtod_l+0x23e>
 800f192:	2700      	movs	r7, #0
 800f194:	2101      	movs	r1, #1
 800f196:	e780      	b.n	800f09a <_strtod_l+0x182>
 800f198:	f04f 0e00 	mov.w	lr, #0
 800f19c:	f10b 0202 	add.w	r2, fp, #2
 800f1a0:	9211      	str	r2, [sp, #68]	; 0x44
 800f1a2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f1a6:	e789      	b.n	800f0bc <_strtod_l+0x1a4>
 800f1a8:	f04f 0e01 	mov.w	lr, #1
 800f1ac:	e7f6      	b.n	800f19c <_strtod_l+0x284>
 800f1ae:	bf00      	nop
 800f1b0:	080121f0 	.word	0x080121f0
 800f1b4:	08012018 	.word	0x08012018
 800f1b8:	7ff00000 	.word	0x7ff00000
 800f1bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1be:	1c55      	adds	r5, r2, #1
 800f1c0:	9511      	str	r5, [sp, #68]	; 0x44
 800f1c2:	7852      	ldrb	r2, [r2, #1]
 800f1c4:	2a30      	cmp	r2, #48	; 0x30
 800f1c6:	d0f9      	beq.n	800f1bc <_strtod_l+0x2a4>
 800f1c8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f1cc:	2d08      	cmp	r5, #8
 800f1ce:	f63f af7b 	bhi.w	800f0c8 <_strtod_l+0x1b0>
 800f1d2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f1d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1d8:	9207      	str	r2, [sp, #28]
 800f1da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1dc:	1c55      	adds	r5, r2, #1
 800f1de:	9511      	str	r5, [sp, #68]	; 0x44
 800f1e0:	7852      	ldrb	r2, [r2, #1]
 800f1e2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f1e6:	2e09      	cmp	r6, #9
 800f1e8:	d937      	bls.n	800f25a <_strtod_l+0x342>
 800f1ea:	9e07      	ldr	r6, [sp, #28]
 800f1ec:	1bad      	subs	r5, r5, r6
 800f1ee:	2d08      	cmp	r5, #8
 800f1f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f1f4:	dc02      	bgt.n	800f1fc <_strtod_l+0x2e4>
 800f1f6:	4565      	cmp	r5, ip
 800f1f8:	bfa8      	it	ge
 800f1fa:	4665      	movge	r5, ip
 800f1fc:	f1be 0f00 	cmp.w	lr, #0
 800f200:	d000      	beq.n	800f204 <_strtod_l+0x2ec>
 800f202:	426d      	negs	r5, r5
 800f204:	2b00      	cmp	r3, #0
 800f206:	d14d      	bne.n	800f2a4 <_strtod_l+0x38c>
 800f208:	9b04      	ldr	r3, [sp, #16]
 800f20a:	4303      	orrs	r3, r0
 800f20c:	f47f aec8 	bne.w	800efa0 <_strtod_l+0x88>
 800f210:	2900      	cmp	r1, #0
 800f212:	f47f aee2 	bne.w	800efda <_strtod_l+0xc2>
 800f216:	2a69      	cmp	r2, #105	; 0x69
 800f218:	d027      	beq.n	800f26a <_strtod_l+0x352>
 800f21a:	dc24      	bgt.n	800f266 <_strtod_l+0x34e>
 800f21c:	2a49      	cmp	r2, #73	; 0x49
 800f21e:	d024      	beq.n	800f26a <_strtod_l+0x352>
 800f220:	2a4e      	cmp	r2, #78	; 0x4e
 800f222:	f47f aeda 	bne.w	800efda <_strtod_l+0xc2>
 800f226:	4996      	ldr	r1, [pc, #600]	; (800f480 <_strtod_l+0x568>)
 800f228:	a811      	add	r0, sp, #68	; 0x44
 800f22a:	f001 f877 	bl	801031c <__match>
 800f22e:	2800      	cmp	r0, #0
 800f230:	f43f aed3 	beq.w	800efda <_strtod_l+0xc2>
 800f234:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	2b28      	cmp	r3, #40	; 0x28
 800f23a:	d12d      	bne.n	800f298 <_strtod_l+0x380>
 800f23c:	4991      	ldr	r1, [pc, #580]	; (800f484 <_strtod_l+0x56c>)
 800f23e:	aa14      	add	r2, sp, #80	; 0x50
 800f240:	a811      	add	r0, sp, #68	; 0x44
 800f242:	f001 f87f 	bl	8010344 <__hexnan>
 800f246:	2805      	cmp	r0, #5
 800f248:	d126      	bne.n	800f298 <_strtod_l+0x380>
 800f24a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f24c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f250:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f254:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f258:	e6a2      	b.n	800efa0 <_strtod_l+0x88>
 800f25a:	250a      	movs	r5, #10
 800f25c:	fb05 250c 	mla	r5, r5, ip, r2
 800f260:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f264:	e7b9      	b.n	800f1da <_strtod_l+0x2c2>
 800f266:	2a6e      	cmp	r2, #110	; 0x6e
 800f268:	e7db      	b.n	800f222 <_strtod_l+0x30a>
 800f26a:	4987      	ldr	r1, [pc, #540]	; (800f488 <_strtod_l+0x570>)
 800f26c:	a811      	add	r0, sp, #68	; 0x44
 800f26e:	f001 f855 	bl	801031c <__match>
 800f272:	2800      	cmp	r0, #0
 800f274:	f43f aeb1 	beq.w	800efda <_strtod_l+0xc2>
 800f278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f27a:	4984      	ldr	r1, [pc, #528]	; (800f48c <_strtod_l+0x574>)
 800f27c:	3b01      	subs	r3, #1
 800f27e:	a811      	add	r0, sp, #68	; 0x44
 800f280:	9311      	str	r3, [sp, #68]	; 0x44
 800f282:	f001 f84b 	bl	801031c <__match>
 800f286:	b910      	cbnz	r0, 800f28e <_strtod_l+0x376>
 800f288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f28a:	3301      	adds	r3, #1
 800f28c:	9311      	str	r3, [sp, #68]	; 0x44
 800f28e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f4a0 <_strtod_l+0x588>
 800f292:	f04f 0800 	mov.w	r8, #0
 800f296:	e683      	b.n	800efa0 <_strtod_l+0x88>
 800f298:	487d      	ldr	r0, [pc, #500]	; (800f490 <_strtod_l+0x578>)
 800f29a:	f002 fa31 	bl	8011700 <nan>
 800f29e:	ec59 8b10 	vmov	r8, r9, d0
 800f2a2:	e67d      	b.n	800efa0 <_strtod_l+0x88>
 800f2a4:	1bea      	subs	r2, r5, r7
 800f2a6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f2aa:	9207      	str	r2, [sp, #28]
 800f2ac:	9a06      	ldr	r2, [sp, #24]
 800f2ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f2b2:	2a00      	cmp	r2, #0
 800f2b4:	bf08      	it	eq
 800f2b6:	461a      	moveq	r2, r3
 800f2b8:	2b10      	cmp	r3, #16
 800f2ba:	9206      	str	r2, [sp, #24]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	bfa8      	it	ge
 800f2c0:	2210      	movge	r2, #16
 800f2c2:	2b09      	cmp	r3, #9
 800f2c4:	ec59 8b17 	vmov	r8, r9, d7
 800f2c8:	dd0c      	ble.n	800f2e4 <_strtod_l+0x3cc>
 800f2ca:	4972      	ldr	r1, [pc, #456]	; (800f494 <_strtod_l+0x57c>)
 800f2cc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f2d0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f2d4:	ee06 aa90 	vmov	s13, sl
 800f2d8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f2dc:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f2e0:	ec59 8b16 	vmov	r8, r9, d6
 800f2e4:	2b0f      	cmp	r3, #15
 800f2e6:	dc36      	bgt.n	800f356 <_strtod_l+0x43e>
 800f2e8:	9907      	ldr	r1, [sp, #28]
 800f2ea:	2900      	cmp	r1, #0
 800f2ec:	f43f ae58 	beq.w	800efa0 <_strtod_l+0x88>
 800f2f0:	dd23      	ble.n	800f33a <_strtod_l+0x422>
 800f2f2:	2916      	cmp	r1, #22
 800f2f4:	dc0b      	bgt.n	800f30e <_strtod_l+0x3f6>
 800f2f6:	4b67      	ldr	r3, [pc, #412]	; (800f494 <_strtod_l+0x57c>)
 800f2f8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f2fc:	ed93 7b00 	vldr	d7, [r3]
 800f300:	ec49 8b16 	vmov	d6, r8, r9
 800f304:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f308:	ec59 8b17 	vmov	r8, r9, d7
 800f30c:	e648      	b.n	800efa0 <_strtod_l+0x88>
 800f30e:	9807      	ldr	r0, [sp, #28]
 800f310:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f314:	4281      	cmp	r1, r0
 800f316:	db1e      	blt.n	800f356 <_strtod_l+0x43e>
 800f318:	4a5e      	ldr	r2, [pc, #376]	; (800f494 <_strtod_l+0x57c>)
 800f31a:	f1c3 030f 	rsb	r3, r3, #15
 800f31e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f322:	ed91 7b00 	vldr	d7, [r1]
 800f326:	ec49 8b16 	vmov	d6, r8, r9
 800f32a:	1ac3      	subs	r3, r0, r3
 800f32c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f330:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f334:	ed92 6b00 	vldr	d6, [r2]
 800f338:	e7e4      	b.n	800f304 <_strtod_l+0x3ec>
 800f33a:	9907      	ldr	r1, [sp, #28]
 800f33c:	3116      	adds	r1, #22
 800f33e:	db0a      	blt.n	800f356 <_strtod_l+0x43e>
 800f340:	4b54      	ldr	r3, [pc, #336]	; (800f494 <_strtod_l+0x57c>)
 800f342:	1b7d      	subs	r5, r7, r5
 800f344:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f348:	ed95 7b00 	vldr	d7, [r5]
 800f34c:	ec49 8b16 	vmov	d6, r8, r9
 800f350:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f354:	e7d8      	b.n	800f308 <_strtod_l+0x3f0>
 800f356:	9907      	ldr	r1, [sp, #28]
 800f358:	1a9a      	subs	r2, r3, r2
 800f35a:	440a      	add	r2, r1
 800f35c:	2a00      	cmp	r2, #0
 800f35e:	dd6f      	ble.n	800f440 <_strtod_l+0x528>
 800f360:	f012 000f 	ands.w	r0, r2, #15
 800f364:	d00a      	beq.n	800f37c <_strtod_l+0x464>
 800f366:	494b      	ldr	r1, [pc, #300]	; (800f494 <_strtod_l+0x57c>)
 800f368:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f36c:	ed91 7b00 	vldr	d7, [r1]
 800f370:	ec49 8b16 	vmov	d6, r8, r9
 800f374:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f378:	ec59 8b17 	vmov	r8, r9, d7
 800f37c:	f032 020f 	bics.w	r2, r2, #15
 800f380:	d04f      	beq.n	800f422 <_strtod_l+0x50a>
 800f382:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f386:	dd22      	ble.n	800f3ce <_strtod_l+0x4b6>
 800f388:	2500      	movs	r5, #0
 800f38a:	462e      	mov	r6, r5
 800f38c:	9506      	str	r5, [sp, #24]
 800f38e:	462f      	mov	r7, r5
 800f390:	2322      	movs	r3, #34	; 0x22
 800f392:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f4a0 <_strtod_l+0x588>
 800f396:	6023      	str	r3, [r4, #0]
 800f398:	f04f 0800 	mov.w	r8, #0
 800f39c:	9b06      	ldr	r3, [sp, #24]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f43f adfe 	beq.w	800efa0 <_strtod_l+0x88>
 800f3a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f001 f8ca 	bl	8010540 <_Bfree>
 800f3ac:	4639      	mov	r1, r7
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f001 f8c6 	bl	8010540 <_Bfree>
 800f3b4:	4631      	mov	r1, r6
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f001 f8c2 	bl	8010540 <_Bfree>
 800f3bc:	9906      	ldr	r1, [sp, #24]
 800f3be:	4620      	mov	r0, r4
 800f3c0:	f001 f8be 	bl	8010540 <_Bfree>
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	f001 f8ba 	bl	8010540 <_Bfree>
 800f3cc:	e5e8      	b.n	800efa0 <_strtod_l+0x88>
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	ec49 8b17 	vmov	d7, r8, r9
 800f3d4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f498 <_strtod_l+0x580>
 800f3d8:	1112      	asrs	r2, r2, #4
 800f3da:	4601      	mov	r1, r0
 800f3dc:	2a01      	cmp	r2, #1
 800f3de:	dc23      	bgt.n	800f428 <_strtod_l+0x510>
 800f3e0:	b108      	cbz	r0, 800f3e6 <_strtod_l+0x4ce>
 800f3e2:	ec59 8b17 	vmov	r8, r9, d7
 800f3e6:	4a2c      	ldr	r2, [pc, #176]	; (800f498 <_strtod_l+0x580>)
 800f3e8:	482c      	ldr	r0, [pc, #176]	; (800f49c <_strtod_l+0x584>)
 800f3ea:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f3ee:	ed92 7b00 	vldr	d7, [r2]
 800f3f2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f3f6:	ec49 8b16 	vmov	d6, r8, r9
 800f3fa:	4a29      	ldr	r2, [pc, #164]	; (800f4a0 <_strtod_l+0x588>)
 800f3fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f400:	ee17 1a90 	vmov	r1, s15
 800f404:	400a      	ands	r2, r1
 800f406:	4282      	cmp	r2, r0
 800f408:	ec59 8b17 	vmov	r8, r9, d7
 800f40c:	d8bc      	bhi.n	800f388 <_strtod_l+0x470>
 800f40e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f412:	4282      	cmp	r2, r0
 800f414:	bf86      	itte	hi
 800f416:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f4a4 <_strtod_l+0x58c>
 800f41a:	f04f 38ff 	movhi.w	r8, #4294967295
 800f41e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f422:	2200      	movs	r2, #0
 800f424:	9204      	str	r2, [sp, #16]
 800f426:	e078      	b.n	800f51a <_strtod_l+0x602>
 800f428:	07d6      	lsls	r6, r2, #31
 800f42a:	d504      	bpl.n	800f436 <_strtod_l+0x51e>
 800f42c:	ed9c 6b00 	vldr	d6, [ip]
 800f430:	2001      	movs	r0, #1
 800f432:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f436:	3101      	adds	r1, #1
 800f438:	1052      	asrs	r2, r2, #1
 800f43a:	f10c 0c08 	add.w	ip, ip, #8
 800f43e:	e7cd      	b.n	800f3dc <_strtod_l+0x4c4>
 800f440:	d0ef      	beq.n	800f422 <_strtod_l+0x50a>
 800f442:	4252      	negs	r2, r2
 800f444:	f012 000f 	ands.w	r0, r2, #15
 800f448:	d00a      	beq.n	800f460 <_strtod_l+0x548>
 800f44a:	4912      	ldr	r1, [pc, #72]	; (800f494 <_strtod_l+0x57c>)
 800f44c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f450:	ed91 7b00 	vldr	d7, [r1]
 800f454:	ec49 8b16 	vmov	d6, r8, r9
 800f458:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f45c:	ec59 8b17 	vmov	r8, r9, d7
 800f460:	1112      	asrs	r2, r2, #4
 800f462:	d0de      	beq.n	800f422 <_strtod_l+0x50a>
 800f464:	2a1f      	cmp	r2, #31
 800f466:	dd1f      	ble.n	800f4a8 <_strtod_l+0x590>
 800f468:	2500      	movs	r5, #0
 800f46a:	462e      	mov	r6, r5
 800f46c:	9506      	str	r5, [sp, #24]
 800f46e:	462f      	mov	r7, r5
 800f470:	2322      	movs	r3, #34	; 0x22
 800f472:	f04f 0800 	mov.w	r8, #0
 800f476:	f04f 0900 	mov.w	r9, #0
 800f47a:	6023      	str	r3, [r4, #0]
 800f47c:	e78e      	b.n	800f39c <_strtod_l+0x484>
 800f47e:	bf00      	nop
 800f480:	08012015 	.word	0x08012015
 800f484:	0801202c 	.word	0x0801202c
 800f488:	0801200c 	.word	0x0801200c
 800f48c:	0801200f 	.word	0x0801200f
 800f490:	08012117 	.word	0x08012117
 800f494:	08012288 	.word	0x08012288
 800f498:	08012260 	.word	0x08012260
 800f49c:	7ca00000 	.word	0x7ca00000
 800f4a0:	7ff00000 	.word	0x7ff00000
 800f4a4:	7fefffff 	.word	0x7fefffff
 800f4a8:	f012 0110 	ands.w	r1, r2, #16
 800f4ac:	bf18      	it	ne
 800f4ae:	216a      	movne	r1, #106	; 0x6a
 800f4b0:	9104      	str	r1, [sp, #16]
 800f4b2:	ec49 8b17 	vmov	d7, r8, r9
 800f4b6:	49be      	ldr	r1, [pc, #760]	; (800f7b0 <_strtod_l+0x898>)
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	07d6      	lsls	r6, r2, #31
 800f4bc:	d504      	bpl.n	800f4c8 <_strtod_l+0x5b0>
 800f4be:	ed91 6b00 	vldr	d6, [r1]
 800f4c2:	2001      	movs	r0, #1
 800f4c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f4c8:	1052      	asrs	r2, r2, #1
 800f4ca:	f101 0108 	add.w	r1, r1, #8
 800f4ce:	d1f4      	bne.n	800f4ba <_strtod_l+0x5a2>
 800f4d0:	b108      	cbz	r0, 800f4d6 <_strtod_l+0x5be>
 800f4d2:	ec59 8b17 	vmov	r8, r9, d7
 800f4d6:	9a04      	ldr	r2, [sp, #16]
 800f4d8:	b1c2      	cbz	r2, 800f50c <_strtod_l+0x5f4>
 800f4da:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f4de:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f4e2:	2a00      	cmp	r2, #0
 800f4e4:	4648      	mov	r0, r9
 800f4e6:	dd11      	ble.n	800f50c <_strtod_l+0x5f4>
 800f4e8:	2a1f      	cmp	r2, #31
 800f4ea:	f340 812e 	ble.w	800f74a <_strtod_l+0x832>
 800f4ee:	2a34      	cmp	r2, #52	; 0x34
 800f4f0:	bfde      	ittt	le
 800f4f2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f4f6:	f04f 32ff 	movle.w	r2, #4294967295
 800f4fa:	fa02 f101 	lslle.w	r1, r2, r1
 800f4fe:	f04f 0800 	mov.w	r8, #0
 800f502:	bfcc      	ite	gt
 800f504:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f508:	ea01 0900 	andle.w	r9, r1, r0
 800f50c:	ec49 8b17 	vmov	d7, r8, r9
 800f510:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f518:	d0a6      	beq.n	800f468 <_strtod_l+0x550>
 800f51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f51c:	9200      	str	r2, [sp, #0]
 800f51e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f520:	9a06      	ldr	r2, [sp, #24]
 800f522:	4620      	mov	r0, r4
 800f524:	f001 f874 	bl	8010610 <__s2b>
 800f528:	9006      	str	r0, [sp, #24]
 800f52a:	2800      	cmp	r0, #0
 800f52c:	f43f af2c 	beq.w	800f388 <_strtod_l+0x470>
 800f530:	9b07      	ldr	r3, [sp, #28]
 800f532:	1b7d      	subs	r5, r7, r5
 800f534:	2b00      	cmp	r3, #0
 800f536:	bfb4      	ite	lt
 800f538:	462b      	movlt	r3, r5
 800f53a:	2300      	movge	r3, #0
 800f53c:	9309      	str	r3, [sp, #36]	; 0x24
 800f53e:	9b07      	ldr	r3, [sp, #28]
 800f540:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f790 <_strtod_l+0x878>
 800f544:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f798 <_strtod_l+0x880>
 800f548:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f7a0 <_strtod_l+0x888>
 800f54c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f550:	2500      	movs	r5, #0
 800f552:	930c      	str	r3, [sp, #48]	; 0x30
 800f554:	462e      	mov	r6, r5
 800f556:	9b06      	ldr	r3, [sp, #24]
 800f558:	4620      	mov	r0, r4
 800f55a:	6859      	ldr	r1, [r3, #4]
 800f55c:	f000 ffb0 	bl	80104c0 <_Balloc>
 800f560:	4607      	mov	r7, r0
 800f562:	2800      	cmp	r0, #0
 800f564:	f43f af14 	beq.w	800f390 <_strtod_l+0x478>
 800f568:	9b06      	ldr	r3, [sp, #24]
 800f56a:	691a      	ldr	r2, [r3, #16]
 800f56c:	3202      	adds	r2, #2
 800f56e:	f103 010c 	add.w	r1, r3, #12
 800f572:	0092      	lsls	r2, r2, #2
 800f574:	300c      	adds	r0, #12
 800f576:	f7ff fb35 	bl	800ebe4 <memcpy>
 800f57a:	ec49 8b10 	vmov	d0, r8, r9
 800f57e:	aa14      	add	r2, sp, #80	; 0x50
 800f580:	a913      	add	r1, sp, #76	; 0x4c
 800f582:	4620      	mov	r0, r4
 800f584:	f001 fb8a 	bl	8010c9c <__d2b>
 800f588:	ec49 8b18 	vmov	d8, r8, r9
 800f58c:	9012      	str	r0, [sp, #72]	; 0x48
 800f58e:	2800      	cmp	r0, #0
 800f590:	f43f aefe 	beq.w	800f390 <_strtod_l+0x478>
 800f594:	2101      	movs	r1, #1
 800f596:	4620      	mov	r0, r4
 800f598:	f001 f8d4 	bl	8010744 <__i2b>
 800f59c:	4606      	mov	r6, r0
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	f43f aef6 	beq.w	800f390 <_strtod_l+0x478>
 800f5a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f5a6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	bfab      	itete	ge
 800f5ac:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f5ae:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f5b0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f5b4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f5b8:	bfac      	ite	ge
 800f5ba:	eb03 0b02 	addge.w	fp, r3, r2
 800f5be:	eba2 0a03 	sublt.w	sl, r2, r3
 800f5c2:	9a04      	ldr	r2, [sp, #16]
 800f5c4:	1a9b      	subs	r3, r3, r2
 800f5c6:	440b      	add	r3, r1
 800f5c8:	4a7a      	ldr	r2, [pc, #488]	; (800f7b4 <_strtod_l+0x89c>)
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f5d2:	f280 80cd 	bge.w	800f770 <_strtod_l+0x858>
 800f5d6:	1ad2      	subs	r2, r2, r3
 800f5d8:	2a1f      	cmp	r2, #31
 800f5da:	eba1 0102 	sub.w	r1, r1, r2
 800f5de:	f04f 0001 	mov.w	r0, #1
 800f5e2:	f300 80b9 	bgt.w	800f758 <_strtod_l+0x840>
 800f5e6:	fa00 f302 	lsl.w	r3, r0, r2
 800f5ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800f5f0:	eb0b 0301 	add.w	r3, fp, r1
 800f5f4:	9a04      	ldr	r2, [sp, #16]
 800f5f6:	459b      	cmp	fp, r3
 800f5f8:	448a      	add	sl, r1
 800f5fa:	4492      	add	sl, r2
 800f5fc:	465a      	mov	r2, fp
 800f5fe:	bfa8      	it	ge
 800f600:	461a      	movge	r2, r3
 800f602:	4552      	cmp	r2, sl
 800f604:	bfa8      	it	ge
 800f606:	4652      	movge	r2, sl
 800f608:	2a00      	cmp	r2, #0
 800f60a:	bfc2      	ittt	gt
 800f60c:	1a9b      	subgt	r3, r3, r2
 800f60e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f612:	ebab 0b02 	subgt.w	fp, fp, r2
 800f616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f618:	2a00      	cmp	r2, #0
 800f61a:	dd18      	ble.n	800f64e <_strtod_l+0x736>
 800f61c:	4631      	mov	r1, r6
 800f61e:	4620      	mov	r0, r4
 800f620:	930f      	str	r3, [sp, #60]	; 0x3c
 800f622:	f001 f94f 	bl	80108c4 <__pow5mult>
 800f626:	4606      	mov	r6, r0
 800f628:	2800      	cmp	r0, #0
 800f62a:	f43f aeb1 	beq.w	800f390 <_strtod_l+0x478>
 800f62e:	4601      	mov	r1, r0
 800f630:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f632:	4620      	mov	r0, r4
 800f634:	f001 f89c 	bl	8010770 <__multiply>
 800f638:	900e      	str	r0, [sp, #56]	; 0x38
 800f63a:	2800      	cmp	r0, #0
 800f63c:	f43f aea8 	beq.w	800f390 <_strtod_l+0x478>
 800f640:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f642:	4620      	mov	r0, r4
 800f644:	f000 ff7c 	bl	8010540 <_Bfree>
 800f648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f64a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f64c:	9212      	str	r2, [sp, #72]	; 0x48
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f300 8093 	bgt.w	800f77a <_strtod_l+0x862>
 800f654:	9b07      	ldr	r3, [sp, #28]
 800f656:	2b00      	cmp	r3, #0
 800f658:	dd08      	ble.n	800f66c <_strtod_l+0x754>
 800f65a:	4639      	mov	r1, r7
 800f65c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f65e:	4620      	mov	r0, r4
 800f660:	f001 f930 	bl	80108c4 <__pow5mult>
 800f664:	4607      	mov	r7, r0
 800f666:	2800      	cmp	r0, #0
 800f668:	f43f ae92 	beq.w	800f390 <_strtod_l+0x478>
 800f66c:	f1ba 0f00 	cmp.w	sl, #0
 800f670:	dd08      	ble.n	800f684 <_strtod_l+0x76c>
 800f672:	4639      	mov	r1, r7
 800f674:	4652      	mov	r2, sl
 800f676:	4620      	mov	r0, r4
 800f678:	f001 f97e 	bl	8010978 <__lshift>
 800f67c:	4607      	mov	r7, r0
 800f67e:	2800      	cmp	r0, #0
 800f680:	f43f ae86 	beq.w	800f390 <_strtod_l+0x478>
 800f684:	f1bb 0f00 	cmp.w	fp, #0
 800f688:	dd08      	ble.n	800f69c <_strtod_l+0x784>
 800f68a:	4631      	mov	r1, r6
 800f68c:	465a      	mov	r2, fp
 800f68e:	4620      	mov	r0, r4
 800f690:	f001 f972 	bl	8010978 <__lshift>
 800f694:	4606      	mov	r6, r0
 800f696:	2800      	cmp	r0, #0
 800f698:	f43f ae7a 	beq.w	800f390 <_strtod_l+0x478>
 800f69c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f69e:	463a      	mov	r2, r7
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f001 f9f5 	bl	8010a90 <__mdiff>
 800f6a6:	4605      	mov	r5, r0
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	f43f ae71 	beq.w	800f390 <_strtod_l+0x478>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f6b4:	60c3      	str	r3, [r0, #12]
 800f6b6:	4631      	mov	r1, r6
 800f6b8:	f001 f9ce 	bl	8010a58 <__mcmp>
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	da7d      	bge.n	800f7bc <_strtod_l+0x8a4>
 800f6c0:	ea5a 0308 	orrs.w	r3, sl, r8
 800f6c4:	f040 80a3 	bne.w	800f80e <_strtod_l+0x8f6>
 800f6c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	f040 809e 	bne.w	800f80e <_strtod_l+0x8f6>
 800f6d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f6d6:	0d1b      	lsrs	r3, r3, #20
 800f6d8:	051b      	lsls	r3, r3, #20
 800f6da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f6de:	f240 8096 	bls.w	800f80e <_strtod_l+0x8f6>
 800f6e2:	696b      	ldr	r3, [r5, #20]
 800f6e4:	b91b      	cbnz	r3, 800f6ee <_strtod_l+0x7d6>
 800f6e6:	692b      	ldr	r3, [r5, #16]
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	f340 8090 	ble.w	800f80e <_strtod_l+0x8f6>
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	f001 f940 	bl	8010978 <__lshift>
 800f6f8:	4631      	mov	r1, r6
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	f001 f9ac 	bl	8010a58 <__mcmp>
 800f700:	2800      	cmp	r0, #0
 800f702:	f340 8084 	ble.w	800f80e <_strtod_l+0x8f6>
 800f706:	9904      	ldr	r1, [sp, #16]
 800f708:	4a2b      	ldr	r2, [pc, #172]	; (800f7b8 <_strtod_l+0x8a0>)
 800f70a:	464b      	mov	r3, r9
 800f70c:	2900      	cmp	r1, #0
 800f70e:	f000 809d 	beq.w	800f84c <_strtod_l+0x934>
 800f712:	ea02 0109 	and.w	r1, r2, r9
 800f716:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f71a:	f300 8097 	bgt.w	800f84c <_strtod_l+0x934>
 800f71e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f722:	f77f aea5 	ble.w	800f470 <_strtod_l+0x558>
 800f726:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f7a8 <_strtod_l+0x890>
 800f72a:	ec49 8b16 	vmov	d6, r8, r9
 800f72e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f732:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f736:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	bf08      	it	eq
 800f73e:	2322      	moveq	r3, #34	; 0x22
 800f740:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f744:	bf08      	it	eq
 800f746:	6023      	streq	r3, [r4, #0]
 800f748:	e62c      	b.n	800f3a4 <_strtod_l+0x48c>
 800f74a:	f04f 31ff 	mov.w	r1, #4294967295
 800f74e:	fa01 f202 	lsl.w	r2, r1, r2
 800f752:	ea02 0808 	and.w	r8, r2, r8
 800f756:	e6d9      	b.n	800f50c <_strtod_l+0x5f4>
 800f758:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f75c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f760:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f764:	33e2      	adds	r3, #226	; 0xe2
 800f766:	fa00 f303 	lsl.w	r3, r0, r3
 800f76a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f76e:	e73f      	b.n	800f5f0 <_strtod_l+0x6d8>
 800f770:	2200      	movs	r2, #0
 800f772:	2301      	movs	r3, #1
 800f774:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f778:	e73a      	b.n	800f5f0 <_strtod_l+0x6d8>
 800f77a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f77c:	461a      	mov	r2, r3
 800f77e:	4620      	mov	r0, r4
 800f780:	f001 f8fa 	bl	8010978 <__lshift>
 800f784:	9012      	str	r0, [sp, #72]	; 0x48
 800f786:	2800      	cmp	r0, #0
 800f788:	f47f af64 	bne.w	800f654 <_strtod_l+0x73c>
 800f78c:	e600      	b.n	800f390 <_strtod_l+0x478>
 800f78e:	bf00      	nop
 800f790:	94a03595 	.word	0x94a03595
 800f794:	3fcfffff 	.word	0x3fcfffff
 800f798:	94a03595 	.word	0x94a03595
 800f79c:	3fdfffff 	.word	0x3fdfffff
 800f7a0:	35afe535 	.word	0x35afe535
 800f7a4:	3fe00000 	.word	0x3fe00000
 800f7a8:	00000000 	.word	0x00000000
 800f7ac:	39500000 	.word	0x39500000
 800f7b0:	08012040 	.word	0x08012040
 800f7b4:	fffffc02 	.word	0xfffffc02
 800f7b8:	7ff00000 	.word	0x7ff00000
 800f7bc:	46cb      	mov	fp, r9
 800f7be:	d15f      	bne.n	800f880 <_strtod_l+0x968>
 800f7c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7c4:	f1ba 0f00 	cmp.w	sl, #0
 800f7c8:	d02a      	beq.n	800f820 <_strtod_l+0x908>
 800f7ca:	4aa7      	ldr	r2, [pc, #668]	; (800fa68 <_strtod_l+0xb50>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d12b      	bne.n	800f828 <_strtod_l+0x910>
 800f7d0:	9b04      	ldr	r3, [sp, #16]
 800f7d2:	4642      	mov	r2, r8
 800f7d4:	b1fb      	cbz	r3, 800f816 <_strtod_l+0x8fe>
 800f7d6:	4ba5      	ldr	r3, [pc, #660]	; (800fa6c <_strtod_l+0xb54>)
 800f7d8:	ea09 0303 	and.w	r3, r9, r3
 800f7dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f7e0:	f04f 31ff 	mov.w	r1, #4294967295
 800f7e4:	d81a      	bhi.n	800f81c <_strtod_l+0x904>
 800f7e6:	0d1b      	lsrs	r3, r3, #20
 800f7e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f7ec:	fa01 f303 	lsl.w	r3, r1, r3
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d119      	bne.n	800f828 <_strtod_l+0x910>
 800f7f4:	4b9e      	ldr	r3, [pc, #632]	; (800fa70 <_strtod_l+0xb58>)
 800f7f6:	459b      	cmp	fp, r3
 800f7f8:	d102      	bne.n	800f800 <_strtod_l+0x8e8>
 800f7fa:	3201      	adds	r2, #1
 800f7fc:	f43f adc8 	beq.w	800f390 <_strtod_l+0x478>
 800f800:	4b9a      	ldr	r3, [pc, #616]	; (800fa6c <_strtod_l+0xb54>)
 800f802:	ea0b 0303 	and.w	r3, fp, r3
 800f806:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f80a:	f04f 0800 	mov.w	r8, #0
 800f80e:	9b04      	ldr	r3, [sp, #16]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d188      	bne.n	800f726 <_strtod_l+0x80e>
 800f814:	e5c6      	b.n	800f3a4 <_strtod_l+0x48c>
 800f816:	f04f 33ff 	mov.w	r3, #4294967295
 800f81a:	e7e9      	b.n	800f7f0 <_strtod_l+0x8d8>
 800f81c:	460b      	mov	r3, r1
 800f81e:	e7e7      	b.n	800f7f0 <_strtod_l+0x8d8>
 800f820:	ea53 0308 	orrs.w	r3, r3, r8
 800f824:	f43f af6f 	beq.w	800f706 <_strtod_l+0x7ee>
 800f828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f82a:	b1cb      	cbz	r3, 800f860 <_strtod_l+0x948>
 800f82c:	ea13 0f0b 	tst.w	r3, fp
 800f830:	d0ed      	beq.n	800f80e <_strtod_l+0x8f6>
 800f832:	9a04      	ldr	r2, [sp, #16]
 800f834:	4640      	mov	r0, r8
 800f836:	4649      	mov	r1, r9
 800f838:	f1ba 0f00 	cmp.w	sl, #0
 800f83c:	d014      	beq.n	800f868 <_strtod_l+0x950>
 800f83e:	f7ff fb4e 	bl	800eede <sulp>
 800f842:	ee38 7b00 	vadd.f64	d7, d8, d0
 800f846:	ec59 8b17 	vmov	r8, r9, d7
 800f84a:	e7e0      	b.n	800f80e <_strtod_l+0x8f6>
 800f84c:	4013      	ands	r3, r2
 800f84e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f852:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f856:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f85a:	f04f 38ff 	mov.w	r8, #4294967295
 800f85e:	e7d6      	b.n	800f80e <_strtod_l+0x8f6>
 800f860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f862:	ea13 0f08 	tst.w	r3, r8
 800f866:	e7e3      	b.n	800f830 <_strtod_l+0x918>
 800f868:	f7ff fb39 	bl	800eede <sulp>
 800f86c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800f870:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f878:	ec59 8b10 	vmov	r8, r9, d0
 800f87c:	d1c7      	bne.n	800f80e <_strtod_l+0x8f6>
 800f87e:	e5f7      	b.n	800f470 <_strtod_l+0x558>
 800f880:	4631      	mov	r1, r6
 800f882:	4628      	mov	r0, r5
 800f884:	f001 fa66 	bl	8010d54 <__ratio>
 800f888:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f88c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f894:	d865      	bhi.n	800f962 <_strtod_l+0xa4a>
 800f896:	f1ba 0f00 	cmp.w	sl, #0
 800f89a:	d042      	beq.n	800f922 <_strtod_l+0xa0a>
 800f89c:	4b75      	ldr	r3, [pc, #468]	; (800fa74 <_strtod_l+0xb5c>)
 800f89e:	2200      	movs	r2, #0
 800f8a0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800f8a4:	4871      	ldr	r0, [pc, #452]	; (800fa6c <_strtod_l+0xb54>)
 800f8a6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fa80 <_strtod_l+0xb68>
 800f8aa:	ea0b 0100 	and.w	r1, fp, r0
 800f8ae:	4561      	cmp	r1, ip
 800f8b0:	f040 808e 	bne.w	800f9d0 <_strtod_l+0xab8>
 800f8b4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800f8b8:	ec49 8b10 	vmov	d0, r8, r9
 800f8bc:	ec43 2b1c 	vmov	d12, r2, r3
 800f8c0:	910a      	str	r1, [sp, #40]	; 0x28
 800f8c2:	f001 f96f 	bl	8010ba4 <__ulp>
 800f8c6:	ec49 8b1e 	vmov	d14, r8, r9
 800f8ca:	4868      	ldr	r0, [pc, #416]	; (800fa6c <_strtod_l+0xb54>)
 800f8cc:	eeac eb00 	vfma.f64	d14, d12, d0
 800f8d0:	ee1e 3a90 	vmov	r3, s29
 800f8d4:	4a68      	ldr	r2, [pc, #416]	; (800fa78 <_strtod_l+0xb60>)
 800f8d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8d8:	4018      	ands	r0, r3
 800f8da:	4290      	cmp	r0, r2
 800f8dc:	ec59 8b1e 	vmov	r8, r9, d14
 800f8e0:	d94e      	bls.n	800f980 <_strtod_l+0xa68>
 800f8e2:	ee18 3a90 	vmov	r3, s17
 800f8e6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d104      	bne.n	800f8f8 <_strtod_l+0x9e0>
 800f8ee:	ee18 3a10 	vmov	r3, s16
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	f43f ad4c 	beq.w	800f390 <_strtod_l+0x478>
 800f8f8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800fa70 <_strtod_l+0xb58>
 800f8fc:	f04f 38ff 	mov.w	r8, #4294967295
 800f900:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f902:	4620      	mov	r0, r4
 800f904:	f000 fe1c 	bl	8010540 <_Bfree>
 800f908:	4639      	mov	r1, r7
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 fe18 	bl	8010540 <_Bfree>
 800f910:	4631      	mov	r1, r6
 800f912:	4620      	mov	r0, r4
 800f914:	f000 fe14 	bl	8010540 <_Bfree>
 800f918:	4629      	mov	r1, r5
 800f91a:	4620      	mov	r0, r4
 800f91c:	f000 fe10 	bl	8010540 <_Bfree>
 800f920:	e619      	b.n	800f556 <_strtod_l+0x63e>
 800f922:	f1b8 0f00 	cmp.w	r8, #0
 800f926:	d112      	bne.n	800f94e <_strtod_l+0xa36>
 800f928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f92c:	b9b3      	cbnz	r3, 800f95c <_strtod_l+0xa44>
 800f92e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f932:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f93a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f93e:	bf58      	it	pl
 800f940:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f944:	eeb1 7b4d 	vneg.f64	d7, d13
 800f948:	ec53 2b17 	vmov	r2, r3, d7
 800f94c:	e7aa      	b.n	800f8a4 <_strtod_l+0x98c>
 800f94e:	f1b8 0f01 	cmp.w	r8, #1
 800f952:	d103      	bne.n	800f95c <_strtod_l+0xa44>
 800f954:	f1b9 0f00 	cmp.w	r9, #0
 800f958:	f43f ad8a 	beq.w	800f470 <_strtod_l+0x558>
 800f95c:	4b47      	ldr	r3, [pc, #284]	; (800fa7c <_strtod_l+0xb64>)
 800f95e:	2200      	movs	r2, #0
 800f960:	e79e      	b.n	800f8a0 <_strtod_l+0x988>
 800f962:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f966:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f96a:	f1ba 0f00 	cmp.w	sl, #0
 800f96e:	d104      	bne.n	800f97a <_strtod_l+0xa62>
 800f970:	eeb1 7b4d 	vneg.f64	d7, d13
 800f974:	ec53 2b17 	vmov	r2, r3, d7
 800f978:	e794      	b.n	800f8a4 <_strtod_l+0x98c>
 800f97a:	eeb0 7b4d 	vmov.f64	d7, d13
 800f97e:	e7f9      	b.n	800f974 <_strtod_l+0xa5c>
 800f980:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f984:	9b04      	ldr	r3, [sp, #16]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d1ba      	bne.n	800f900 <_strtod_l+0x9e8>
 800f98a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f98e:	0d1b      	lsrs	r3, r3, #20
 800f990:	051b      	lsls	r3, r3, #20
 800f992:	4299      	cmp	r1, r3
 800f994:	d1b4      	bne.n	800f900 <_strtod_l+0x9e8>
 800f996:	ec51 0b1d 	vmov	r0, r1, d13
 800f99a:	f7f0 ffc3 	bl	8000924 <__aeabi_d2lz>
 800f99e:	f7f0 fe85 	bl	80006ac <__aeabi_l2d>
 800f9a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9a6:	ec41 0b17 	vmov	d7, r0, r1
 800f9aa:	ea43 0308 	orr.w	r3, r3, r8
 800f9ae:	ea53 030a 	orrs.w	r3, r3, sl
 800f9b2:	ee3d db47 	vsub.f64	d13, d13, d7
 800f9b6:	d03c      	beq.n	800fa32 <_strtod_l+0xb1a>
 800f9b8:	eeb4 dbca 	vcmpe.f64	d13, d10
 800f9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c0:	f53f acf0 	bmi.w	800f3a4 <_strtod_l+0x48c>
 800f9c4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800f9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9cc:	dd98      	ble.n	800f900 <_strtod_l+0x9e8>
 800f9ce:	e4e9      	b.n	800f3a4 <_strtod_l+0x48c>
 800f9d0:	9804      	ldr	r0, [sp, #16]
 800f9d2:	b1f0      	cbz	r0, 800fa12 <_strtod_l+0xafa>
 800f9d4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800f9d8:	d81b      	bhi.n	800fa12 <_strtod_l+0xafa>
 800f9da:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fa60 <_strtod_l+0xb48>
 800f9de:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800f9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e6:	d811      	bhi.n	800fa0c <_strtod_l+0xaf4>
 800f9e8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800f9ec:	ee1d 3a10 	vmov	r3, s26
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	bf38      	it	cc
 800f9f4:	2301      	movcc	r3, #1
 800f9f6:	ee0d 3a10 	vmov	s26, r3
 800f9fa:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800f9fe:	f1ba 0f00 	cmp.w	sl, #0
 800fa02:	d113      	bne.n	800fa2c <_strtod_l+0xb14>
 800fa04:	eeb1 7b4d 	vneg.f64	d7, d13
 800fa08:	ec53 2b17 	vmov	r2, r3, d7
 800fa0c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800fa10:	1a43      	subs	r3, r0, r1
 800fa12:	eeb0 0b48 	vmov.f64	d0, d8
 800fa16:	ec43 2b1c 	vmov	d12, r2, r3
 800fa1a:	910a      	str	r1, [sp, #40]	; 0x28
 800fa1c:	f001 f8c2 	bl	8010ba4 <__ulp>
 800fa20:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fa22:	eeac 8b00 	vfma.f64	d8, d12, d0
 800fa26:	ec59 8b18 	vmov	r8, r9, d8
 800fa2a:	e7ab      	b.n	800f984 <_strtod_l+0xa6c>
 800fa2c:	eeb0 7b4d 	vmov.f64	d7, d13
 800fa30:	e7ea      	b.n	800fa08 <_strtod_l+0xaf0>
 800fa32:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3a:	f57f af61 	bpl.w	800f900 <_strtod_l+0x9e8>
 800fa3e:	e4b1      	b.n	800f3a4 <_strtod_l+0x48c>
 800fa40:	2300      	movs	r3, #0
 800fa42:	9308      	str	r3, [sp, #32]
 800fa44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa48:	6013      	str	r3, [r2, #0]
 800fa4a:	f7ff baad 	b.w	800efa8 <_strtod_l+0x90>
 800fa4e:	2a65      	cmp	r2, #101	; 0x65
 800fa50:	f43f ab9f 	beq.w	800f192 <_strtod_l+0x27a>
 800fa54:	2a45      	cmp	r2, #69	; 0x45
 800fa56:	f43f ab9c 	beq.w	800f192 <_strtod_l+0x27a>
 800fa5a:	2101      	movs	r1, #1
 800fa5c:	f7ff bbd4 	b.w	800f208 <_strtod_l+0x2f0>
 800fa60:	ffc00000 	.word	0xffc00000
 800fa64:	41dfffff 	.word	0x41dfffff
 800fa68:	000fffff 	.word	0x000fffff
 800fa6c:	7ff00000 	.word	0x7ff00000
 800fa70:	7fefffff 	.word	0x7fefffff
 800fa74:	3ff00000 	.word	0x3ff00000
 800fa78:	7c9fffff 	.word	0x7c9fffff
 800fa7c:	bff00000 	.word	0xbff00000
 800fa80:	7fe00000 	.word	0x7fe00000

0800fa84 <strtod>:
 800fa84:	460a      	mov	r2, r1
 800fa86:	4601      	mov	r1, r0
 800fa88:	4802      	ldr	r0, [pc, #8]	; (800fa94 <strtod+0x10>)
 800fa8a:	4b03      	ldr	r3, [pc, #12]	; (800fa98 <strtod+0x14>)
 800fa8c:	6800      	ldr	r0, [r0, #0]
 800fa8e:	f7ff ba43 	b.w	800ef18 <_strtod_l>
 800fa92:	bf00      	nop
 800fa94:	24003a2c 	.word	0x24003a2c
 800fa98:	24003a94 	.word	0x24003a94

0800fa9c <strtok>:
 800fa9c:	4b16      	ldr	r3, [pc, #88]	; (800faf8 <strtok+0x5c>)
 800fa9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800faa0:	681e      	ldr	r6, [r3, #0]
 800faa2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800faa4:	4605      	mov	r5, r0
 800faa6:	b9fc      	cbnz	r4, 800fae8 <strtok+0x4c>
 800faa8:	2050      	movs	r0, #80	; 0x50
 800faaa:	9101      	str	r1, [sp, #4]
 800faac:	f7ff f88a 	bl	800ebc4 <malloc>
 800fab0:	9901      	ldr	r1, [sp, #4]
 800fab2:	65b0      	str	r0, [r6, #88]	; 0x58
 800fab4:	4602      	mov	r2, r0
 800fab6:	b920      	cbnz	r0, 800fac2 <strtok+0x26>
 800fab8:	4b10      	ldr	r3, [pc, #64]	; (800fafc <strtok+0x60>)
 800faba:	4811      	ldr	r0, [pc, #68]	; (800fb00 <strtok+0x64>)
 800fabc:	2157      	movs	r1, #87	; 0x57
 800fabe:	f000 f849 	bl	800fb54 <__assert_func>
 800fac2:	e9c0 4400 	strd	r4, r4, [r0]
 800fac6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800faca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800face:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800fad2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800fad6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800fada:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800fade:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800fae2:	6184      	str	r4, [r0, #24]
 800fae4:	7704      	strb	r4, [r0, #28]
 800fae6:	6244      	str	r4, [r0, #36]	; 0x24
 800fae8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800faea:	2301      	movs	r3, #1
 800faec:	4628      	mov	r0, r5
 800faee:	b002      	add	sp, #8
 800faf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800faf4:	f000 b806 	b.w	800fb04 <__strtok_r>
 800faf8:	24003a2c 	.word	0x24003a2c
 800fafc:	08012068 	.word	0x08012068
 800fb00:	0801207f 	.word	0x0801207f

0800fb04 <__strtok_r>:
 800fb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb06:	b908      	cbnz	r0, 800fb0c <__strtok_r+0x8>
 800fb08:	6810      	ldr	r0, [r2, #0]
 800fb0a:	b188      	cbz	r0, 800fb30 <__strtok_r+0x2c>
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fb14:	460f      	mov	r7, r1
 800fb16:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fb1a:	b91e      	cbnz	r6, 800fb24 <__strtok_r+0x20>
 800fb1c:	b965      	cbnz	r5, 800fb38 <__strtok_r+0x34>
 800fb1e:	6015      	str	r5, [r2, #0]
 800fb20:	4628      	mov	r0, r5
 800fb22:	e005      	b.n	800fb30 <__strtok_r+0x2c>
 800fb24:	42b5      	cmp	r5, r6
 800fb26:	d1f6      	bne.n	800fb16 <__strtok_r+0x12>
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d1f0      	bne.n	800fb0e <__strtok_r+0xa>
 800fb2c:	6014      	str	r4, [r2, #0]
 800fb2e:	7003      	strb	r3, [r0, #0]
 800fb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb32:	461c      	mov	r4, r3
 800fb34:	e00c      	b.n	800fb50 <__strtok_r+0x4c>
 800fb36:	b915      	cbnz	r5, 800fb3e <__strtok_r+0x3a>
 800fb38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb3c:	460e      	mov	r6, r1
 800fb3e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fb42:	42ab      	cmp	r3, r5
 800fb44:	d1f7      	bne.n	800fb36 <__strtok_r+0x32>
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d0f3      	beq.n	800fb32 <__strtok_r+0x2e>
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800fb50:	6014      	str	r4, [r2, #0]
 800fb52:	e7ed      	b.n	800fb30 <__strtok_r+0x2c>

0800fb54 <__assert_func>:
 800fb54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb56:	4614      	mov	r4, r2
 800fb58:	461a      	mov	r2, r3
 800fb5a:	4b09      	ldr	r3, [pc, #36]	; (800fb80 <__assert_func+0x2c>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	4605      	mov	r5, r0
 800fb60:	68d8      	ldr	r0, [r3, #12]
 800fb62:	b14c      	cbz	r4, 800fb78 <__assert_func+0x24>
 800fb64:	4b07      	ldr	r3, [pc, #28]	; (800fb84 <__assert_func+0x30>)
 800fb66:	9100      	str	r1, [sp, #0]
 800fb68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb6c:	4906      	ldr	r1, [pc, #24]	; (800fb88 <__assert_func+0x34>)
 800fb6e:	462b      	mov	r3, r5
 800fb70:	f000 f8e4 	bl	800fd3c <fiprintf>
 800fb74:	f001 ff04 	bl	8011980 <abort>
 800fb78:	4b04      	ldr	r3, [pc, #16]	; (800fb8c <__assert_func+0x38>)
 800fb7a:	461c      	mov	r4, r3
 800fb7c:	e7f3      	b.n	800fb66 <__assert_func+0x12>
 800fb7e:	bf00      	nop
 800fb80:	24003a2c 	.word	0x24003a2c
 800fb84:	080120dc 	.word	0x080120dc
 800fb88:	080120e9 	.word	0x080120e9
 800fb8c:	08012117 	.word	0x08012117

0800fb90 <std>:
 800fb90:	2300      	movs	r3, #0
 800fb92:	b510      	push	{r4, lr}
 800fb94:	4604      	mov	r4, r0
 800fb96:	e9c0 3300 	strd	r3, r3, [r0]
 800fb9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb9e:	6083      	str	r3, [r0, #8]
 800fba0:	8181      	strh	r1, [r0, #12]
 800fba2:	6643      	str	r3, [r0, #100]	; 0x64
 800fba4:	81c2      	strh	r2, [r0, #14]
 800fba6:	6183      	str	r3, [r0, #24]
 800fba8:	4619      	mov	r1, r3
 800fbaa:	2208      	movs	r2, #8
 800fbac:	305c      	adds	r0, #92	; 0x5c
 800fbae:	f7ff f827 	bl	800ec00 <memset>
 800fbb2:	4b05      	ldr	r3, [pc, #20]	; (800fbc8 <std+0x38>)
 800fbb4:	6263      	str	r3, [r4, #36]	; 0x24
 800fbb6:	4b05      	ldr	r3, [pc, #20]	; (800fbcc <std+0x3c>)
 800fbb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800fbba:	4b05      	ldr	r3, [pc, #20]	; (800fbd0 <std+0x40>)
 800fbbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fbbe:	4b05      	ldr	r3, [pc, #20]	; (800fbd4 <std+0x44>)
 800fbc0:	6224      	str	r4, [r4, #32]
 800fbc2:	6323      	str	r3, [r4, #48]	; 0x30
 800fbc4:	bd10      	pop	{r4, pc}
 800fbc6:	bf00      	nop
 800fbc8:	08011711 	.word	0x08011711
 800fbcc:	08011733 	.word	0x08011733
 800fbd0:	0801176b 	.word	0x0801176b
 800fbd4:	0801178f 	.word	0x0801178f

0800fbd8 <_cleanup_r>:
 800fbd8:	4901      	ldr	r1, [pc, #4]	; (800fbe0 <_cleanup_r+0x8>)
 800fbda:	f000 b8c1 	b.w	800fd60 <_fwalk_reent>
 800fbde:	bf00      	nop
 800fbe0:	08011abd 	.word	0x08011abd

0800fbe4 <__sfmoreglue>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	2268      	movs	r2, #104	; 0x68
 800fbe8:	1e4d      	subs	r5, r1, #1
 800fbea:	4355      	muls	r5, r2
 800fbec:	460e      	mov	r6, r1
 800fbee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fbf2:	f7ff f879 	bl	800ece8 <_malloc_r>
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	b140      	cbz	r0, 800fc0c <__sfmoreglue+0x28>
 800fbfa:	2100      	movs	r1, #0
 800fbfc:	e9c0 1600 	strd	r1, r6, [r0]
 800fc00:	300c      	adds	r0, #12
 800fc02:	60a0      	str	r0, [r4, #8]
 800fc04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fc08:	f7fe fffa 	bl	800ec00 <memset>
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	bd70      	pop	{r4, r5, r6, pc}

0800fc10 <__sfp_lock_acquire>:
 800fc10:	4801      	ldr	r0, [pc, #4]	; (800fc18 <__sfp_lock_acquire+0x8>)
 800fc12:	f000 bc34 	b.w	801047e <__retarget_lock_acquire_recursive>
 800fc16:	bf00      	nop
 800fc18:	24006575 	.word	0x24006575

0800fc1c <__sfp_lock_release>:
 800fc1c:	4801      	ldr	r0, [pc, #4]	; (800fc24 <__sfp_lock_release+0x8>)
 800fc1e:	f000 bc2f 	b.w	8010480 <__retarget_lock_release_recursive>
 800fc22:	bf00      	nop
 800fc24:	24006575 	.word	0x24006575

0800fc28 <__sinit_lock_acquire>:
 800fc28:	4801      	ldr	r0, [pc, #4]	; (800fc30 <__sinit_lock_acquire+0x8>)
 800fc2a:	f000 bc28 	b.w	801047e <__retarget_lock_acquire_recursive>
 800fc2e:	bf00      	nop
 800fc30:	24006576 	.word	0x24006576

0800fc34 <__sinit_lock_release>:
 800fc34:	4801      	ldr	r0, [pc, #4]	; (800fc3c <__sinit_lock_release+0x8>)
 800fc36:	f000 bc23 	b.w	8010480 <__retarget_lock_release_recursive>
 800fc3a:	bf00      	nop
 800fc3c:	24006576 	.word	0x24006576

0800fc40 <__sinit>:
 800fc40:	b510      	push	{r4, lr}
 800fc42:	4604      	mov	r4, r0
 800fc44:	f7ff fff0 	bl	800fc28 <__sinit_lock_acquire>
 800fc48:	69a3      	ldr	r3, [r4, #24]
 800fc4a:	b11b      	cbz	r3, 800fc54 <__sinit+0x14>
 800fc4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc50:	f7ff bff0 	b.w	800fc34 <__sinit_lock_release>
 800fc54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fc58:	6523      	str	r3, [r4, #80]	; 0x50
 800fc5a:	4b13      	ldr	r3, [pc, #76]	; (800fca8 <__sinit+0x68>)
 800fc5c:	4a13      	ldr	r2, [pc, #76]	; (800fcac <__sinit+0x6c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	62a2      	str	r2, [r4, #40]	; 0x28
 800fc62:	42a3      	cmp	r3, r4
 800fc64:	bf04      	itt	eq
 800fc66:	2301      	moveq	r3, #1
 800fc68:	61a3      	streq	r3, [r4, #24]
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f000 f820 	bl	800fcb0 <__sfp>
 800fc70:	6060      	str	r0, [r4, #4]
 800fc72:	4620      	mov	r0, r4
 800fc74:	f000 f81c 	bl	800fcb0 <__sfp>
 800fc78:	60a0      	str	r0, [r4, #8]
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f000 f818 	bl	800fcb0 <__sfp>
 800fc80:	2200      	movs	r2, #0
 800fc82:	60e0      	str	r0, [r4, #12]
 800fc84:	2104      	movs	r1, #4
 800fc86:	6860      	ldr	r0, [r4, #4]
 800fc88:	f7ff ff82 	bl	800fb90 <std>
 800fc8c:	68a0      	ldr	r0, [r4, #8]
 800fc8e:	2201      	movs	r2, #1
 800fc90:	2109      	movs	r1, #9
 800fc92:	f7ff ff7d 	bl	800fb90 <std>
 800fc96:	68e0      	ldr	r0, [r4, #12]
 800fc98:	2202      	movs	r2, #2
 800fc9a:	2112      	movs	r1, #18
 800fc9c:	f7ff ff78 	bl	800fb90 <std>
 800fca0:	2301      	movs	r3, #1
 800fca2:	61a3      	str	r3, [r4, #24]
 800fca4:	e7d2      	b.n	800fc4c <__sinit+0xc>
 800fca6:	bf00      	nop
 800fca8:	08012008 	.word	0x08012008
 800fcac:	0800fbd9 	.word	0x0800fbd9

0800fcb0 <__sfp>:
 800fcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcb2:	4607      	mov	r7, r0
 800fcb4:	f7ff ffac 	bl	800fc10 <__sfp_lock_acquire>
 800fcb8:	4b1e      	ldr	r3, [pc, #120]	; (800fd34 <__sfp+0x84>)
 800fcba:	681e      	ldr	r6, [r3, #0]
 800fcbc:	69b3      	ldr	r3, [r6, #24]
 800fcbe:	b913      	cbnz	r3, 800fcc6 <__sfp+0x16>
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	f7ff ffbd 	bl	800fc40 <__sinit>
 800fcc6:	3648      	adds	r6, #72	; 0x48
 800fcc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fccc:	3b01      	subs	r3, #1
 800fcce:	d503      	bpl.n	800fcd8 <__sfp+0x28>
 800fcd0:	6833      	ldr	r3, [r6, #0]
 800fcd2:	b30b      	cbz	r3, 800fd18 <__sfp+0x68>
 800fcd4:	6836      	ldr	r6, [r6, #0]
 800fcd6:	e7f7      	b.n	800fcc8 <__sfp+0x18>
 800fcd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fcdc:	b9d5      	cbnz	r5, 800fd14 <__sfp+0x64>
 800fcde:	4b16      	ldr	r3, [pc, #88]	; (800fd38 <__sfp+0x88>)
 800fce0:	60e3      	str	r3, [r4, #12]
 800fce2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fce6:	6665      	str	r5, [r4, #100]	; 0x64
 800fce8:	f000 fbc8 	bl	801047c <__retarget_lock_init_recursive>
 800fcec:	f7ff ff96 	bl	800fc1c <__sfp_lock_release>
 800fcf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fcf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fcf8:	6025      	str	r5, [r4, #0]
 800fcfa:	61a5      	str	r5, [r4, #24]
 800fcfc:	2208      	movs	r2, #8
 800fcfe:	4629      	mov	r1, r5
 800fd00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fd04:	f7fe ff7c 	bl	800ec00 <memset>
 800fd08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fd0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fd10:	4620      	mov	r0, r4
 800fd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd14:	3468      	adds	r4, #104	; 0x68
 800fd16:	e7d9      	b.n	800fccc <__sfp+0x1c>
 800fd18:	2104      	movs	r1, #4
 800fd1a:	4638      	mov	r0, r7
 800fd1c:	f7ff ff62 	bl	800fbe4 <__sfmoreglue>
 800fd20:	4604      	mov	r4, r0
 800fd22:	6030      	str	r0, [r6, #0]
 800fd24:	2800      	cmp	r0, #0
 800fd26:	d1d5      	bne.n	800fcd4 <__sfp+0x24>
 800fd28:	f7ff ff78 	bl	800fc1c <__sfp_lock_release>
 800fd2c:	230c      	movs	r3, #12
 800fd2e:	603b      	str	r3, [r7, #0]
 800fd30:	e7ee      	b.n	800fd10 <__sfp+0x60>
 800fd32:	bf00      	nop
 800fd34:	08012008 	.word	0x08012008
 800fd38:	ffff0001 	.word	0xffff0001

0800fd3c <fiprintf>:
 800fd3c:	b40e      	push	{r1, r2, r3}
 800fd3e:	b503      	push	{r0, r1, lr}
 800fd40:	4601      	mov	r1, r0
 800fd42:	ab03      	add	r3, sp, #12
 800fd44:	4805      	ldr	r0, [pc, #20]	; (800fd5c <fiprintf+0x20>)
 800fd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd4a:	6800      	ldr	r0, [r0, #0]
 800fd4c:	9301      	str	r3, [sp, #4]
 800fd4e:	f001 fa11 	bl	8011174 <_vfiprintf_r>
 800fd52:	b002      	add	sp, #8
 800fd54:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd58:	b003      	add	sp, #12
 800fd5a:	4770      	bx	lr
 800fd5c:	24003a2c 	.word	0x24003a2c

0800fd60 <_fwalk_reent>:
 800fd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd64:	4606      	mov	r6, r0
 800fd66:	4688      	mov	r8, r1
 800fd68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fd6c:	2700      	movs	r7, #0
 800fd6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd72:	f1b9 0901 	subs.w	r9, r9, #1
 800fd76:	d505      	bpl.n	800fd84 <_fwalk_reent+0x24>
 800fd78:	6824      	ldr	r4, [r4, #0]
 800fd7a:	2c00      	cmp	r4, #0
 800fd7c:	d1f7      	bne.n	800fd6e <_fwalk_reent+0xe>
 800fd7e:	4638      	mov	r0, r7
 800fd80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd84:	89ab      	ldrh	r3, [r5, #12]
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d907      	bls.n	800fd9a <_fwalk_reent+0x3a>
 800fd8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	d003      	beq.n	800fd9a <_fwalk_reent+0x3a>
 800fd92:	4629      	mov	r1, r5
 800fd94:	4630      	mov	r0, r6
 800fd96:	47c0      	blx	r8
 800fd98:	4307      	orrs	r7, r0
 800fd9a:	3568      	adds	r5, #104	; 0x68
 800fd9c:	e7e9      	b.n	800fd72 <_fwalk_reent+0x12>

0800fd9e <rshift>:
 800fd9e:	6903      	ldr	r3, [r0, #16]
 800fda0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fda4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fda8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fdac:	f100 0414 	add.w	r4, r0, #20
 800fdb0:	dd45      	ble.n	800fe3e <rshift+0xa0>
 800fdb2:	f011 011f 	ands.w	r1, r1, #31
 800fdb6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fdba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fdbe:	d10c      	bne.n	800fdda <rshift+0x3c>
 800fdc0:	f100 0710 	add.w	r7, r0, #16
 800fdc4:	4629      	mov	r1, r5
 800fdc6:	42b1      	cmp	r1, r6
 800fdc8:	d334      	bcc.n	800fe34 <rshift+0x96>
 800fdca:	1a9b      	subs	r3, r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	1eea      	subs	r2, r5, #3
 800fdd0:	4296      	cmp	r6, r2
 800fdd2:	bf38      	it	cc
 800fdd4:	2300      	movcc	r3, #0
 800fdd6:	4423      	add	r3, r4
 800fdd8:	e015      	b.n	800fe06 <rshift+0x68>
 800fdda:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fdde:	f1c1 0820 	rsb	r8, r1, #32
 800fde2:	40cf      	lsrs	r7, r1
 800fde4:	f105 0e04 	add.w	lr, r5, #4
 800fde8:	46a1      	mov	r9, r4
 800fdea:	4576      	cmp	r6, lr
 800fdec:	46f4      	mov	ip, lr
 800fdee:	d815      	bhi.n	800fe1c <rshift+0x7e>
 800fdf0:	1a9a      	subs	r2, r3, r2
 800fdf2:	0092      	lsls	r2, r2, #2
 800fdf4:	3a04      	subs	r2, #4
 800fdf6:	3501      	adds	r5, #1
 800fdf8:	42ae      	cmp	r6, r5
 800fdfa:	bf38      	it	cc
 800fdfc:	2200      	movcc	r2, #0
 800fdfe:	18a3      	adds	r3, r4, r2
 800fe00:	50a7      	str	r7, [r4, r2]
 800fe02:	b107      	cbz	r7, 800fe06 <rshift+0x68>
 800fe04:	3304      	adds	r3, #4
 800fe06:	1b1a      	subs	r2, r3, r4
 800fe08:	42a3      	cmp	r3, r4
 800fe0a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fe0e:	bf08      	it	eq
 800fe10:	2300      	moveq	r3, #0
 800fe12:	6102      	str	r2, [r0, #16]
 800fe14:	bf08      	it	eq
 800fe16:	6143      	streq	r3, [r0, #20]
 800fe18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe1c:	f8dc c000 	ldr.w	ip, [ip]
 800fe20:	fa0c fc08 	lsl.w	ip, ip, r8
 800fe24:	ea4c 0707 	orr.w	r7, ip, r7
 800fe28:	f849 7b04 	str.w	r7, [r9], #4
 800fe2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe30:	40cf      	lsrs	r7, r1
 800fe32:	e7da      	b.n	800fdea <rshift+0x4c>
 800fe34:	f851 cb04 	ldr.w	ip, [r1], #4
 800fe38:	f847 cf04 	str.w	ip, [r7, #4]!
 800fe3c:	e7c3      	b.n	800fdc6 <rshift+0x28>
 800fe3e:	4623      	mov	r3, r4
 800fe40:	e7e1      	b.n	800fe06 <rshift+0x68>

0800fe42 <__hexdig_fun>:
 800fe42:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fe46:	2b09      	cmp	r3, #9
 800fe48:	d802      	bhi.n	800fe50 <__hexdig_fun+0xe>
 800fe4a:	3820      	subs	r0, #32
 800fe4c:	b2c0      	uxtb	r0, r0
 800fe4e:	4770      	bx	lr
 800fe50:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fe54:	2b05      	cmp	r3, #5
 800fe56:	d801      	bhi.n	800fe5c <__hexdig_fun+0x1a>
 800fe58:	3847      	subs	r0, #71	; 0x47
 800fe5a:	e7f7      	b.n	800fe4c <__hexdig_fun+0xa>
 800fe5c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fe60:	2b05      	cmp	r3, #5
 800fe62:	d801      	bhi.n	800fe68 <__hexdig_fun+0x26>
 800fe64:	3827      	subs	r0, #39	; 0x27
 800fe66:	e7f1      	b.n	800fe4c <__hexdig_fun+0xa>
 800fe68:	2000      	movs	r0, #0
 800fe6a:	4770      	bx	lr

0800fe6c <__gethex>:
 800fe6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe70:	ed2d 8b02 	vpush	{d8}
 800fe74:	b089      	sub	sp, #36	; 0x24
 800fe76:	ee08 0a10 	vmov	s16, r0
 800fe7a:	9304      	str	r3, [sp, #16]
 800fe7c:	4bb4      	ldr	r3, [pc, #720]	; (8010150 <__gethex+0x2e4>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	9301      	str	r3, [sp, #4]
 800fe82:	4618      	mov	r0, r3
 800fe84:	468b      	mov	fp, r1
 800fe86:	4690      	mov	r8, r2
 800fe88:	f7f0 fa2a 	bl	80002e0 <strlen>
 800fe8c:	9b01      	ldr	r3, [sp, #4]
 800fe8e:	f8db 2000 	ldr.w	r2, [fp]
 800fe92:	4403      	add	r3, r0
 800fe94:	4682      	mov	sl, r0
 800fe96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fe9a:	9305      	str	r3, [sp, #20]
 800fe9c:	1c93      	adds	r3, r2, #2
 800fe9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fea2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fea6:	32fe      	adds	r2, #254	; 0xfe
 800fea8:	18d1      	adds	r1, r2, r3
 800feaa:	461f      	mov	r7, r3
 800feac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800feb0:	9100      	str	r1, [sp, #0]
 800feb2:	2830      	cmp	r0, #48	; 0x30
 800feb4:	d0f8      	beq.n	800fea8 <__gethex+0x3c>
 800feb6:	f7ff ffc4 	bl	800fe42 <__hexdig_fun>
 800feba:	4604      	mov	r4, r0
 800febc:	2800      	cmp	r0, #0
 800febe:	d13a      	bne.n	800ff36 <__gethex+0xca>
 800fec0:	9901      	ldr	r1, [sp, #4]
 800fec2:	4652      	mov	r2, sl
 800fec4:	4638      	mov	r0, r7
 800fec6:	f001 fc66 	bl	8011796 <strncmp>
 800feca:	4605      	mov	r5, r0
 800fecc:	2800      	cmp	r0, #0
 800fece:	d168      	bne.n	800ffa2 <__gethex+0x136>
 800fed0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fed4:	eb07 060a 	add.w	r6, r7, sl
 800fed8:	f7ff ffb3 	bl	800fe42 <__hexdig_fun>
 800fedc:	2800      	cmp	r0, #0
 800fede:	d062      	beq.n	800ffa6 <__gethex+0x13a>
 800fee0:	4633      	mov	r3, r6
 800fee2:	7818      	ldrb	r0, [r3, #0]
 800fee4:	2830      	cmp	r0, #48	; 0x30
 800fee6:	461f      	mov	r7, r3
 800fee8:	f103 0301 	add.w	r3, r3, #1
 800feec:	d0f9      	beq.n	800fee2 <__gethex+0x76>
 800feee:	f7ff ffa8 	bl	800fe42 <__hexdig_fun>
 800fef2:	2301      	movs	r3, #1
 800fef4:	fab0 f480 	clz	r4, r0
 800fef8:	0964      	lsrs	r4, r4, #5
 800fefa:	4635      	mov	r5, r6
 800fefc:	9300      	str	r3, [sp, #0]
 800fefe:	463a      	mov	r2, r7
 800ff00:	4616      	mov	r6, r2
 800ff02:	3201      	adds	r2, #1
 800ff04:	7830      	ldrb	r0, [r6, #0]
 800ff06:	f7ff ff9c 	bl	800fe42 <__hexdig_fun>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d1f8      	bne.n	800ff00 <__gethex+0x94>
 800ff0e:	9901      	ldr	r1, [sp, #4]
 800ff10:	4652      	mov	r2, sl
 800ff12:	4630      	mov	r0, r6
 800ff14:	f001 fc3f 	bl	8011796 <strncmp>
 800ff18:	b980      	cbnz	r0, 800ff3c <__gethex+0xd0>
 800ff1a:	b94d      	cbnz	r5, 800ff30 <__gethex+0xc4>
 800ff1c:	eb06 050a 	add.w	r5, r6, sl
 800ff20:	462a      	mov	r2, r5
 800ff22:	4616      	mov	r6, r2
 800ff24:	3201      	adds	r2, #1
 800ff26:	7830      	ldrb	r0, [r6, #0]
 800ff28:	f7ff ff8b 	bl	800fe42 <__hexdig_fun>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d1f8      	bne.n	800ff22 <__gethex+0xb6>
 800ff30:	1bad      	subs	r5, r5, r6
 800ff32:	00ad      	lsls	r5, r5, #2
 800ff34:	e004      	b.n	800ff40 <__gethex+0xd4>
 800ff36:	2400      	movs	r4, #0
 800ff38:	4625      	mov	r5, r4
 800ff3a:	e7e0      	b.n	800fefe <__gethex+0x92>
 800ff3c:	2d00      	cmp	r5, #0
 800ff3e:	d1f7      	bne.n	800ff30 <__gethex+0xc4>
 800ff40:	7833      	ldrb	r3, [r6, #0]
 800ff42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ff46:	2b50      	cmp	r3, #80	; 0x50
 800ff48:	d13b      	bne.n	800ffc2 <__gethex+0x156>
 800ff4a:	7873      	ldrb	r3, [r6, #1]
 800ff4c:	2b2b      	cmp	r3, #43	; 0x2b
 800ff4e:	d02c      	beq.n	800ffaa <__gethex+0x13e>
 800ff50:	2b2d      	cmp	r3, #45	; 0x2d
 800ff52:	d02e      	beq.n	800ffb2 <__gethex+0x146>
 800ff54:	1c71      	adds	r1, r6, #1
 800ff56:	f04f 0900 	mov.w	r9, #0
 800ff5a:	7808      	ldrb	r0, [r1, #0]
 800ff5c:	f7ff ff71 	bl	800fe42 <__hexdig_fun>
 800ff60:	1e43      	subs	r3, r0, #1
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	2b18      	cmp	r3, #24
 800ff66:	d82c      	bhi.n	800ffc2 <__gethex+0x156>
 800ff68:	f1a0 0210 	sub.w	r2, r0, #16
 800ff6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ff70:	f7ff ff67 	bl	800fe42 <__hexdig_fun>
 800ff74:	1e43      	subs	r3, r0, #1
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	2b18      	cmp	r3, #24
 800ff7a:	d91d      	bls.n	800ffb8 <__gethex+0x14c>
 800ff7c:	f1b9 0f00 	cmp.w	r9, #0
 800ff80:	d000      	beq.n	800ff84 <__gethex+0x118>
 800ff82:	4252      	negs	r2, r2
 800ff84:	4415      	add	r5, r2
 800ff86:	f8cb 1000 	str.w	r1, [fp]
 800ff8a:	b1e4      	cbz	r4, 800ffc6 <__gethex+0x15a>
 800ff8c:	9b00      	ldr	r3, [sp, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	bf14      	ite	ne
 800ff92:	2700      	movne	r7, #0
 800ff94:	2706      	moveq	r7, #6
 800ff96:	4638      	mov	r0, r7
 800ff98:	b009      	add	sp, #36	; 0x24
 800ff9a:	ecbd 8b02 	vpop	{d8}
 800ff9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa2:	463e      	mov	r6, r7
 800ffa4:	4625      	mov	r5, r4
 800ffa6:	2401      	movs	r4, #1
 800ffa8:	e7ca      	b.n	800ff40 <__gethex+0xd4>
 800ffaa:	f04f 0900 	mov.w	r9, #0
 800ffae:	1cb1      	adds	r1, r6, #2
 800ffb0:	e7d3      	b.n	800ff5a <__gethex+0xee>
 800ffb2:	f04f 0901 	mov.w	r9, #1
 800ffb6:	e7fa      	b.n	800ffae <__gethex+0x142>
 800ffb8:	230a      	movs	r3, #10
 800ffba:	fb03 0202 	mla	r2, r3, r2, r0
 800ffbe:	3a10      	subs	r2, #16
 800ffc0:	e7d4      	b.n	800ff6c <__gethex+0x100>
 800ffc2:	4631      	mov	r1, r6
 800ffc4:	e7df      	b.n	800ff86 <__gethex+0x11a>
 800ffc6:	1bf3      	subs	r3, r6, r7
 800ffc8:	3b01      	subs	r3, #1
 800ffca:	4621      	mov	r1, r4
 800ffcc:	2b07      	cmp	r3, #7
 800ffce:	dc0b      	bgt.n	800ffe8 <__gethex+0x17c>
 800ffd0:	ee18 0a10 	vmov	r0, s16
 800ffd4:	f000 fa74 	bl	80104c0 <_Balloc>
 800ffd8:	4604      	mov	r4, r0
 800ffda:	b940      	cbnz	r0, 800ffee <__gethex+0x182>
 800ffdc:	4b5d      	ldr	r3, [pc, #372]	; (8010154 <__gethex+0x2e8>)
 800ffde:	4602      	mov	r2, r0
 800ffe0:	21de      	movs	r1, #222	; 0xde
 800ffe2:	485d      	ldr	r0, [pc, #372]	; (8010158 <__gethex+0x2ec>)
 800ffe4:	f7ff fdb6 	bl	800fb54 <__assert_func>
 800ffe8:	3101      	adds	r1, #1
 800ffea:	105b      	asrs	r3, r3, #1
 800ffec:	e7ee      	b.n	800ffcc <__gethex+0x160>
 800ffee:	f100 0914 	add.w	r9, r0, #20
 800fff2:	f04f 0b00 	mov.w	fp, #0
 800fff6:	f1ca 0301 	rsb	r3, sl, #1
 800fffa:	f8cd 9008 	str.w	r9, [sp, #8]
 800fffe:	f8cd b000 	str.w	fp, [sp]
 8010002:	9306      	str	r3, [sp, #24]
 8010004:	42b7      	cmp	r7, r6
 8010006:	d340      	bcc.n	801008a <__gethex+0x21e>
 8010008:	9802      	ldr	r0, [sp, #8]
 801000a:	9b00      	ldr	r3, [sp, #0]
 801000c:	f840 3b04 	str.w	r3, [r0], #4
 8010010:	eba0 0009 	sub.w	r0, r0, r9
 8010014:	1080      	asrs	r0, r0, #2
 8010016:	0146      	lsls	r6, r0, #5
 8010018:	6120      	str	r0, [r4, #16]
 801001a:	4618      	mov	r0, r3
 801001c:	f000 fb42 	bl	80106a4 <__hi0bits>
 8010020:	1a30      	subs	r0, r6, r0
 8010022:	f8d8 6000 	ldr.w	r6, [r8]
 8010026:	42b0      	cmp	r0, r6
 8010028:	dd63      	ble.n	80100f2 <__gethex+0x286>
 801002a:	1b87      	subs	r7, r0, r6
 801002c:	4639      	mov	r1, r7
 801002e:	4620      	mov	r0, r4
 8010030:	f000 fee3 	bl	8010dfa <__any_on>
 8010034:	4682      	mov	sl, r0
 8010036:	b1a8      	cbz	r0, 8010064 <__gethex+0x1f8>
 8010038:	1e7b      	subs	r3, r7, #1
 801003a:	1159      	asrs	r1, r3, #5
 801003c:	f003 021f 	and.w	r2, r3, #31
 8010040:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010044:	f04f 0a01 	mov.w	sl, #1
 8010048:	fa0a f202 	lsl.w	r2, sl, r2
 801004c:	420a      	tst	r2, r1
 801004e:	d009      	beq.n	8010064 <__gethex+0x1f8>
 8010050:	4553      	cmp	r3, sl
 8010052:	dd05      	ble.n	8010060 <__gethex+0x1f4>
 8010054:	1eb9      	subs	r1, r7, #2
 8010056:	4620      	mov	r0, r4
 8010058:	f000 fecf 	bl	8010dfa <__any_on>
 801005c:	2800      	cmp	r0, #0
 801005e:	d145      	bne.n	80100ec <__gethex+0x280>
 8010060:	f04f 0a02 	mov.w	sl, #2
 8010064:	4639      	mov	r1, r7
 8010066:	4620      	mov	r0, r4
 8010068:	f7ff fe99 	bl	800fd9e <rshift>
 801006c:	443d      	add	r5, r7
 801006e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010072:	42ab      	cmp	r3, r5
 8010074:	da4c      	bge.n	8010110 <__gethex+0x2a4>
 8010076:	ee18 0a10 	vmov	r0, s16
 801007a:	4621      	mov	r1, r4
 801007c:	f000 fa60 	bl	8010540 <_Bfree>
 8010080:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010082:	2300      	movs	r3, #0
 8010084:	6013      	str	r3, [r2, #0]
 8010086:	27a3      	movs	r7, #163	; 0xa3
 8010088:	e785      	b.n	800ff96 <__gethex+0x12a>
 801008a:	1e73      	subs	r3, r6, #1
 801008c:	9a05      	ldr	r2, [sp, #20]
 801008e:	9303      	str	r3, [sp, #12]
 8010090:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010094:	4293      	cmp	r3, r2
 8010096:	d019      	beq.n	80100cc <__gethex+0x260>
 8010098:	f1bb 0f20 	cmp.w	fp, #32
 801009c:	d107      	bne.n	80100ae <__gethex+0x242>
 801009e:	9b02      	ldr	r3, [sp, #8]
 80100a0:	9a00      	ldr	r2, [sp, #0]
 80100a2:	f843 2b04 	str.w	r2, [r3], #4
 80100a6:	9302      	str	r3, [sp, #8]
 80100a8:	2300      	movs	r3, #0
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	469b      	mov	fp, r3
 80100ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80100b2:	f7ff fec6 	bl	800fe42 <__hexdig_fun>
 80100b6:	9b00      	ldr	r3, [sp, #0]
 80100b8:	f000 000f 	and.w	r0, r0, #15
 80100bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80100c0:	4303      	orrs	r3, r0
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	f10b 0b04 	add.w	fp, fp, #4
 80100c8:	9b03      	ldr	r3, [sp, #12]
 80100ca:	e00d      	b.n	80100e8 <__gethex+0x27c>
 80100cc:	9b03      	ldr	r3, [sp, #12]
 80100ce:	9a06      	ldr	r2, [sp, #24]
 80100d0:	4413      	add	r3, r2
 80100d2:	42bb      	cmp	r3, r7
 80100d4:	d3e0      	bcc.n	8010098 <__gethex+0x22c>
 80100d6:	4618      	mov	r0, r3
 80100d8:	9901      	ldr	r1, [sp, #4]
 80100da:	9307      	str	r3, [sp, #28]
 80100dc:	4652      	mov	r2, sl
 80100de:	f001 fb5a 	bl	8011796 <strncmp>
 80100e2:	9b07      	ldr	r3, [sp, #28]
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d1d7      	bne.n	8010098 <__gethex+0x22c>
 80100e8:	461e      	mov	r6, r3
 80100ea:	e78b      	b.n	8010004 <__gethex+0x198>
 80100ec:	f04f 0a03 	mov.w	sl, #3
 80100f0:	e7b8      	b.n	8010064 <__gethex+0x1f8>
 80100f2:	da0a      	bge.n	801010a <__gethex+0x29e>
 80100f4:	1a37      	subs	r7, r6, r0
 80100f6:	4621      	mov	r1, r4
 80100f8:	ee18 0a10 	vmov	r0, s16
 80100fc:	463a      	mov	r2, r7
 80100fe:	f000 fc3b 	bl	8010978 <__lshift>
 8010102:	1bed      	subs	r5, r5, r7
 8010104:	4604      	mov	r4, r0
 8010106:	f100 0914 	add.w	r9, r0, #20
 801010a:	f04f 0a00 	mov.w	sl, #0
 801010e:	e7ae      	b.n	801006e <__gethex+0x202>
 8010110:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010114:	42a8      	cmp	r0, r5
 8010116:	dd72      	ble.n	80101fe <__gethex+0x392>
 8010118:	1b45      	subs	r5, r0, r5
 801011a:	42ae      	cmp	r6, r5
 801011c:	dc36      	bgt.n	801018c <__gethex+0x320>
 801011e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010122:	2b02      	cmp	r3, #2
 8010124:	d02a      	beq.n	801017c <__gethex+0x310>
 8010126:	2b03      	cmp	r3, #3
 8010128:	d02c      	beq.n	8010184 <__gethex+0x318>
 801012a:	2b01      	cmp	r3, #1
 801012c:	d11c      	bne.n	8010168 <__gethex+0x2fc>
 801012e:	42ae      	cmp	r6, r5
 8010130:	d11a      	bne.n	8010168 <__gethex+0x2fc>
 8010132:	2e01      	cmp	r6, #1
 8010134:	d112      	bne.n	801015c <__gethex+0x2f0>
 8010136:	9a04      	ldr	r2, [sp, #16]
 8010138:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801013c:	6013      	str	r3, [r2, #0]
 801013e:	2301      	movs	r3, #1
 8010140:	6123      	str	r3, [r4, #16]
 8010142:	f8c9 3000 	str.w	r3, [r9]
 8010146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010148:	2762      	movs	r7, #98	; 0x62
 801014a:	601c      	str	r4, [r3, #0]
 801014c:	e723      	b.n	800ff96 <__gethex+0x12a>
 801014e:	bf00      	nop
 8010150:	080121f0 	.word	0x080121f0
 8010154:	08012178 	.word	0x08012178
 8010158:	08012189 	.word	0x08012189
 801015c:	1e71      	subs	r1, r6, #1
 801015e:	4620      	mov	r0, r4
 8010160:	f000 fe4b 	bl	8010dfa <__any_on>
 8010164:	2800      	cmp	r0, #0
 8010166:	d1e6      	bne.n	8010136 <__gethex+0x2ca>
 8010168:	ee18 0a10 	vmov	r0, s16
 801016c:	4621      	mov	r1, r4
 801016e:	f000 f9e7 	bl	8010540 <_Bfree>
 8010172:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010174:	2300      	movs	r3, #0
 8010176:	6013      	str	r3, [r2, #0]
 8010178:	2750      	movs	r7, #80	; 0x50
 801017a:	e70c      	b.n	800ff96 <__gethex+0x12a>
 801017c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801017e:	2b00      	cmp	r3, #0
 8010180:	d1f2      	bne.n	8010168 <__gethex+0x2fc>
 8010182:	e7d8      	b.n	8010136 <__gethex+0x2ca>
 8010184:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010186:	2b00      	cmp	r3, #0
 8010188:	d1d5      	bne.n	8010136 <__gethex+0x2ca>
 801018a:	e7ed      	b.n	8010168 <__gethex+0x2fc>
 801018c:	1e6f      	subs	r7, r5, #1
 801018e:	f1ba 0f00 	cmp.w	sl, #0
 8010192:	d131      	bne.n	80101f8 <__gethex+0x38c>
 8010194:	b127      	cbz	r7, 80101a0 <__gethex+0x334>
 8010196:	4639      	mov	r1, r7
 8010198:	4620      	mov	r0, r4
 801019a:	f000 fe2e 	bl	8010dfa <__any_on>
 801019e:	4682      	mov	sl, r0
 80101a0:	117b      	asrs	r3, r7, #5
 80101a2:	2101      	movs	r1, #1
 80101a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80101a8:	f007 071f 	and.w	r7, r7, #31
 80101ac:	fa01 f707 	lsl.w	r7, r1, r7
 80101b0:	421f      	tst	r7, r3
 80101b2:	4629      	mov	r1, r5
 80101b4:	4620      	mov	r0, r4
 80101b6:	bf18      	it	ne
 80101b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80101bc:	1b76      	subs	r6, r6, r5
 80101be:	f7ff fdee 	bl	800fd9e <rshift>
 80101c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80101c6:	2702      	movs	r7, #2
 80101c8:	f1ba 0f00 	cmp.w	sl, #0
 80101cc:	d048      	beq.n	8010260 <__gethex+0x3f4>
 80101ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80101d2:	2b02      	cmp	r3, #2
 80101d4:	d015      	beq.n	8010202 <__gethex+0x396>
 80101d6:	2b03      	cmp	r3, #3
 80101d8:	d017      	beq.n	801020a <__gethex+0x39e>
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d109      	bne.n	80101f2 <__gethex+0x386>
 80101de:	f01a 0f02 	tst.w	sl, #2
 80101e2:	d006      	beq.n	80101f2 <__gethex+0x386>
 80101e4:	f8d9 0000 	ldr.w	r0, [r9]
 80101e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80101ec:	f01a 0f01 	tst.w	sl, #1
 80101f0:	d10e      	bne.n	8010210 <__gethex+0x3a4>
 80101f2:	f047 0710 	orr.w	r7, r7, #16
 80101f6:	e033      	b.n	8010260 <__gethex+0x3f4>
 80101f8:	f04f 0a01 	mov.w	sl, #1
 80101fc:	e7d0      	b.n	80101a0 <__gethex+0x334>
 80101fe:	2701      	movs	r7, #1
 8010200:	e7e2      	b.n	80101c8 <__gethex+0x35c>
 8010202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010204:	f1c3 0301 	rsb	r3, r3, #1
 8010208:	9315      	str	r3, [sp, #84]	; 0x54
 801020a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801020c:	2b00      	cmp	r3, #0
 801020e:	d0f0      	beq.n	80101f2 <__gethex+0x386>
 8010210:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010214:	f104 0314 	add.w	r3, r4, #20
 8010218:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801021c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010220:	f04f 0c00 	mov.w	ip, #0
 8010224:	4618      	mov	r0, r3
 8010226:	f853 2b04 	ldr.w	r2, [r3], #4
 801022a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801022e:	d01c      	beq.n	801026a <__gethex+0x3fe>
 8010230:	3201      	adds	r2, #1
 8010232:	6002      	str	r2, [r0, #0]
 8010234:	2f02      	cmp	r7, #2
 8010236:	f104 0314 	add.w	r3, r4, #20
 801023a:	d13f      	bne.n	80102bc <__gethex+0x450>
 801023c:	f8d8 2000 	ldr.w	r2, [r8]
 8010240:	3a01      	subs	r2, #1
 8010242:	42b2      	cmp	r2, r6
 8010244:	d10a      	bne.n	801025c <__gethex+0x3f0>
 8010246:	1171      	asrs	r1, r6, #5
 8010248:	2201      	movs	r2, #1
 801024a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801024e:	f006 061f 	and.w	r6, r6, #31
 8010252:	fa02 f606 	lsl.w	r6, r2, r6
 8010256:	421e      	tst	r6, r3
 8010258:	bf18      	it	ne
 801025a:	4617      	movne	r7, r2
 801025c:	f047 0720 	orr.w	r7, r7, #32
 8010260:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010262:	601c      	str	r4, [r3, #0]
 8010264:	9b04      	ldr	r3, [sp, #16]
 8010266:	601d      	str	r5, [r3, #0]
 8010268:	e695      	b.n	800ff96 <__gethex+0x12a>
 801026a:	4299      	cmp	r1, r3
 801026c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010270:	d8d8      	bhi.n	8010224 <__gethex+0x3b8>
 8010272:	68a3      	ldr	r3, [r4, #8]
 8010274:	459b      	cmp	fp, r3
 8010276:	db19      	blt.n	80102ac <__gethex+0x440>
 8010278:	6861      	ldr	r1, [r4, #4]
 801027a:	ee18 0a10 	vmov	r0, s16
 801027e:	3101      	adds	r1, #1
 8010280:	f000 f91e 	bl	80104c0 <_Balloc>
 8010284:	4681      	mov	r9, r0
 8010286:	b918      	cbnz	r0, 8010290 <__gethex+0x424>
 8010288:	4b1a      	ldr	r3, [pc, #104]	; (80102f4 <__gethex+0x488>)
 801028a:	4602      	mov	r2, r0
 801028c:	2184      	movs	r1, #132	; 0x84
 801028e:	e6a8      	b.n	800ffe2 <__gethex+0x176>
 8010290:	6922      	ldr	r2, [r4, #16]
 8010292:	3202      	adds	r2, #2
 8010294:	f104 010c 	add.w	r1, r4, #12
 8010298:	0092      	lsls	r2, r2, #2
 801029a:	300c      	adds	r0, #12
 801029c:	f7fe fca2 	bl	800ebe4 <memcpy>
 80102a0:	4621      	mov	r1, r4
 80102a2:	ee18 0a10 	vmov	r0, s16
 80102a6:	f000 f94b 	bl	8010540 <_Bfree>
 80102aa:	464c      	mov	r4, r9
 80102ac:	6923      	ldr	r3, [r4, #16]
 80102ae:	1c5a      	adds	r2, r3, #1
 80102b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80102b4:	6122      	str	r2, [r4, #16]
 80102b6:	2201      	movs	r2, #1
 80102b8:	615a      	str	r2, [r3, #20]
 80102ba:	e7bb      	b.n	8010234 <__gethex+0x3c8>
 80102bc:	6922      	ldr	r2, [r4, #16]
 80102be:	455a      	cmp	r2, fp
 80102c0:	dd0b      	ble.n	80102da <__gethex+0x46e>
 80102c2:	2101      	movs	r1, #1
 80102c4:	4620      	mov	r0, r4
 80102c6:	f7ff fd6a 	bl	800fd9e <rshift>
 80102ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80102ce:	3501      	adds	r5, #1
 80102d0:	42ab      	cmp	r3, r5
 80102d2:	f6ff aed0 	blt.w	8010076 <__gethex+0x20a>
 80102d6:	2701      	movs	r7, #1
 80102d8:	e7c0      	b.n	801025c <__gethex+0x3f0>
 80102da:	f016 061f 	ands.w	r6, r6, #31
 80102de:	d0fa      	beq.n	80102d6 <__gethex+0x46a>
 80102e0:	4453      	add	r3, sl
 80102e2:	f1c6 0620 	rsb	r6, r6, #32
 80102e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80102ea:	f000 f9db 	bl	80106a4 <__hi0bits>
 80102ee:	42b0      	cmp	r0, r6
 80102f0:	dbe7      	blt.n	80102c2 <__gethex+0x456>
 80102f2:	e7f0      	b.n	80102d6 <__gethex+0x46a>
 80102f4:	08012178 	.word	0x08012178

080102f8 <L_shift>:
 80102f8:	f1c2 0208 	rsb	r2, r2, #8
 80102fc:	0092      	lsls	r2, r2, #2
 80102fe:	b570      	push	{r4, r5, r6, lr}
 8010300:	f1c2 0620 	rsb	r6, r2, #32
 8010304:	6843      	ldr	r3, [r0, #4]
 8010306:	6804      	ldr	r4, [r0, #0]
 8010308:	fa03 f506 	lsl.w	r5, r3, r6
 801030c:	432c      	orrs	r4, r5
 801030e:	40d3      	lsrs	r3, r2
 8010310:	6004      	str	r4, [r0, #0]
 8010312:	f840 3f04 	str.w	r3, [r0, #4]!
 8010316:	4288      	cmp	r0, r1
 8010318:	d3f4      	bcc.n	8010304 <L_shift+0xc>
 801031a:	bd70      	pop	{r4, r5, r6, pc}

0801031c <__match>:
 801031c:	b530      	push	{r4, r5, lr}
 801031e:	6803      	ldr	r3, [r0, #0]
 8010320:	3301      	adds	r3, #1
 8010322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010326:	b914      	cbnz	r4, 801032e <__match+0x12>
 8010328:	6003      	str	r3, [r0, #0]
 801032a:	2001      	movs	r0, #1
 801032c:	bd30      	pop	{r4, r5, pc}
 801032e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010332:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010336:	2d19      	cmp	r5, #25
 8010338:	bf98      	it	ls
 801033a:	3220      	addls	r2, #32
 801033c:	42a2      	cmp	r2, r4
 801033e:	d0f0      	beq.n	8010322 <__match+0x6>
 8010340:	2000      	movs	r0, #0
 8010342:	e7f3      	b.n	801032c <__match+0x10>

08010344 <__hexnan>:
 8010344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010348:	680b      	ldr	r3, [r1, #0]
 801034a:	115e      	asrs	r6, r3, #5
 801034c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010350:	f013 031f 	ands.w	r3, r3, #31
 8010354:	b087      	sub	sp, #28
 8010356:	bf18      	it	ne
 8010358:	3604      	addne	r6, #4
 801035a:	2500      	movs	r5, #0
 801035c:	1f37      	subs	r7, r6, #4
 801035e:	4690      	mov	r8, r2
 8010360:	6802      	ldr	r2, [r0, #0]
 8010362:	9301      	str	r3, [sp, #4]
 8010364:	4682      	mov	sl, r0
 8010366:	f846 5c04 	str.w	r5, [r6, #-4]
 801036a:	46b9      	mov	r9, r7
 801036c:	463c      	mov	r4, r7
 801036e:	9502      	str	r5, [sp, #8]
 8010370:	46ab      	mov	fp, r5
 8010372:	7851      	ldrb	r1, [r2, #1]
 8010374:	1c53      	adds	r3, r2, #1
 8010376:	9303      	str	r3, [sp, #12]
 8010378:	b341      	cbz	r1, 80103cc <__hexnan+0x88>
 801037a:	4608      	mov	r0, r1
 801037c:	9205      	str	r2, [sp, #20]
 801037e:	9104      	str	r1, [sp, #16]
 8010380:	f7ff fd5f 	bl	800fe42 <__hexdig_fun>
 8010384:	2800      	cmp	r0, #0
 8010386:	d14f      	bne.n	8010428 <__hexnan+0xe4>
 8010388:	9904      	ldr	r1, [sp, #16]
 801038a:	9a05      	ldr	r2, [sp, #20]
 801038c:	2920      	cmp	r1, #32
 801038e:	d818      	bhi.n	80103c2 <__hexnan+0x7e>
 8010390:	9b02      	ldr	r3, [sp, #8]
 8010392:	459b      	cmp	fp, r3
 8010394:	dd13      	ble.n	80103be <__hexnan+0x7a>
 8010396:	454c      	cmp	r4, r9
 8010398:	d206      	bcs.n	80103a8 <__hexnan+0x64>
 801039a:	2d07      	cmp	r5, #7
 801039c:	dc04      	bgt.n	80103a8 <__hexnan+0x64>
 801039e:	462a      	mov	r2, r5
 80103a0:	4649      	mov	r1, r9
 80103a2:	4620      	mov	r0, r4
 80103a4:	f7ff ffa8 	bl	80102f8 <L_shift>
 80103a8:	4544      	cmp	r4, r8
 80103aa:	d950      	bls.n	801044e <__hexnan+0x10a>
 80103ac:	2300      	movs	r3, #0
 80103ae:	f1a4 0904 	sub.w	r9, r4, #4
 80103b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80103b6:	f8cd b008 	str.w	fp, [sp, #8]
 80103ba:	464c      	mov	r4, r9
 80103bc:	461d      	mov	r5, r3
 80103be:	9a03      	ldr	r2, [sp, #12]
 80103c0:	e7d7      	b.n	8010372 <__hexnan+0x2e>
 80103c2:	2929      	cmp	r1, #41	; 0x29
 80103c4:	d156      	bne.n	8010474 <__hexnan+0x130>
 80103c6:	3202      	adds	r2, #2
 80103c8:	f8ca 2000 	str.w	r2, [sl]
 80103cc:	f1bb 0f00 	cmp.w	fp, #0
 80103d0:	d050      	beq.n	8010474 <__hexnan+0x130>
 80103d2:	454c      	cmp	r4, r9
 80103d4:	d206      	bcs.n	80103e4 <__hexnan+0xa0>
 80103d6:	2d07      	cmp	r5, #7
 80103d8:	dc04      	bgt.n	80103e4 <__hexnan+0xa0>
 80103da:	462a      	mov	r2, r5
 80103dc:	4649      	mov	r1, r9
 80103de:	4620      	mov	r0, r4
 80103e0:	f7ff ff8a 	bl	80102f8 <L_shift>
 80103e4:	4544      	cmp	r4, r8
 80103e6:	d934      	bls.n	8010452 <__hexnan+0x10e>
 80103e8:	f1a8 0204 	sub.w	r2, r8, #4
 80103ec:	4623      	mov	r3, r4
 80103ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80103f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80103f6:	429f      	cmp	r7, r3
 80103f8:	d2f9      	bcs.n	80103ee <__hexnan+0xaa>
 80103fa:	1b3b      	subs	r3, r7, r4
 80103fc:	f023 0303 	bic.w	r3, r3, #3
 8010400:	3304      	adds	r3, #4
 8010402:	3401      	adds	r4, #1
 8010404:	3e03      	subs	r6, #3
 8010406:	42b4      	cmp	r4, r6
 8010408:	bf88      	it	hi
 801040a:	2304      	movhi	r3, #4
 801040c:	4443      	add	r3, r8
 801040e:	2200      	movs	r2, #0
 8010410:	f843 2b04 	str.w	r2, [r3], #4
 8010414:	429f      	cmp	r7, r3
 8010416:	d2fb      	bcs.n	8010410 <__hexnan+0xcc>
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	b91b      	cbnz	r3, 8010424 <__hexnan+0xe0>
 801041c:	4547      	cmp	r7, r8
 801041e:	d127      	bne.n	8010470 <__hexnan+0x12c>
 8010420:	2301      	movs	r3, #1
 8010422:	603b      	str	r3, [r7, #0]
 8010424:	2005      	movs	r0, #5
 8010426:	e026      	b.n	8010476 <__hexnan+0x132>
 8010428:	3501      	adds	r5, #1
 801042a:	2d08      	cmp	r5, #8
 801042c:	f10b 0b01 	add.w	fp, fp, #1
 8010430:	dd06      	ble.n	8010440 <__hexnan+0xfc>
 8010432:	4544      	cmp	r4, r8
 8010434:	d9c3      	bls.n	80103be <__hexnan+0x7a>
 8010436:	2300      	movs	r3, #0
 8010438:	f844 3c04 	str.w	r3, [r4, #-4]
 801043c:	2501      	movs	r5, #1
 801043e:	3c04      	subs	r4, #4
 8010440:	6822      	ldr	r2, [r4, #0]
 8010442:	f000 000f 	and.w	r0, r0, #15
 8010446:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801044a:	6022      	str	r2, [r4, #0]
 801044c:	e7b7      	b.n	80103be <__hexnan+0x7a>
 801044e:	2508      	movs	r5, #8
 8010450:	e7b5      	b.n	80103be <__hexnan+0x7a>
 8010452:	9b01      	ldr	r3, [sp, #4]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d0df      	beq.n	8010418 <__hexnan+0xd4>
 8010458:	f04f 32ff 	mov.w	r2, #4294967295
 801045c:	f1c3 0320 	rsb	r3, r3, #32
 8010460:	fa22 f303 	lsr.w	r3, r2, r3
 8010464:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010468:	401a      	ands	r2, r3
 801046a:	f846 2c04 	str.w	r2, [r6, #-4]
 801046e:	e7d3      	b.n	8010418 <__hexnan+0xd4>
 8010470:	3f04      	subs	r7, #4
 8010472:	e7d1      	b.n	8010418 <__hexnan+0xd4>
 8010474:	2004      	movs	r0, #4
 8010476:	b007      	add	sp, #28
 8010478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801047c <__retarget_lock_init_recursive>:
 801047c:	4770      	bx	lr

0801047e <__retarget_lock_acquire_recursive>:
 801047e:	4770      	bx	lr

08010480 <__retarget_lock_release_recursive>:
 8010480:	4770      	bx	lr

08010482 <__ascii_mbtowc>:
 8010482:	b082      	sub	sp, #8
 8010484:	b901      	cbnz	r1, 8010488 <__ascii_mbtowc+0x6>
 8010486:	a901      	add	r1, sp, #4
 8010488:	b142      	cbz	r2, 801049c <__ascii_mbtowc+0x1a>
 801048a:	b14b      	cbz	r3, 80104a0 <__ascii_mbtowc+0x1e>
 801048c:	7813      	ldrb	r3, [r2, #0]
 801048e:	600b      	str	r3, [r1, #0]
 8010490:	7812      	ldrb	r2, [r2, #0]
 8010492:	1e10      	subs	r0, r2, #0
 8010494:	bf18      	it	ne
 8010496:	2001      	movne	r0, #1
 8010498:	b002      	add	sp, #8
 801049a:	4770      	bx	lr
 801049c:	4610      	mov	r0, r2
 801049e:	e7fb      	b.n	8010498 <__ascii_mbtowc+0x16>
 80104a0:	f06f 0001 	mvn.w	r0, #1
 80104a4:	e7f8      	b.n	8010498 <__ascii_mbtowc+0x16>
	...

080104a8 <__malloc_lock>:
 80104a8:	4801      	ldr	r0, [pc, #4]	; (80104b0 <__malloc_lock+0x8>)
 80104aa:	f7ff bfe8 	b.w	801047e <__retarget_lock_acquire_recursive>
 80104ae:	bf00      	nop
 80104b0:	24006574 	.word	0x24006574

080104b4 <__malloc_unlock>:
 80104b4:	4801      	ldr	r0, [pc, #4]	; (80104bc <__malloc_unlock+0x8>)
 80104b6:	f7ff bfe3 	b.w	8010480 <__retarget_lock_release_recursive>
 80104ba:	bf00      	nop
 80104bc:	24006574 	.word	0x24006574

080104c0 <_Balloc>:
 80104c0:	b570      	push	{r4, r5, r6, lr}
 80104c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104c4:	4604      	mov	r4, r0
 80104c6:	460d      	mov	r5, r1
 80104c8:	b976      	cbnz	r6, 80104e8 <_Balloc+0x28>
 80104ca:	2010      	movs	r0, #16
 80104cc:	f7fe fb7a 	bl	800ebc4 <malloc>
 80104d0:	4602      	mov	r2, r0
 80104d2:	6260      	str	r0, [r4, #36]	; 0x24
 80104d4:	b920      	cbnz	r0, 80104e0 <_Balloc+0x20>
 80104d6:	4b18      	ldr	r3, [pc, #96]	; (8010538 <_Balloc+0x78>)
 80104d8:	4818      	ldr	r0, [pc, #96]	; (801053c <_Balloc+0x7c>)
 80104da:	2166      	movs	r1, #102	; 0x66
 80104dc:	f7ff fb3a 	bl	800fb54 <__assert_func>
 80104e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104e4:	6006      	str	r6, [r0, #0]
 80104e6:	60c6      	str	r6, [r0, #12]
 80104e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104ea:	68f3      	ldr	r3, [r6, #12]
 80104ec:	b183      	cbz	r3, 8010510 <_Balloc+0x50>
 80104ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104f6:	b9b8      	cbnz	r0, 8010528 <_Balloc+0x68>
 80104f8:	2101      	movs	r1, #1
 80104fa:	fa01 f605 	lsl.w	r6, r1, r5
 80104fe:	1d72      	adds	r2, r6, #5
 8010500:	0092      	lsls	r2, r2, #2
 8010502:	4620      	mov	r0, r4
 8010504:	f000 fc9a 	bl	8010e3c <_calloc_r>
 8010508:	b160      	cbz	r0, 8010524 <_Balloc+0x64>
 801050a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801050e:	e00e      	b.n	801052e <_Balloc+0x6e>
 8010510:	2221      	movs	r2, #33	; 0x21
 8010512:	2104      	movs	r1, #4
 8010514:	4620      	mov	r0, r4
 8010516:	f000 fc91 	bl	8010e3c <_calloc_r>
 801051a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801051c:	60f0      	str	r0, [r6, #12]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d1e4      	bne.n	80104ee <_Balloc+0x2e>
 8010524:	2000      	movs	r0, #0
 8010526:	bd70      	pop	{r4, r5, r6, pc}
 8010528:	6802      	ldr	r2, [r0, #0]
 801052a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801052e:	2300      	movs	r3, #0
 8010530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010534:	e7f7      	b.n	8010526 <_Balloc+0x66>
 8010536:	bf00      	nop
 8010538:	08012068 	.word	0x08012068
 801053c:	08012204 	.word	0x08012204

08010540 <_Bfree>:
 8010540:	b570      	push	{r4, r5, r6, lr}
 8010542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010544:	4605      	mov	r5, r0
 8010546:	460c      	mov	r4, r1
 8010548:	b976      	cbnz	r6, 8010568 <_Bfree+0x28>
 801054a:	2010      	movs	r0, #16
 801054c:	f7fe fb3a 	bl	800ebc4 <malloc>
 8010550:	4602      	mov	r2, r0
 8010552:	6268      	str	r0, [r5, #36]	; 0x24
 8010554:	b920      	cbnz	r0, 8010560 <_Bfree+0x20>
 8010556:	4b09      	ldr	r3, [pc, #36]	; (801057c <_Bfree+0x3c>)
 8010558:	4809      	ldr	r0, [pc, #36]	; (8010580 <_Bfree+0x40>)
 801055a:	218a      	movs	r1, #138	; 0x8a
 801055c:	f7ff fafa 	bl	800fb54 <__assert_func>
 8010560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010564:	6006      	str	r6, [r0, #0]
 8010566:	60c6      	str	r6, [r0, #12]
 8010568:	b13c      	cbz	r4, 801057a <_Bfree+0x3a>
 801056a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801056c:	6862      	ldr	r2, [r4, #4]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010574:	6021      	str	r1, [r4, #0]
 8010576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801057a:	bd70      	pop	{r4, r5, r6, pc}
 801057c:	08012068 	.word	0x08012068
 8010580:	08012204 	.word	0x08012204

08010584 <__multadd>:
 8010584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010588:	690d      	ldr	r5, [r1, #16]
 801058a:	4607      	mov	r7, r0
 801058c:	460c      	mov	r4, r1
 801058e:	461e      	mov	r6, r3
 8010590:	f101 0c14 	add.w	ip, r1, #20
 8010594:	2000      	movs	r0, #0
 8010596:	f8dc 3000 	ldr.w	r3, [ip]
 801059a:	b299      	uxth	r1, r3
 801059c:	fb02 6101 	mla	r1, r2, r1, r6
 80105a0:	0c1e      	lsrs	r6, r3, #16
 80105a2:	0c0b      	lsrs	r3, r1, #16
 80105a4:	fb02 3306 	mla	r3, r2, r6, r3
 80105a8:	b289      	uxth	r1, r1
 80105aa:	3001      	adds	r0, #1
 80105ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80105b0:	4285      	cmp	r5, r0
 80105b2:	f84c 1b04 	str.w	r1, [ip], #4
 80105b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80105ba:	dcec      	bgt.n	8010596 <__multadd+0x12>
 80105bc:	b30e      	cbz	r6, 8010602 <__multadd+0x7e>
 80105be:	68a3      	ldr	r3, [r4, #8]
 80105c0:	42ab      	cmp	r3, r5
 80105c2:	dc19      	bgt.n	80105f8 <__multadd+0x74>
 80105c4:	6861      	ldr	r1, [r4, #4]
 80105c6:	4638      	mov	r0, r7
 80105c8:	3101      	adds	r1, #1
 80105ca:	f7ff ff79 	bl	80104c0 <_Balloc>
 80105ce:	4680      	mov	r8, r0
 80105d0:	b928      	cbnz	r0, 80105de <__multadd+0x5a>
 80105d2:	4602      	mov	r2, r0
 80105d4:	4b0c      	ldr	r3, [pc, #48]	; (8010608 <__multadd+0x84>)
 80105d6:	480d      	ldr	r0, [pc, #52]	; (801060c <__multadd+0x88>)
 80105d8:	21b5      	movs	r1, #181	; 0xb5
 80105da:	f7ff fabb 	bl	800fb54 <__assert_func>
 80105de:	6922      	ldr	r2, [r4, #16]
 80105e0:	3202      	adds	r2, #2
 80105e2:	f104 010c 	add.w	r1, r4, #12
 80105e6:	0092      	lsls	r2, r2, #2
 80105e8:	300c      	adds	r0, #12
 80105ea:	f7fe fafb 	bl	800ebe4 <memcpy>
 80105ee:	4621      	mov	r1, r4
 80105f0:	4638      	mov	r0, r7
 80105f2:	f7ff ffa5 	bl	8010540 <_Bfree>
 80105f6:	4644      	mov	r4, r8
 80105f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105fc:	3501      	adds	r5, #1
 80105fe:	615e      	str	r6, [r3, #20]
 8010600:	6125      	str	r5, [r4, #16]
 8010602:	4620      	mov	r0, r4
 8010604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010608:	08012178 	.word	0x08012178
 801060c:	08012204 	.word	0x08012204

08010610 <__s2b>:
 8010610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010614:	460c      	mov	r4, r1
 8010616:	4615      	mov	r5, r2
 8010618:	461f      	mov	r7, r3
 801061a:	2209      	movs	r2, #9
 801061c:	3308      	adds	r3, #8
 801061e:	4606      	mov	r6, r0
 8010620:	fb93 f3f2 	sdiv	r3, r3, r2
 8010624:	2100      	movs	r1, #0
 8010626:	2201      	movs	r2, #1
 8010628:	429a      	cmp	r2, r3
 801062a:	db09      	blt.n	8010640 <__s2b+0x30>
 801062c:	4630      	mov	r0, r6
 801062e:	f7ff ff47 	bl	80104c0 <_Balloc>
 8010632:	b940      	cbnz	r0, 8010646 <__s2b+0x36>
 8010634:	4602      	mov	r2, r0
 8010636:	4b19      	ldr	r3, [pc, #100]	; (801069c <__s2b+0x8c>)
 8010638:	4819      	ldr	r0, [pc, #100]	; (80106a0 <__s2b+0x90>)
 801063a:	21ce      	movs	r1, #206	; 0xce
 801063c:	f7ff fa8a 	bl	800fb54 <__assert_func>
 8010640:	0052      	lsls	r2, r2, #1
 8010642:	3101      	adds	r1, #1
 8010644:	e7f0      	b.n	8010628 <__s2b+0x18>
 8010646:	9b08      	ldr	r3, [sp, #32]
 8010648:	6143      	str	r3, [r0, #20]
 801064a:	2d09      	cmp	r5, #9
 801064c:	f04f 0301 	mov.w	r3, #1
 8010650:	6103      	str	r3, [r0, #16]
 8010652:	dd16      	ble.n	8010682 <__s2b+0x72>
 8010654:	f104 0909 	add.w	r9, r4, #9
 8010658:	46c8      	mov	r8, r9
 801065a:	442c      	add	r4, r5
 801065c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010660:	4601      	mov	r1, r0
 8010662:	3b30      	subs	r3, #48	; 0x30
 8010664:	220a      	movs	r2, #10
 8010666:	4630      	mov	r0, r6
 8010668:	f7ff ff8c 	bl	8010584 <__multadd>
 801066c:	45a0      	cmp	r8, r4
 801066e:	d1f5      	bne.n	801065c <__s2b+0x4c>
 8010670:	f1a5 0408 	sub.w	r4, r5, #8
 8010674:	444c      	add	r4, r9
 8010676:	1b2d      	subs	r5, r5, r4
 8010678:	1963      	adds	r3, r4, r5
 801067a:	42bb      	cmp	r3, r7
 801067c:	db04      	blt.n	8010688 <__s2b+0x78>
 801067e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010682:	340a      	adds	r4, #10
 8010684:	2509      	movs	r5, #9
 8010686:	e7f6      	b.n	8010676 <__s2b+0x66>
 8010688:	f814 3b01 	ldrb.w	r3, [r4], #1
 801068c:	4601      	mov	r1, r0
 801068e:	3b30      	subs	r3, #48	; 0x30
 8010690:	220a      	movs	r2, #10
 8010692:	4630      	mov	r0, r6
 8010694:	f7ff ff76 	bl	8010584 <__multadd>
 8010698:	e7ee      	b.n	8010678 <__s2b+0x68>
 801069a:	bf00      	nop
 801069c:	08012178 	.word	0x08012178
 80106a0:	08012204 	.word	0x08012204

080106a4 <__hi0bits>:
 80106a4:	0c03      	lsrs	r3, r0, #16
 80106a6:	041b      	lsls	r3, r3, #16
 80106a8:	b9d3      	cbnz	r3, 80106e0 <__hi0bits+0x3c>
 80106aa:	0400      	lsls	r0, r0, #16
 80106ac:	2310      	movs	r3, #16
 80106ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80106b2:	bf04      	itt	eq
 80106b4:	0200      	lsleq	r0, r0, #8
 80106b6:	3308      	addeq	r3, #8
 80106b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80106bc:	bf04      	itt	eq
 80106be:	0100      	lsleq	r0, r0, #4
 80106c0:	3304      	addeq	r3, #4
 80106c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80106c6:	bf04      	itt	eq
 80106c8:	0080      	lsleq	r0, r0, #2
 80106ca:	3302      	addeq	r3, #2
 80106cc:	2800      	cmp	r0, #0
 80106ce:	db05      	blt.n	80106dc <__hi0bits+0x38>
 80106d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80106d4:	f103 0301 	add.w	r3, r3, #1
 80106d8:	bf08      	it	eq
 80106da:	2320      	moveq	r3, #32
 80106dc:	4618      	mov	r0, r3
 80106de:	4770      	bx	lr
 80106e0:	2300      	movs	r3, #0
 80106e2:	e7e4      	b.n	80106ae <__hi0bits+0xa>

080106e4 <__lo0bits>:
 80106e4:	6803      	ldr	r3, [r0, #0]
 80106e6:	f013 0207 	ands.w	r2, r3, #7
 80106ea:	4601      	mov	r1, r0
 80106ec:	d00b      	beq.n	8010706 <__lo0bits+0x22>
 80106ee:	07da      	lsls	r2, r3, #31
 80106f0:	d423      	bmi.n	801073a <__lo0bits+0x56>
 80106f2:	0798      	lsls	r0, r3, #30
 80106f4:	bf49      	itett	mi
 80106f6:	085b      	lsrmi	r3, r3, #1
 80106f8:	089b      	lsrpl	r3, r3, #2
 80106fa:	2001      	movmi	r0, #1
 80106fc:	600b      	strmi	r3, [r1, #0]
 80106fe:	bf5c      	itt	pl
 8010700:	600b      	strpl	r3, [r1, #0]
 8010702:	2002      	movpl	r0, #2
 8010704:	4770      	bx	lr
 8010706:	b298      	uxth	r0, r3
 8010708:	b9a8      	cbnz	r0, 8010736 <__lo0bits+0x52>
 801070a:	0c1b      	lsrs	r3, r3, #16
 801070c:	2010      	movs	r0, #16
 801070e:	b2da      	uxtb	r2, r3
 8010710:	b90a      	cbnz	r2, 8010716 <__lo0bits+0x32>
 8010712:	3008      	adds	r0, #8
 8010714:	0a1b      	lsrs	r3, r3, #8
 8010716:	071a      	lsls	r2, r3, #28
 8010718:	bf04      	itt	eq
 801071a:	091b      	lsreq	r3, r3, #4
 801071c:	3004      	addeq	r0, #4
 801071e:	079a      	lsls	r2, r3, #30
 8010720:	bf04      	itt	eq
 8010722:	089b      	lsreq	r3, r3, #2
 8010724:	3002      	addeq	r0, #2
 8010726:	07da      	lsls	r2, r3, #31
 8010728:	d403      	bmi.n	8010732 <__lo0bits+0x4e>
 801072a:	085b      	lsrs	r3, r3, #1
 801072c:	f100 0001 	add.w	r0, r0, #1
 8010730:	d005      	beq.n	801073e <__lo0bits+0x5a>
 8010732:	600b      	str	r3, [r1, #0]
 8010734:	4770      	bx	lr
 8010736:	4610      	mov	r0, r2
 8010738:	e7e9      	b.n	801070e <__lo0bits+0x2a>
 801073a:	2000      	movs	r0, #0
 801073c:	4770      	bx	lr
 801073e:	2020      	movs	r0, #32
 8010740:	4770      	bx	lr
	...

08010744 <__i2b>:
 8010744:	b510      	push	{r4, lr}
 8010746:	460c      	mov	r4, r1
 8010748:	2101      	movs	r1, #1
 801074a:	f7ff feb9 	bl	80104c0 <_Balloc>
 801074e:	4602      	mov	r2, r0
 8010750:	b928      	cbnz	r0, 801075e <__i2b+0x1a>
 8010752:	4b05      	ldr	r3, [pc, #20]	; (8010768 <__i2b+0x24>)
 8010754:	4805      	ldr	r0, [pc, #20]	; (801076c <__i2b+0x28>)
 8010756:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801075a:	f7ff f9fb 	bl	800fb54 <__assert_func>
 801075e:	2301      	movs	r3, #1
 8010760:	6144      	str	r4, [r0, #20]
 8010762:	6103      	str	r3, [r0, #16]
 8010764:	bd10      	pop	{r4, pc}
 8010766:	bf00      	nop
 8010768:	08012178 	.word	0x08012178
 801076c:	08012204 	.word	0x08012204

08010770 <__multiply>:
 8010770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010774:	4691      	mov	r9, r2
 8010776:	690a      	ldr	r2, [r1, #16]
 8010778:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801077c:	429a      	cmp	r2, r3
 801077e:	bfb8      	it	lt
 8010780:	460b      	movlt	r3, r1
 8010782:	460c      	mov	r4, r1
 8010784:	bfbc      	itt	lt
 8010786:	464c      	movlt	r4, r9
 8010788:	4699      	movlt	r9, r3
 801078a:	6927      	ldr	r7, [r4, #16]
 801078c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010790:	68a3      	ldr	r3, [r4, #8]
 8010792:	6861      	ldr	r1, [r4, #4]
 8010794:	eb07 060a 	add.w	r6, r7, sl
 8010798:	42b3      	cmp	r3, r6
 801079a:	b085      	sub	sp, #20
 801079c:	bfb8      	it	lt
 801079e:	3101      	addlt	r1, #1
 80107a0:	f7ff fe8e 	bl	80104c0 <_Balloc>
 80107a4:	b930      	cbnz	r0, 80107b4 <__multiply+0x44>
 80107a6:	4602      	mov	r2, r0
 80107a8:	4b44      	ldr	r3, [pc, #272]	; (80108bc <__multiply+0x14c>)
 80107aa:	4845      	ldr	r0, [pc, #276]	; (80108c0 <__multiply+0x150>)
 80107ac:	f240 115d 	movw	r1, #349	; 0x15d
 80107b0:	f7ff f9d0 	bl	800fb54 <__assert_func>
 80107b4:	f100 0514 	add.w	r5, r0, #20
 80107b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80107bc:	462b      	mov	r3, r5
 80107be:	2200      	movs	r2, #0
 80107c0:	4543      	cmp	r3, r8
 80107c2:	d321      	bcc.n	8010808 <__multiply+0x98>
 80107c4:	f104 0314 	add.w	r3, r4, #20
 80107c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80107cc:	f109 0314 	add.w	r3, r9, #20
 80107d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80107d4:	9202      	str	r2, [sp, #8]
 80107d6:	1b3a      	subs	r2, r7, r4
 80107d8:	3a15      	subs	r2, #21
 80107da:	f022 0203 	bic.w	r2, r2, #3
 80107de:	3204      	adds	r2, #4
 80107e0:	f104 0115 	add.w	r1, r4, #21
 80107e4:	428f      	cmp	r7, r1
 80107e6:	bf38      	it	cc
 80107e8:	2204      	movcc	r2, #4
 80107ea:	9201      	str	r2, [sp, #4]
 80107ec:	9a02      	ldr	r2, [sp, #8]
 80107ee:	9303      	str	r3, [sp, #12]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d80c      	bhi.n	801080e <__multiply+0x9e>
 80107f4:	2e00      	cmp	r6, #0
 80107f6:	dd03      	ble.n	8010800 <__multiply+0x90>
 80107f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d05a      	beq.n	80108b6 <__multiply+0x146>
 8010800:	6106      	str	r6, [r0, #16]
 8010802:	b005      	add	sp, #20
 8010804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010808:	f843 2b04 	str.w	r2, [r3], #4
 801080c:	e7d8      	b.n	80107c0 <__multiply+0x50>
 801080e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010812:	f1ba 0f00 	cmp.w	sl, #0
 8010816:	d024      	beq.n	8010862 <__multiply+0xf2>
 8010818:	f104 0e14 	add.w	lr, r4, #20
 801081c:	46a9      	mov	r9, r5
 801081e:	f04f 0c00 	mov.w	ip, #0
 8010822:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010826:	f8d9 1000 	ldr.w	r1, [r9]
 801082a:	fa1f fb82 	uxth.w	fp, r2
 801082e:	b289      	uxth	r1, r1
 8010830:	fb0a 110b 	mla	r1, sl, fp, r1
 8010834:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010838:	f8d9 2000 	ldr.w	r2, [r9]
 801083c:	4461      	add	r1, ip
 801083e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010842:	fb0a c20b 	mla	r2, sl, fp, ip
 8010846:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801084a:	b289      	uxth	r1, r1
 801084c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010850:	4577      	cmp	r7, lr
 8010852:	f849 1b04 	str.w	r1, [r9], #4
 8010856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801085a:	d8e2      	bhi.n	8010822 <__multiply+0xb2>
 801085c:	9a01      	ldr	r2, [sp, #4]
 801085e:	f845 c002 	str.w	ip, [r5, r2]
 8010862:	9a03      	ldr	r2, [sp, #12]
 8010864:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010868:	3304      	adds	r3, #4
 801086a:	f1b9 0f00 	cmp.w	r9, #0
 801086e:	d020      	beq.n	80108b2 <__multiply+0x142>
 8010870:	6829      	ldr	r1, [r5, #0]
 8010872:	f104 0c14 	add.w	ip, r4, #20
 8010876:	46ae      	mov	lr, r5
 8010878:	f04f 0a00 	mov.w	sl, #0
 801087c:	f8bc b000 	ldrh.w	fp, [ip]
 8010880:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010884:	fb09 220b 	mla	r2, r9, fp, r2
 8010888:	4492      	add	sl, r2
 801088a:	b289      	uxth	r1, r1
 801088c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010890:	f84e 1b04 	str.w	r1, [lr], #4
 8010894:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010898:	f8be 1000 	ldrh.w	r1, [lr]
 801089c:	0c12      	lsrs	r2, r2, #16
 801089e:	fb09 1102 	mla	r1, r9, r2, r1
 80108a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80108a6:	4567      	cmp	r7, ip
 80108a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80108ac:	d8e6      	bhi.n	801087c <__multiply+0x10c>
 80108ae:	9a01      	ldr	r2, [sp, #4]
 80108b0:	50a9      	str	r1, [r5, r2]
 80108b2:	3504      	adds	r5, #4
 80108b4:	e79a      	b.n	80107ec <__multiply+0x7c>
 80108b6:	3e01      	subs	r6, #1
 80108b8:	e79c      	b.n	80107f4 <__multiply+0x84>
 80108ba:	bf00      	nop
 80108bc:	08012178 	.word	0x08012178
 80108c0:	08012204 	.word	0x08012204

080108c4 <__pow5mult>:
 80108c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108c8:	4615      	mov	r5, r2
 80108ca:	f012 0203 	ands.w	r2, r2, #3
 80108ce:	4606      	mov	r6, r0
 80108d0:	460f      	mov	r7, r1
 80108d2:	d007      	beq.n	80108e4 <__pow5mult+0x20>
 80108d4:	4c25      	ldr	r4, [pc, #148]	; (801096c <__pow5mult+0xa8>)
 80108d6:	3a01      	subs	r2, #1
 80108d8:	2300      	movs	r3, #0
 80108da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108de:	f7ff fe51 	bl	8010584 <__multadd>
 80108e2:	4607      	mov	r7, r0
 80108e4:	10ad      	asrs	r5, r5, #2
 80108e6:	d03d      	beq.n	8010964 <__pow5mult+0xa0>
 80108e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80108ea:	b97c      	cbnz	r4, 801090c <__pow5mult+0x48>
 80108ec:	2010      	movs	r0, #16
 80108ee:	f7fe f969 	bl	800ebc4 <malloc>
 80108f2:	4602      	mov	r2, r0
 80108f4:	6270      	str	r0, [r6, #36]	; 0x24
 80108f6:	b928      	cbnz	r0, 8010904 <__pow5mult+0x40>
 80108f8:	4b1d      	ldr	r3, [pc, #116]	; (8010970 <__pow5mult+0xac>)
 80108fa:	481e      	ldr	r0, [pc, #120]	; (8010974 <__pow5mult+0xb0>)
 80108fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010900:	f7ff f928 	bl	800fb54 <__assert_func>
 8010904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010908:	6004      	str	r4, [r0, #0]
 801090a:	60c4      	str	r4, [r0, #12]
 801090c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010914:	b94c      	cbnz	r4, 801092a <__pow5mult+0x66>
 8010916:	f240 2171 	movw	r1, #625	; 0x271
 801091a:	4630      	mov	r0, r6
 801091c:	f7ff ff12 	bl	8010744 <__i2b>
 8010920:	2300      	movs	r3, #0
 8010922:	f8c8 0008 	str.w	r0, [r8, #8]
 8010926:	4604      	mov	r4, r0
 8010928:	6003      	str	r3, [r0, #0]
 801092a:	f04f 0900 	mov.w	r9, #0
 801092e:	07eb      	lsls	r3, r5, #31
 8010930:	d50a      	bpl.n	8010948 <__pow5mult+0x84>
 8010932:	4639      	mov	r1, r7
 8010934:	4622      	mov	r2, r4
 8010936:	4630      	mov	r0, r6
 8010938:	f7ff ff1a 	bl	8010770 <__multiply>
 801093c:	4639      	mov	r1, r7
 801093e:	4680      	mov	r8, r0
 8010940:	4630      	mov	r0, r6
 8010942:	f7ff fdfd 	bl	8010540 <_Bfree>
 8010946:	4647      	mov	r7, r8
 8010948:	106d      	asrs	r5, r5, #1
 801094a:	d00b      	beq.n	8010964 <__pow5mult+0xa0>
 801094c:	6820      	ldr	r0, [r4, #0]
 801094e:	b938      	cbnz	r0, 8010960 <__pow5mult+0x9c>
 8010950:	4622      	mov	r2, r4
 8010952:	4621      	mov	r1, r4
 8010954:	4630      	mov	r0, r6
 8010956:	f7ff ff0b 	bl	8010770 <__multiply>
 801095a:	6020      	str	r0, [r4, #0]
 801095c:	f8c0 9000 	str.w	r9, [r0]
 8010960:	4604      	mov	r4, r0
 8010962:	e7e4      	b.n	801092e <__pow5mult+0x6a>
 8010964:	4638      	mov	r0, r7
 8010966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801096a:	bf00      	nop
 801096c:	08012350 	.word	0x08012350
 8010970:	08012068 	.word	0x08012068
 8010974:	08012204 	.word	0x08012204

08010978 <__lshift>:
 8010978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801097c:	460c      	mov	r4, r1
 801097e:	6849      	ldr	r1, [r1, #4]
 8010980:	6923      	ldr	r3, [r4, #16]
 8010982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010986:	68a3      	ldr	r3, [r4, #8]
 8010988:	4607      	mov	r7, r0
 801098a:	4691      	mov	r9, r2
 801098c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010990:	f108 0601 	add.w	r6, r8, #1
 8010994:	42b3      	cmp	r3, r6
 8010996:	db0b      	blt.n	80109b0 <__lshift+0x38>
 8010998:	4638      	mov	r0, r7
 801099a:	f7ff fd91 	bl	80104c0 <_Balloc>
 801099e:	4605      	mov	r5, r0
 80109a0:	b948      	cbnz	r0, 80109b6 <__lshift+0x3e>
 80109a2:	4602      	mov	r2, r0
 80109a4:	4b2a      	ldr	r3, [pc, #168]	; (8010a50 <__lshift+0xd8>)
 80109a6:	482b      	ldr	r0, [pc, #172]	; (8010a54 <__lshift+0xdc>)
 80109a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80109ac:	f7ff f8d2 	bl	800fb54 <__assert_func>
 80109b0:	3101      	adds	r1, #1
 80109b2:	005b      	lsls	r3, r3, #1
 80109b4:	e7ee      	b.n	8010994 <__lshift+0x1c>
 80109b6:	2300      	movs	r3, #0
 80109b8:	f100 0114 	add.w	r1, r0, #20
 80109bc:	f100 0210 	add.w	r2, r0, #16
 80109c0:	4618      	mov	r0, r3
 80109c2:	4553      	cmp	r3, sl
 80109c4:	db37      	blt.n	8010a36 <__lshift+0xbe>
 80109c6:	6920      	ldr	r0, [r4, #16]
 80109c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109cc:	f104 0314 	add.w	r3, r4, #20
 80109d0:	f019 091f 	ands.w	r9, r9, #31
 80109d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80109dc:	d02f      	beq.n	8010a3e <__lshift+0xc6>
 80109de:	f1c9 0e20 	rsb	lr, r9, #32
 80109e2:	468a      	mov	sl, r1
 80109e4:	f04f 0c00 	mov.w	ip, #0
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	fa02 f209 	lsl.w	r2, r2, r9
 80109ee:	ea42 020c 	orr.w	r2, r2, ip
 80109f2:	f84a 2b04 	str.w	r2, [sl], #4
 80109f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80109fa:	4298      	cmp	r0, r3
 80109fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010a00:	d8f2      	bhi.n	80109e8 <__lshift+0x70>
 8010a02:	1b03      	subs	r3, r0, r4
 8010a04:	3b15      	subs	r3, #21
 8010a06:	f023 0303 	bic.w	r3, r3, #3
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	f104 0215 	add.w	r2, r4, #21
 8010a10:	4290      	cmp	r0, r2
 8010a12:	bf38      	it	cc
 8010a14:	2304      	movcc	r3, #4
 8010a16:	f841 c003 	str.w	ip, [r1, r3]
 8010a1a:	f1bc 0f00 	cmp.w	ip, #0
 8010a1e:	d001      	beq.n	8010a24 <__lshift+0xac>
 8010a20:	f108 0602 	add.w	r6, r8, #2
 8010a24:	3e01      	subs	r6, #1
 8010a26:	4638      	mov	r0, r7
 8010a28:	612e      	str	r6, [r5, #16]
 8010a2a:	4621      	mov	r1, r4
 8010a2c:	f7ff fd88 	bl	8010540 <_Bfree>
 8010a30:	4628      	mov	r0, r5
 8010a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	e7c1      	b.n	80109c2 <__lshift+0x4a>
 8010a3e:	3904      	subs	r1, #4
 8010a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a44:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a48:	4298      	cmp	r0, r3
 8010a4a:	d8f9      	bhi.n	8010a40 <__lshift+0xc8>
 8010a4c:	e7ea      	b.n	8010a24 <__lshift+0xac>
 8010a4e:	bf00      	nop
 8010a50:	08012178 	.word	0x08012178
 8010a54:	08012204 	.word	0x08012204

08010a58 <__mcmp>:
 8010a58:	b530      	push	{r4, r5, lr}
 8010a5a:	6902      	ldr	r2, [r0, #16]
 8010a5c:	690c      	ldr	r4, [r1, #16]
 8010a5e:	1b12      	subs	r2, r2, r4
 8010a60:	d10e      	bne.n	8010a80 <__mcmp+0x28>
 8010a62:	f100 0314 	add.w	r3, r0, #20
 8010a66:	3114      	adds	r1, #20
 8010a68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a78:	42a5      	cmp	r5, r4
 8010a7a:	d003      	beq.n	8010a84 <__mcmp+0x2c>
 8010a7c:	d305      	bcc.n	8010a8a <__mcmp+0x32>
 8010a7e:	2201      	movs	r2, #1
 8010a80:	4610      	mov	r0, r2
 8010a82:	bd30      	pop	{r4, r5, pc}
 8010a84:	4283      	cmp	r3, r0
 8010a86:	d3f3      	bcc.n	8010a70 <__mcmp+0x18>
 8010a88:	e7fa      	b.n	8010a80 <__mcmp+0x28>
 8010a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a8e:	e7f7      	b.n	8010a80 <__mcmp+0x28>

08010a90 <__mdiff>:
 8010a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a94:	460c      	mov	r4, r1
 8010a96:	4606      	mov	r6, r0
 8010a98:	4611      	mov	r1, r2
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	4690      	mov	r8, r2
 8010a9e:	f7ff ffdb 	bl	8010a58 <__mcmp>
 8010aa2:	1e05      	subs	r5, r0, #0
 8010aa4:	d110      	bne.n	8010ac8 <__mdiff+0x38>
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	f7ff fd09 	bl	80104c0 <_Balloc>
 8010aae:	b930      	cbnz	r0, 8010abe <__mdiff+0x2e>
 8010ab0:	4b3a      	ldr	r3, [pc, #232]	; (8010b9c <__mdiff+0x10c>)
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	f240 2132 	movw	r1, #562	; 0x232
 8010ab8:	4839      	ldr	r0, [pc, #228]	; (8010ba0 <__mdiff+0x110>)
 8010aba:	f7ff f84b 	bl	800fb54 <__assert_func>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac8:	bfa4      	itt	ge
 8010aca:	4643      	movge	r3, r8
 8010acc:	46a0      	movge	r8, r4
 8010ace:	4630      	mov	r0, r6
 8010ad0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ad4:	bfa6      	itte	ge
 8010ad6:	461c      	movge	r4, r3
 8010ad8:	2500      	movge	r5, #0
 8010ada:	2501      	movlt	r5, #1
 8010adc:	f7ff fcf0 	bl	80104c0 <_Balloc>
 8010ae0:	b920      	cbnz	r0, 8010aec <__mdiff+0x5c>
 8010ae2:	4b2e      	ldr	r3, [pc, #184]	; (8010b9c <__mdiff+0x10c>)
 8010ae4:	4602      	mov	r2, r0
 8010ae6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010aea:	e7e5      	b.n	8010ab8 <__mdiff+0x28>
 8010aec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010af0:	6926      	ldr	r6, [r4, #16]
 8010af2:	60c5      	str	r5, [r0, #12]
 8010af4:	f104 0914 	add.w	r9, r4, #20
 8010af8:	f108 0514 	add.w	r5, r8, #20
 8010afc:	f100 0e14 	add.w	lr, r0, #20
 8010b00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010b04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010b08:	f108 0210 	add.w	r2, r8, #16
 8010b0c:	46f2      	mov	sl, lr
 8010b0e:	2100      	movs	r1, #0
 8010b10:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010b18:	fa1f f883 	uxth.w	r8, r3
 8010b1c:	fa11 f18b 	uxtah	r1, r1, fp
 8010b20:	0c1b      	lsrs	r3, r3, #16
 8010b22:	eba1 0808 	sub.w	r8, r1, r8
 8010b26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010b2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010b2e:	fa1f f888 	uxth.w	r8, r8
 8010b32:	1419      	asrs	r1, r3, #16
 8010b34:	454e      	cmp	r6, r9
 8010b36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b3a:	f84a 3b04 	str.w	r3, [sl], #4
 8010b3e:	d8e7      	bhi.n	8010b10 <__mdiff+0x80>
 8010b40:	1b33      	subs	r3, r6, r4
 8010b42:	3b15      	subs	r3, #21
 8010b44:	f023 0303 	bic.w	r3, r3, #3
 8010b48:	3304      	adds	r3, #4
 8010b4a:	3415      	adds	r4, #21
 8010b4c:	42a6      	cmp	r6, r4
 8010b4e:	bf38      	it	cc
 8010b50:	2304      	movcc	r3, #4
 8010b52:	441d      	add	r5, r3
 8010b54:	4473      	add	r3, lr
 8010b56:	469e      	mov	lr, r3
 8010b58:	462e      	mov	r6, r5
 8010b5a:	4566      	cmp	r6, ip
 8010b5c:	d30e      	bcc.n	8010b7c <__mdiff+0xec>
 8010b5e:	f10c 0203 	add.w	r2, ip, #3
 8010b62:	1b52      	subs	r2, r2, r5
 8010b64:	f022 0203 	bic.w	r2, r2, #3
 8010b68:	3d03      	subs	r5, #3
 8010b6a:	45ac      	cmp	ip, r5
 8010b6c:	bf38      	it	cc
 8010b6e:	2200      	movcc	r2, #0
 8010b70:	441a      	add	r2, r3
 8010b72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010b76:	b17b      	cbz	r3, 8010b98 <__mdiff+0x108>
 8010b78:	6107      	str	r7, [r0, #16]
 8010b7a:	e7a3      	b.n	8010ac4 <__mdiff+0x34>
 8010b7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010b80:	fa11 f288 	uxtah	r2, r1, r8
 8010b84:	1414      	asrs	r4, r2, #16
 8010b86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b8a:	b292      	uxth	r2, r2
 8010b8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010b90:	f84e 2b04 	str.w	r2, [lr], #4
 8010b94:	1421      	asrs	r1, r4, #16
 8010b96:	e7e0      	b.n	8010b5a <__mdiff+0xca>
 8010b98:	3f01      	subs	r7, #1
 8010b9a:	e7ea      	b.n	8010b72 <__mdiff+0xe2>
 8010b9c:	08012178 	.word	0x08012178
 8010ba0:	08012204 	.word	0x08012204

08010ba4 <__ulp>:
 8010ba4:	b082      	sub	sp, #8
 8010ba6:	ed8d 0b00 	vstr	d0, [sp]
 8010baa:	9b01      	ldr	r3, [sp, #4]
 8010bac:	4912      	ldr	r1, [pc, #72]	; (8010bf8 <__ulp+0x54>)
 8010bae:	4019      	ands	r1, r3
 8010bb0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010bb4:	2900      	cmp	r1, #0
 8010bb6:	dd05      	ble.n	8010bc4 <__ulp+0x20>
 8010bb8:	2200      	movs	r2, #0
 8010bba:	460b      	mov	r3, r1
 8010bbc:	ec43 2b10 	vmov	d0, r2, r3
 8010bc0:	b002      	add	sp, #8
 8010bc2:	4770      	bx	lr
 8010bc4:	4249      	negs	r1, r1
 8010bc6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010bca:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010bce:	f04f 0200 	mov.w	r2, #0
 8010bd2:	f04f 0300 	mov.w	r3, #0
 8010bd6:	da04      	bge.n	8010be2 <__ulp+0x3e>
 8010bd8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010bdc:	fa41 f300 	asr.w	r3, r1, r0
 8010be0:	e7ec      	b.n	8010bbc <__ulp+0x18>
 8010be2:	f1a0 0114 	sub.w	r1, r0, #20
 8010be6:	291e      	cmp	r1, #30
 8010be8:	bfda      	itte	le
 8010bea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010bee:	fa20 f101 	lsrle.w	r1, r0, r1
 8010bf2:	2101      	movgt	r1, #1
 8010bf4:	460a      	mov	r2, r1
 8010bf6:	e7e1      	b.n	8010bbc <__ulp+0x18>
 8010bf8:	7ff00000 	.word	0x7ff00000

08010bfc <__b2d>:
 8010bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfe:	6905      	ldr	r5, [r0, #16]
 8010c00:	f100 0714 	add.w	r7, r0, #20
 8010c04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010c08:	1f2e      	subs	r6, r5, #4
 8010c0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010c0e:	4620      	mov	r0, r4
 8010c10:	f7ff fd48 	bl	80106a4 <__hi0bits>
 8010c14:	f1c0 0320 	rsb	r3, r0, #32
 8010c18:	280a      	cmp	r0, #10
 8010c1a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010c98 <__b2d+0x9c>
 8010c1e:	600b      	str	r3, [r1, #0]
 8010c20:	dc14      	bgt.n	8010c4c <__b2d+0x50>
 8010c22:	f1c0 0e0b 	rsb	lr, r0, #11
 8010c26:	fa24 f10e 	lsr.w	r1, r4, lr
 8010c2a:	42b7      	cmp	r7, r6
 8010c2c:	ea41 030c 	orr.w	r3, r1, ip
 8010c30:	bf34      	ite	cc
 8010c32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c36:	2100      	movcs	r1, #0
 8010c38:	3015      	adds	r0, #21
 8010c3a:	fa04 f000 	lsl.w	r0, r4, r0
 8010c3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010c42:	ea40 0201 	orr.w	r2, r0, r1
 8010c46:	ec43 2b10 	vmov	d0, r2, r3
 8010c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c4c:	42b7      	cmp	r7, r6
 8010c4e:	bf3a      	itte	cc
 8010c50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c54:	f1a5 0608 	subcc.w	r6, r5, #8
 8010c58:	2100      	movcs	r1, #0
 8010c5a:	380b      	subs	r0, #11
 8010c5c:	d017      	beq.n	8010c8e <__b2d+0x92>
 8010c5e:	f1c0 0c20 	rsb	ip, r0, #32
 8010c62:	fa04 f500 	lsl.w	r5, r4, r0
 8010c66:	42be      	cmp	r6, r7
 8010c68:	fa21 f40c 	lsr.w	r4, r1, ip
 8010c6c:	ea45 0504 	orr.w	r5, r5, r4
 8010c70:	bf8c      	ite	hi
 8010c72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010c76:	2400      	movls	r4, #0
 8010c78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010c7c:	fa01 f000 	lsl.w	r0, r1, r0
 8010c80:	fa24 f40c 	lsr.w	r4, r4, ip
 8010c84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010c88:	ea40 0204 	orr.w	r2, r0, r4
 8010c8c:	e7db      	b.n	8010c46 <__b2d+0x4a>
 8010c8e:	ea44 030c 	orr.w	r3, r4, ip
 8010c92:	460a      	mov	r2, r1
 8010c94:	e7d7      	b.n	8010c46 <__b2d+0x4a>
 8010c96:	bf00      	nop
 8010c98:	3ff00000 	.word	0x3ff00000

08010c9c <__d2b>:
 8010c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ca0:	4689      	mov	r9, r1
 8010ca2:	2101      	movs	r1, #1
 8010ca4:	ec57 6b10 	vmov	r6, r7, d0
 8010ca8:	4690      	mov	r8, r2
 8010caa:	f7ff fc09 	bl	80104c0 <_Balloc>
 8010cae:	4604      	mov	r4, r0
 8010cb0:	b930      	cbnz	r0, 8010cc0 <__d2b+0x24>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	4b25      	ldr	r3, [pc, #148]	; (8010d4c <__d2b+0xb0>)
 8010cb6:	4826      	ldr	r0, [pc, #152]	; (8010d50 <__d2b+0xb4>)
 8010cb8:	f240 310a 	movw	r1, #778	; 0x30a
 8010cbc:	f7fe ff4a 	bl	800fb54 <__assert_func>
 8010cc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010cc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010cc8:	bb35      	cbnz	r5, 8010d18 <__d2b+0x7c>
 8010cca:	2e00      	cmp	r6, #0
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	d028      	beq.n	8010d22 <__d2b+0x86>
 8010cd0:	4668      	mov	r0, sp
 8010cd2:	9600      	str	r6, [sp, #0]
 8010cd4:	f7ff fd06 	bl	80106e4 <__lo0bits>
 8010cd8:	9900      	ldr	r1, [sp, #0]
 8010cda:	b300      	cbz	r0, 8010d1e <__d2b+0x82>
 8010cdc:	9a01      	ldr	r2, [sp, #4]
 8010cde:	f1c0 0320 	rsb	r3, r0, #32
 8010ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ce6:	430b      	orrs	r3, r1
 8010ce8:	40c2      	lsrs	r2, r0
 8010cea:	6163      	str	r3, [r4, #20]
 8010cec:	9201      	str	r2, [sp, #4]
 8010cee:	9b01      	ldr	r3, [sp, #4]
 8010cf0:	61a3      	str	r3, [r4, #24]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	bf14      	ite	ne
 8010cf6:	2202      	movne	r2, #2
 8010cf8:	2201      	moveq	r2, #1
 8010cfa:	6122      	str	r2, [r4, #16]
 8010cfc:	b1d5      	cbz	r5, 8010d34 <__d2b+0x98>
 8010cfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d02:	4405      	add	r5, r0
 8010d04:	f8c9 5000 	str.w	r5, [r9]
 8010d08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d0c:	f8c8 0000 	str.w	r0, [r8]
 8010d10:	4620      	mov	r0, r4
 8010d12:	b003      	add	sp, #12
 8010d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d1c:	e7d5      	b.n	8010cca <__d2b+0x2e>
 8010d1e:	6161      	str	r1, [r4, #20]
 8010d20:	e7e5      	b.n	8010cee <__d2b+0x52>
 8010d22:	a801      	add	r0, sp, #4
 8010d24:	f7ff fcde 	bl	80106e4 <__lo0bits>
 8010d28:	9b01      	ldr	r3, [sp, #4]
 8010d2a:	6163      	str	r3, [r4, #20]
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	6122      	str	r2, [r4, #16]
 8010d30:	3020      	adds	r0, #32
 8010d32:	e7e3      	b.n	8010cfc <__d2b+0x60>
 8010d34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d3c:	f8c9 0000 	str.w	r0, [r9]
 8010d40:	6918      	ldr	r0, [r3, #16]
 8010d42:	f7ff fcaf 	bl	80106a4 <__hi0bits>
 8010d46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d4a:	e7df      	b.n	8010d0c <__d2b+0x70>
 8010d4c:	08012178 	.word	0x08012178
 8010d50:	08012204 	.word	0x08012204

08010d54 <__ratio>:
 8010d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d58:	4688      	mov	r8, r1
 8010d5a:	4669      	mov	r1, sp
 8010d5c:	4681      	mov	r9, r0
 8010d5e:	f7ff ff4d 	bl	8010bfc <__b2d>
 8010d62:	a901      	add	r1, sp, #4
 8010d64:	4640      	mov	r0, r8
 8010d66:	ec55 4b10 	vmov	r4, r5, d0
 8010d6a:	ee10 aa10 	vmov	sl, s0
 8010d6e:	f7ff ff45 	bl	8010bfc <__b2d>
 8010d72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010d7a:	1a59      	subs	r1, r3, r1
 8010d7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010d86:	ec57 6b10 	vmov	r6, r7, d0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	bfd6      	itet	le
 8010d8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010d92:	462a      	movgt	r2, r5
 8010d94:	463a      	movle	r2, r7
 8010d96:	46ab      	mov	fp, r5
 8010d98:	bfd6      	itet	le
 8010d9a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010d9e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010da2:	ee00 3a90 	vmovle	s1, r3
 8010da6:	ec4b ab17 	vmov	d7, sl, fp
 8010daa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010dae:	b003      	add	sp, #12
 8010db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010db4 <__copybits>:
 8010db4:	3901      	subs	r1, #1
 8010db6:	b570      	push	{r4, r5, r6, lr}
 8010db8:	1149      	asrs	r1, r1, #5
 8010dba:	6914      	ldr	r4, [r2, #16]
 8010dbc:	3101      	adds	r1, #1
 8010dbe:	f102 0314 	add.w	r3, r2, #20
 8010dc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010dc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010dca:	1f05      	subs	r5, r0, #4
 8010dcc:	42a3      	cmp	r3, r4
 8010dce:	d30c      	bcc.n	8010dea <__copybits+0x36>
 8010dd0:	1aa3      	subs	r3, r4, r2
 8010dd2:	3b11      	subs	r3, #17
 8010dd4:	f023 0303 	bic.w	r3, r3, #3
 8010dd8:	3211      	adds	r2, #17
 8010dda:	42a2      	cmp	r2, r4
 8010ddc:	bf88      	it	hi
 8010dde:	2300      	movhi	r3, #0
 8010de0:	4418      	add	r0, r3
 8010de2:	2300      	movs	r3, #0
 8010de4:	4288      	cmp	r0, r1
 8010de6:	d305      	bcc.n	8010df4 <__copybits+0x40>
 8010de8:	bd70      	pop	{r4, r5, r6, pc}
 8010dea:	f853 6b04 	ldr.w	r6, [r3], #4
 8010dee:	f845 6f04 	str.w	r6, [r5, #4]!
 8010df2:	e7eb      	b.n	8010dcc <__copybits+0x18>
 8010df4:	f840 3b04 	str.w	r3, [r0], #4
 8010df8:	e7f4      	b.n	8010de4 <__copybits+0x30>

08010dfa <__any_on>:
 8010dfa:	f100 0214 	add.w	r2, r0, #20
 8010dfe:	6900      	ldr	r0, [r0, #16]
 8010e00:	114b      	asrs	r3, r1, #5
 8010e02:	4298      	cmp	r0, r3
 8010e04:	b510      	push	{r4, lr}
 8010e06:	db11      	blt.n	8010e2c <__any_on+0x32>
 8010e08:	dd0a      	ble.n	8010e20 <__any_on+0x26>
 8010e0a:	f011 011f 	ands.w	r1, r1, #31
 8010e0e:	d007      	beq.n	8010e20 <__any_on+0x26>
 8010e10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e14:	fa24 f001 	lsr.w	r0, r4, r1
 8010e18:	fa00 f101 	lsl.w	r1, r0, r1
 8010e1c:	428c      	cmp	r4, r1
 8010e1e:	d10b      	bne.n	8010e38 <__any_on+0x3e>
 8010e20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d803      	bhi.n	8010e30 <__any_on+0x36>
 8010e28:	2000      	movs	r0, #0
 8010e2a:	bd10      	pop	{r4, pc}
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	e7f7      	b.n	8010e20 <__any_on+0x26>
 8010e30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e34:	2900      	cmp	r1, #0
 8010e36:	d0f5      	beq.n	8010e24 <__any_on+0x2a>
 8010e38:	2001      	movs	r0, #1
 8010e3a:	e7f6      	b.n	8010e2a <__any_on+0x30>

08010e3c <_calloc_r>:
 8010e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e3e:	fba1 2402 	umull	r2, r4, r1, r2
 8010e42:	b94c      	cbnz	r4, 8010e58 <_calloc_r+0x1c>
 8010e44:	4611      	mov	r1, r2
 8010e46:	9201      	str	r2, [sp, #4]
 8010e48:	f7fd ff4e 	bl	800ece8 <_malloc_r>
 8010e4c:	9a01      	ldr	r2, [sp, #4]
 8010e4e:	4605      	mov	r5, r0
 8010e50:	b930      	cbnz	r0, 8010e60 <_calloc_r+0x24>
 8010e52:	4628      	mov	r0, r5
 8010e54:	b003      	add	sp, #12
 8010e56:	bd30      	pop	{r4, r5, pc}
 8010e58:	220c      	movs	r2, #12
 8010e5a:	6002      	str	r2, [r0, #0]
 8010e5c:	2500      	movs	r5, #0
 8010e5e:	e7f8      	b.n	8010e52 <_calloc_r+0x16>
 8010e60:	4621      	mov	r1, r4
 8010e62:	f7fd fecd 	bl	800ec00 <memset>
 8010e66:	e7f4      	b.n	8010e52 <_calloc_r+0x16>

08010e68 <__ssputs_r>:
 8010e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e6c:	688e      	ldr	r6, [r1, #8]
 8010e6e:	429e      	cmp	r6, r3
 8010e70:	4682      	mov	sl, r0
 8010e72:	460c      	mov	r4, r1
 8010e74:	4690      	mov	r8, r2
 8010e76:	461f      	mov	r7, r3
 8010e78:	d838      	bhi.n	8010eec <__ssputs_r+0x84>
 8010e7a:	898a      	ldrh	r2, [r1, #12]
 8010e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e80:	d032      	beq.n	8010ee8 <__ssputs_r+0x80>
 8010e82:	6825      	ldr	r5, [r4, #0]
 8010e84:	6909      	ldr	r1, [r1, #16]
 8010e86:	eba5 0901 	sub.w	r9, r5, r1
 8010e8a:	6965      	ldr	r5, [r4, #20]
 8010e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e94:	3301      	adds	r3, #1
 8010e96:	444b      	add	r3, r9
 8010e98:	106d      	asrs	r5, r5, #1
 8010e9a:	429d      	cmp	r5, r3
 8010e9c:	bf38      	it	cc
 8010e9e:	461d      	movcc	r5, r3
 8010ea0:	0553      	lsls	r3, r2, #21
 8010ea2:	d531      	bpl.n	8010f08 <__ssputs_r+0xa0>
 8010ea4:	4629      	mov	r1, r5
 8010ea6:	f7fd ff1f 	bl	800ece8 <_malloc_r>
 8010eaa:	4606      	mov	r6, r0
 8010eac:	b950      	cbnz	r0, 8010ec4 <__ssputs_r+0x5c>
 8010eae:	230c      	movs	r3, #12
 8010eb0:	f8ca 3000 	str.w	r3, [sl]
 8010eb4:	89a3      	ldrh	r3, [r4, #12]
 8010eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eba:	81a3      	strh	r3, [r4, #12]
 8010ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec4:	6921      	ldr	r1, [r4, #16]
 8010ec6:	464a      	mov	r2, r9
 8010ec8:	f7fd fe8c 	bl	800ebe4 <memcpy>
 8010ecc:	89a3      	ldrh	r3, [r4, #12]
 8010ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ed6:	81a3      	strh	r3, [r4, #12]
 8010ed8:	6126      	str	r6, [r4, #16]
 8010eda:	6165      	str	r5, [r4, #20]
 8010edc:	444e      	add	r6, r9
 8010ede:	eba5 0509 	sub.w	r5, r5, r9
 8010ee2:	6026      	str	r6, [r4, #0]
 8010ee4:	60a5      	str	r5, [r4, #8]
 8010ee6:	463e      	mov	r6, r7
 8010ee8:	42be      	cmp	r6, r7
 8010eea:	d900      	bls.n	8010eee <__ssputs_r+0x86>
 8010eec:	463e      	mov	r6, r7
 8010eee:	6820      	ldr	r0, [r4, #0]
 8010ef0:	4632      	mov	r2, r6
 8010ef2:	4641      	mov	r1, r8
 8010ef4:	f000 fe96 	bl	8011c24 <memmove>
 8010ef8:	68a3      	ldr	r3, [r4, #8]
 8010efa:	1b9b      	subs	r3, r3, r6
 8010efc:	60a3      	str	r3, [r4, #8]
 8010efe:	6823      	ldr	r3, [r4, #0]
 8010f00:	4433      	add	r3, r6
 8010f02:	6023      	str	r3, [r4, #0]
 8010f04:	2000      	movs	r0, #0
 8010f06:	e7db      	b.n	8010ec0 <__ssputs_r+0x58>
 8010f08:	462a      	mov	r2, r5
 8010f0a:	f000 fea5 	bl	8011c58 <_realloc_r>
 8010f0e:	4606      	mov	r6, r0
 8010f10:	2800      	cmp	r0, #0
 8010f12:	d1e1      	bne.n	8010ed8 <__ssputs_r+0x70>
 8010f14:	6921      	ldr	r1, [r4, #16]
 8010f16:	4650      	mov	r0, sl
 8010f18:	f7fd fe7a 	bl	800ec10 <_free_r>
 8010f1c:	e7c7      	b.n	8010eae <__ssputs_r+0x46>
	...

08010f20 <_svfiprintf_r>:
 8010f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f24:	4698      	mov	r8, r3
 8010f26:	898b      	ldrh	r3, [r1, #12]
 8010f28:	061b      	lsls	r3, r3, #24
 8010f2a:	b09d      	sub	sp, #116	; 0x74
 8010f2c:	4607      	mov	r7, r0
 8010f2e:	460d      	mov	r5, r1
 8010f30:	4614      	mov	r4, r2
 8010f32:	d50e      	bpl.n	8010f52 <_svfiprintf_r+0x32>
 8010f34:	690b      	ldr	r3, [r1, #16]
 8010f36:	b963      	cbnz	r3, 8010f52 <_svfiprintf_r+0x32>
 8010f38:	2140      	movs	r1, #64	; 0x40
 8010f3a:	f7fd fed5 	bl	800ece8 <_malloc_r>
 8010f3e:	6028      	str	r0, [r5, #0]
 8010f40:	6128      	str	r0, [r5, #16]
 8010f42:	b920      	cbnz	r0, 8010f4e <_svfiprintf_r+0x2e>
 8010f44:	230c      	movs	r3, #12
 8010f46:	603b      	str	r3, [r7, #0]
 8010f48:	f04f 30ff 	mov.w	r0, #4294967295
 8010f4c:	e0d1      	b.n	80110f2 <_svfiprintf_r+0x1d2>
 8010f4e:	2340      	movs	r3, #64	; 0x40
 8010f50:	616b      	str	r3, [r5, #20]
 8010f52:	2300      	movs	r3, #0
 8010f54:	9309      	str	r3, [sp, #36]	; 0x24
 8010f56:	2320      	movs	r3, #32
 8010f58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f60:	2330      	movs	r3, #48	; 0x30
 8010f62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801110c <_svfiprintf_r+0x1ec>
 8010f66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f6a:	f04f 0901 	mov.w	r9, #1
 8010f6e:	4623      	mov	r3, r4
 8010f70:	469a      	mov	sl, r3
 8010f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f76:	b10a      	cbz	r2, 8010f7c <_svfiprintf_r+0x5c>
 8010f78:	2a25      	cmp	r2, #37	; 0x25
 8010f7a:	d1f9      	bne.n	8010f70 <_svfiprintf_r+0x50>
 8010f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010f80:	d00b      	beq.n	8010f9a <_svfiprintf_r+0x7a>
 8010f82:	465b      	mov	r3, fp
 8010f84:	4622      	mov	r2, r4
 8010f86:	4629      	mov	r1, r5
 8010f88:	4638      	mov	r0, r7
 8010f8a:	f7ff ff6d 	bl	8010e68 <__ssputs_r>
 8010f8e:	3001      	adds	r0, #1
 8010f90:	f000 80aa 	beq.w	80110e8 <_svfiprintf_r+0x1c8>
 8010f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f96:	445a      	add	r2, fp
 8010f98:	9209      	str	r2, [sp, #36]	; 0x24
 8010f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f000 80a2 	beq.w	80110e8 <_svfiprintf_r+0x1c8>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8010faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fae:	f10a 0a01 	add.w	sl, sl, #1
 8010fb2:	9304      	str	r3, [sp, #16]
 8010fb4:	9307      	str	r3, [sp, #28]
 8010fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fba:	931a      	str	r3, [sp, #104]	; 0x68
 8010fbc:	4654      	mov	r4, sl
 8010fbe:	2205      	movs	r2, #5
 8010fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc4:	4851      	ldr	r0, [pc, #324]	; (801110c <_svfiprintf_r+0x1ec>)
 8010fc6:	f7ef f993 	bl	80002f0 <memchr>
 8010fca:	9a04      	ldr	r2, [sp, #16]
 8010fcc:	b9d8      	cbnz	r0, 8011006 <_svfiprintf_r+0xe6>
 8010fce:	06d0      	lsls	r0, r2, #27
 8010fd0:	bf44      	itt	mi
 8010fd2:	2320      	movmi	r3, #32
 8010fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fd8:	0711      	lsls	r1, r2, #28
 8010fda:	bf44      	itt	mi
 8010fdc:	232b      	movmi	r3, #43	; 0x2b
 8010fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8010fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8010fe8:	d015      	beq.n	8011016 <_svfiprintf_r+0xf6>
 8010fea:	9a07      	ldr	r2, [sp, #28]
 8010fec:	4654      	mov	r4, sl
 8010fee:	2000      	movs	r0, #0
 8010ff0:	f04f 0c0a 	mov.w	ip, #10
 8010ff4:	4621      	mov	r1, r4
 8010ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ffa:	3b30      	subs	r3, #48	; 0x30
 8010ffc:	2b09      	cmp	r3, #9
 8010ffe:	d94e      	bls.n	801109e <_svfiprintf_r+0x17e>
 8011000:	b1b0      	cbz	r0, 8011030 <_svfiprintf_r+0x110>
 8011002:	9207      	str	r2, [sp, #28]
 8011004:	e014      	b.n	8011030 <_svfiprintf_r+0x110>
 8011006:	eba0 0308 	sub.w	r3, r0, r8
 801100a:	fa09 f303 	lsl.w	r3, r9, r3
 801100e:	4313      	orrs	r3, r2
 8011010:	9304      	str	r3, [sp, #16]
 8011012:	46a2      	mov	sl, r4
 8011014:	e7d2      	b.n	8010fbc <_svfiprintf_r+0x9c>
 8011016:	9b03      	ldr	r3, [sp, #12]
 8011018:	1d19      	adds	r1, r3, #4
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	9103      	str	r1, [sp, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	bfbb      	ittet	lt
 8011022:	425b      	neglt	r3, r3
 8011024:	f042 0202 	orrlt.w	r2, r2, #2
 8011028:	9307      	strge	r3, [sp, #28]
 801102a:	9307      	strlt	r3, [sp, #28]
 801102c:	bfb8      	it	lt
 801102e:	9204      	strlt	r2, [sp, #16]
 8011030:	7823      	ldrb	r3, [r4, #0]
 8011032:	2b2e      	cmp	r3, #46	; 0x2e
 8011034:	d10c      	bne.n	8011050 <_svfiprintf_r+0x130>
 8011036:	7863      	ldrb	r3, [r4, #1]
 8011038:	2b2a      	cmp	r3, #42	; 0x2a
 801103a:	d135      	bne.n	80110a8 <_svfiprintf_r+0x188>
 801103c:	9b03      	ldr	r3, [sp, #12]
 801103e:	1d1a      	adds	r2, r3, #4
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	9203      	str	r2, [sp, #12]
 8011044:	2b00      	cmp	r3, #0
 8011046:	bfb8      	it	lt
 8011048:	f04f 33ff 	movlt.w	r3, #4294967295
 801104c:	3402      	adds	r4, #2
 801104e:	9305      	str	r3, [sp, #20]
 8011050:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801111c <_svfiprintf_r+0x1fc>
 8011054:	7821      	ldrb	r1, [r4, #0]
 8011056:	2203      	movs	r2, #3
 8011058:	4650      	mov	r0, sl
 801105a:	f7ef f949 	bl	80002f0 <memchr>
 801105e:	b140      	cbz	r0, 8011072 <_svfiprintf_r+0x152>
 8011060:	2340      	movs	r3, #64	; 0x40
 8011062:	eba0 000a 	sub.w	r0, r0, sl
 8011066:	fa03 f000 	lsl.w	r0, r3, r0
 801106a:	9b04      	ldr	r3, [sp, #16]
 801106c:	4303      	orrs	r3, r0
 801106e:	3401      	adds	r4, #1
 8011070:	9304      	str	r3, [sp, #16]
 8011072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011076:	4826      	ldr	r0, [pc, #152]	; (8011110 <_svfiprintf_r+0x1f0>)
 8011078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801107c:	2206      	movs	r2, #6
 801107e:	f7ef f937 	bl	80002f0 <memchr>
 8011082:	2800      	cmp	r0, #0
 8011084:	d038      	beq.n	80110f8 <_svfiprintf_r+0x1d8>
 8011086:	4b23      	ldr	r3, [pc, #140]	; (8011114 <_svfiprintf_r+0x1f4>)
 8011088:	bb1b      	cbnz	r3, 80110d2 <_svfiprintf_r+0x1b2>
 801108a:	9b03      	ldr	r3, [sp, #12]
 801108c:	3307      	adds	r3, #7
 801108e:	f023 0307 	bic.w	r3, r3, #7
 8011092:	3308      	adds	r3, #8
 8011094:	9303      	str	r3, [sp, #12]
 8011096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011098:	4433      	add	r3, r6
 801109a:	9309      	str	r3, [sp, #36]	; 0x24
 801109c:	e767      	b.n	8010f6e <_svfiprintf_r+0x4e>
 801109e:	fb0c 3202 	mla	r2, ip, r2, r3
 80110a2:	460c      	mov	r4, r1
 80110a4:	2001      	movs	r0, #1
 80110a6:	e7a5      	b.n	8010ff4 <_svfiprintf_r+0xd4>
 80110a8:	2300      	movs	r3, #0
 80110aa:	3401      	adds	r4, #1
 80110ac:	9305      	str	r3, [sp, #20]
 80110ae:	4619      	mov	r1, r3
 80110b0:	f04f 0c0a 	mov.w	ip, #10
 80110b4:	4620      	mov	r0, r4
 80110b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110ba:	3a30      	subs	r2, #48	; 0x30
 80110bc:	2a09      	cmp	r2, #9
 80110be:	d903      	bls.n	80110c8 <_svfiprintf_r+0x1a8>
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d0c5      	beq.n	8011050 <_svfiprintf_r+0x130>
 80110c4:	9105      	str	r1, [sp, #20]
 80110c6:	e7c3      	b.n	8011050 <_svfiprintf_r+0x130>
 80110c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80110cc:	4604      	mov	r4, r0
 80110ce:	2301      	movs	r3, #1
 80110d0:	e7f0      	b.n	80110b4 <_svfiprintf_r+0x194>
 80110d2:	ab03      	add	r3, sp, #12
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	462a      	mov	r2, r5
 80110d8:	4b0f      	ldr	r3, [pc, #60]	; (8011118 <_svfiprintf_r+0x1f8>)
 80110da:	a904      	add	r1, sp, #16
 80110dc:	4638      	mov	r0, r7
 80110de:	f3af 8000 	nop.w
 80110e2:	1c42      	adds	r2, r0, #1
 80110e4:	4606      	mov	r6, r0
 80110e6:	d1d6      	bne.n	8011096 <_svfiprintf_r+0x176>
 80110e8:	89ab      	ldrh	r3, [r5, #12]
 80110ea:	065b      	lsls	r3, r3, #25
 80110ec:	f53f af2c 	bmi.w	8010f48 <_svfiprintf_r+0x28>
 80110f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110f2:	b01d      	add	sp, #116	; 0x74
 80110f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f8:	ab03      	add	r3, sp, #12
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	462a      	mov	r2, r5
 80110fe:	4b06      	ldr	r3, [pc, #24]	; (8011118 <_svfiprintf_r+0x1f8>)
 8011100:	a904      	add	r1, sp, #16
 8011102:	4638      	mov	r0, r7
 8011104:	f000 f9d4 	bl	80114b0 <_printf_i>
 8011108:	e7eb      	b.n	80110e2 <_svfiprintf_r+0x1c2>
 801110a:	bf00      	nop
 801110c:	0801235c 	.word	0x0801235c
 8011110:	08012366 	.word	0x08012366
 8011114:	00000000 	.word	0x00000000
 8011118:	08010e69 	.word	0x08010e69
 801111c:	08012362 	.word	0x08012362

08011120 <__sfputc_r>:
 8011120:	6893      	ldr	r3, [r2, #8]
 8011122:	3b01      	subs	r3, #1
 8011124:	2b00      	cmp	r3, #0
 8011126:	b410      	push	{r4}
 8011128:	6093      	str	r3, [r2, #8]
 801112a:	da08      	bge.n	801113e <__sfputc_r+0x1e>
 801112c:	6994      	ldr	r4, [r2, #24]
 801112e:	42a3      	cmp	r3, r4
 8011130:	db01      	blt.n	8011136 <__sfputc_r+0x16>
 8011132:	290a      	cmp	r1, #10
 8011134:	d103      	bne.n	801113e <__sfputc_r+0x1e>
 8011136:	f85d 4b04 	ldr.w	r4, [sp], #4
 801113a:	f000 bb41 	b.w	80117c0 <__swbuf_r>
 801113e:	6813      	ldr	r3, [r2, #0]
 8011140:	1c58      	adds	r0, r3, #1
 8011142:	6010      	str	r0, [r2, #0]
 8011144:	7019      	strb	r1, [r3, #0]
 8011146:	4608      	mov	r0, r1
 8011148:	f85d 4b04 	ldr.w	r4, [sp], #4
 801114c:	4770      	bx	lr

0801114e <__sfputs_r>:
 801114e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011150:	4606      	mov	r6, r0
 8011152:	460f      	mov	r7, r1
 8011154:	4614      	mov	r4, r2
 8011156:	18d5      	adds	r5, r2, r3
 8011158:	42ac      	cmp	r4, r5
 801115a:	d101      	bne.n	8011160 <__sfputs_r+0x12>
 801115c:	2000      	movs	r0, #0
 801115e:	e007      	b.n	8011170 <__sfputs_r+0x22>
 8011160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011164:	463a      	mov	r2, r7
 8011166:	4630      	mov	r0, r6
 8011168:	f7ff ffda 	bl	8011120 <__sfputc_r>
 801116c:	1c43      	adds	r3, r0, #1
 801116e:	d1f3      	bne.n	8011158 <__sfputs_r+0xa>
 8011170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011174 <_vfiprintf_r>:
 8011174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011178:	460d      	mov	r5, r1
 801117a:	b09d      	sub	sp, #116	; 0x74
 801117c:	4614      	mov	r4, r2
 801117e:	4698      	mov	r8, r3
 8011180:	4606      	mov	r6, r0
 8011182:	b118      	cbz	r0, 801118c <_vfiprintf_r+0x18>
 8011184:	6983      	ldr	r3, [r0, #24]
 8011186:	b90b      	cbnz	r3, 801118c <_vfiprintf_r+0x18>
 8011188:	f7fe fd5a 	bl	800fc40 <__sinit>
 801118c:	4b89      	ldr	r3, [pc, #548]	; (80113b4 <_vfiprintf_r+0x240>)
 801118e:	429d      	cmp	r5, r3
 8011190:	d11b      	bne.n	80111ca <_vfiprintf_r+0x56>
 8011192:	6875      	ldr	r5, [r6, #4]
 8011194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011196:	07d9      	lsls	r1, r3, #31
 8011198:	d405      	bmi.n	80111a6 <_vfiprintf_r+0x32>
 801119a:	89ab      	ldrh	r3, [r5, #12]
 801119c:	059a      	lsls	r2, r3, #22
 801119e:	d402      	bmi.n	80111a6 <_vfiprintf_r+0x32>
 80111a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111a2:	f7ff f96c 	bl	801047e <__retarget_lock_acquire_recursive>
 80111a6:	89ab      	ldrh	r3, [r5, #12]
 80111a8:	071b      	lsls	r3, r3, #28
 80111aa:	d501      	bpl.n	80111b0 <_vfiprintf_r+0x3c>
 80111ac:	692b      	ldr	r3, [r5, #16]
 80111ae:	b9eb      	cbnz	r3, 80111ec <_vfiprintf_r+0x78>
 80111b0:	4629      	mov	r1, r5
 80111b2:	4630      	mov	r0, r6
 80111b4:	f000 fb76 	bl	80118a4 <__swsetup_r>
 80111b8:	b1c0      	cbz	r0, 80111ec <_vfiprintf_r+0x78>
 80111ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111bc:	07dc      	lsls	r4, r3, #31
 80111be:	d50e      	bpl.n	80111de <_vfiprintf_r+0x6a>
 80111c0:	f04f 30ff 	mov.w	r0, #4294967295
 80111c4:	b01d      	add	sp, #116	; 0x74
 80111c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ca:	4b7b      	ldr	r3, [pc, #492]	; (80113b8 <_vfiprintf_r+0x244>)
 80111cc:	429d      	cmp	r5, r3
 80111ce:	d101      	bne.n	80111d4 <_vfiprintf_r+0x60>
 80111d0:	68b5      	ldr	r5, [r6, #8]
 80111d2:	e7df      	b.n	8011194 <_vfiprintf_r+0x20>
 80111d4:	4b79      	ldr	r3, [pc, #484]	; (80113bc <_vfiprintf_r+0x248>)
 80111d6:	429d      	cmp	r5, r3
 80111d8:	bf08      	it	eq
 80111da:	68f5      	ldreq	r5, [r6, #12]
 80111dc:	e7da      	b.n	8011194 <_vfiprintf_r+0x20>
 80111de:	89ab      	ldrh	r3, [r5, #12]
 80111e0:	0598      	lsls	r0, r3, #22
 80111e2:	d4ed      	bmi.n	80111c0 <_vfiprintf_r+0x4c>
 80111e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111e6:	f7ff f94b 	bl	8010480 <__retarget_lock_release_recursive>
 80111ea:	e7e9      	b.n	80111c0 <_vfiprintf_r+0x4c>
 80111ec:	2300      	movs	r3, #0
 80111ee:	9309      	str	r3, [sp, #36]	; 0x24
 80111f0:	2320      	movs	r3, #32
 80111f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80111fa:	2330      	movs	r3, #48	; 0x30
 80111fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80113c0 <_vfiprintf_r+0x24c>
 8011200:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011204:	f04f 0901 	mov.w	r9, #1
 8011208:	4623      	mov	r3, r4
 801120a:	469a      	mov	sl, r3
 801120c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011210:	b10a      	cbz	r2, 8011216 <_vfiprintf_r+0xa2>
 8011212:	2a25      	cmp	r2, #37	; 0x25
 8011214:	d1f9      	bne.n	801120a <_vfiprintf_r+0x96>
 8011216:	ebba 0b04 	subs.w	fp, sl, r4
 801121a:	d00b      	beq.n	8011234 <_vfiprintf_r+0xc0>
 801121c:	465b      	mov	r3, fp
 801121e:	4622      	mov	r2, r4
 8011220:	4629      	mov	r1, r5
 8011222:	4630      	mov	r0, r6
 8011224:	f7ff ff93 	bl	801114e <__sfputs_r>
 8011228:	3001      	adds	r0, #1
 801122a:	f000 80aa 	beq.w	8011382 <_vfiprintf_r+0x20e>
 801122e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011230:	445a      	add	r2, fp
 8011232:	9209      	str	r2, [sp, #36]	; 0x24
 8011234:	f89a 3000 	ldrb.w	r3, [sl]
 8011238:	2b00      	cmp	r3, #0
 801123a:	f000 80a2 	beq.w	8011382 <_vfiprintf_r+0x20e>
 801123e:	2300      	movs	r3, #0
 8011240:	f04f 32ff 	mov.w	r2, #4294967295
 8011244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011248:	f10a 0a01 	add.w	sl, sl, #1
 801124c:	9304      	str	r3, [sp, #16]
 801124e:	9307      	str	r3, [sp, #28]
 8011250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011254:	931a      	str	r3, [sp, #104]	; 0x68
 8011256:	4654      	mov	r4, sl
 8011258:	2205      	movs	r2, #5
 801125a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801125e:	4858      	ldr	r0, [pc, #352]	; (80113c0 <_vfiprintf_r+0x24c>)
 8011260:	f7ef f846 	bl	80002f0 <memchr>
 8011264:	9a04      	ldr	r2, [sp, #16]
 8011266:	b9d8      	cbnz	r0, 80112a0 <_vfiprintf_r+0x12c>
 8011268:	06d1      	lsls	r1, r2, #27
 801126a:	bf44      	itt	mi
 801126c:	2320      	movmi	r3, #32
 801126e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011272:	0713      	lsls	r3, r2, #28
 8011274:	bf44      	itt	mi
 8011276:	232b      	movmi	r3, #43	; 0x2b
 8011278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801127c:	f89a 3000 	ldrb.w	r3, [sl]
 8011280:	2b2a      	cmp	r3, #42	; 0x2a
 8011282:	d015      	beq.n	80112b0 <_vfiprintf_r+0x13c>
 8011284:	9a07      	ldr	r2, [sp, #28]
 8011286:	4654      	mov	r4, sl
 8011288:	2000      	movs	r0, #0
 801128a:	f04f 0c0a 	mov.w	ip, #10
 801128e:	4621      	mov	r1, r4
 8011290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011294:	3b30      	subs	r3, #48	; 0x30
 8011296:	2b09      	cmp	r3, #9
 8011298:	d94e      	bls.n	8011338 <_vfiprintf_r+0x1c4>
 801129a:	b1b0      	cbz	r0, 80112ca <_vfiprintf_r+0x156>
 801129c:	9207      	str	r2, [sp, #28]
 801129e:	e014      	b.n	80112ca <_vfiprintf_r+0x156>
 80112a0:	eba0 0308 	sub.w	r3, r0, r8
 80112a4:	fa09 f303 	lsl.w	r3, r9, r3
 80112a8:	4313      	orrs	r3, r2
 80112aa:	9304      	str	r3, [sp, #16]
 80112ac:	46a2      	mov	sl, r4
 80112ae:	e7d2      	b.n	8011256 <_vfiprintf_r+0xe2>
 80112b0:	9b03      	ldr	r3, [sp, #12]
 80112b2:	1d19      	adds	r1, r3, #4
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	9103      	str	r1, [sp, #12]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	bfbb      	ittet	lt
 80112bc:	425b      	neglt	r3, r3
 80112be:	f042 0202 	orrlt.w	r2, r2, #2
 80112c2:	9307      	strge	r3, [sp, #28]
 80112c4:	9307      	strlt	r3, [sp, #28]
 80112c6:	bfb8      	it	lt
 80112c8:	9204      	strlt	r2, [sp, #16]
 80112ca:	7823      	ldrb	r3, [r4, #0]
 80112cc:	2b2e      	cmp	r3, #46	; 0x2e
 80112ce:	d10c      	bne.n	80112ea <_vfiprintf_r+0x176>
 80112d0:	7863      	ldrb	r3, [r4, #1]
 80112d2:	2b2a      	cmp	r3, #42	; 0x2a
 80112d4:	d135      	bne.n	8011342 <_vfiprintf_r+0x1ce>
 80112d6:	9b03      	ldr	r3, [sp, #12]
 80112d8:	1d1a      	adds	r2, r3, #4
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	9203      	str	r2, [sp, #12]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	bfb8      	it	lt
 80112e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80112e6:	3402      	adds	r4, #2
 80112e8:	9305      	str	r3, [sp, #20]
 80112ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80113d0 <_vfiprintf_r+0x25c>
 80112ee:	7821      	ldrb	r1, [r4, #0]
 80112f0:	2203      	movs	r2, #3
 80112f2:	4650      	mov	r0, sl
 80112f4:	f7ee fffc 	bl	80002f0 <memchr>
 80112f8:	b140      	cbz	r0, 801130c <_vfiprintf_r+0x198>
 80112fa:	2340      	movs	r3, #64	; 0x40
 80112fc:	eba0 000a 	sub.w	r0, r0, sl
 8011300:	fa03 f000 	lsl.w	r0, r3, r0
 8011304:	9b04      	ldr	r3, [sp, #16]
 8011306:	4303      	orrs	r3, r0
 8011308:	3401      	adds	r4, #1
 801130a:	9304      	str	r3, [sp, #16]
 801130c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011310:	482c      	ldr	r0, [pc, #176]	; (80113c4 <_vfiprintf_r+0x250>)
 8011312:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011316:	2206      	movs	r2, #6
 8011318:	f7ee ffea 	bl	80002f0 <memchr>
 801131c:	2800      	cmp	r0, #0
 801131e:	d03f      	beq.n	80113a0 <_vfiprintf_r+0x22c>
 8011320:	4b29      	ldr	r3, [pc, #164]	; (80113c8 <_vfiprintf_r+0x254>)
 8011322:	bb1b      	cbnz	r3, 801136c <_vfiprintf_r+0x1f8>
 8011324:	9b03      	ldr	r3, [sp, #12]
 8011326:	3307      	adds	r3, #7
 8011328:	f023 0307 	bic.w	r3, r3, #7
 801132c:	3308      	adds	r3, #8
 801132e:	9303      	str	r3, [sp, #12]
 8011330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011332:	443b      	add	r3, r7
 8011334:	9309      	str	r3, [sp, #36]	; 0x24
 8011336:	e767      	b.n	8011208 <_vfiprintf_r+0x94>
 8011338:	fb0c 3202 	mla	r2, ip, r2, r3
 801133c:	460c      	mov	r4, r1
 801133e:	2001      	movs	r0, #1
 8011340:	e7a5      	b.n	801128e <_vfiprintf_r+0x11a>
 8011342:	2300      	movs	r3, #0
 8011344:	3401      	adds	r4, #1
 8011346:	9305      	str	r3, [sp, #20]
 8011348:	4619      	mov	r1, r3
 801134a:	f04f 0c0a 	mov.w	ip, #10
 801134e:	4620      	mov	r0, r4
 8011350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011354:	3a30      	subs	r2, #48	; 0x30
 8011356:	2a09      	cmp	r2, #9
 8011358:	d903      	bls.n	8011362 <_vfiprintf_r+0x1ee>
 801135a:	2b00      	cmp	r3, #0
 801135c:	d0c5      	beq.n	80112ea <_vfiprintf_r+0x176>
 801135e:	9105      	str	r1, [sp, #20]
 8011360:	e7c3      	b.n	80112ea <_vfiprintf_r+0x176>
 8011362:	fb0c 2101 	mla	r1, ip, r1, r2
 8011366:	4604      	mov	r4, r0
 8011368:	2301      	movs	r3, #1
 801136a:	e7f0      	b.n	801134e <_vfiprintf_r+0x1da>
 801136c:	ab03      	add	r3, sp, #12
 801136e:	9300      	str	r3, [sp, #0]
 8011370:	462a      	mov	r2, r5
 8011372:	4b16      	ldr	r3, [pc, #88]	; (80113cc <_vfiprintf_r+0x258>)
 8011374:	a904      	add	r1, sp, #16
 8011376:	4630      	mov	r0, r6
 8011378:	f3af 8000 	nop.w
 801137c:	4607      	mov	r7, r0
 801137e:	1c78      	adds	r0, r7, #1
 8011380:	d1d6      	bne.n	8011330 <_vfiprintf_r+0x1bc>
 8011382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011384:	07d9      	lsls	r1, r3, #31
 8011386:	d405      	bmi.n	8011394 <_vfiprintf_r+0x220>
 8011388:	89ab      	ldrh	r3, [r5, #12]
 801138a:	059a      	lsls	r2, r3, #22
 801138c:	d402      	bmi.n	8011394 <_vfiprintf_r+0x220>
 801138e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011390:	f7ff f876 	bl	8010480 <__retarget_lock_release_recursive>
 8011394:	89ab      	ldrh	r3, [r5, #12]
 8011396:	065b      	lsls	r3, r3, #25
 8011398:	f53f af12 	bmi.w	80111c0 <_vfiprintf_r+0x4c>
 801139c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801139e:	e711      	b.n	80111c4 <_vfiprintf_r+0x50>
 80113a0:	ab03      	add	r3, sp, #12
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	462a      	mov	r2, r5
 80113a6:	4b09      	ldr	r3, [pc, #36]	; (80113cc <_vfiprintf_r+0x258>)
 80113a8:	a904      	add	r1, sp, #16
 80113aa:	4630      	mov	r0, r6
 80113ac:	f000 f880 	bl	80114b0 <_printf_i>
 80113b0:	e7e4      	b.n	801137c <_vfiprintf_r+0x208>
 80113b2:	bf00      	nop
 80113b4:	08012138 	.word	0x08012138
 80113b8:	08012158 	.word	0x08012158
 80113bc:	08012118 	.word	0x08012118
 80113c0:	0801235c 	.word	0x0801235c
 80113c4:	08012366 	.word	0x08012366
 80113c8:	00000000 	.word	0x00000000
 80113cc:	0801114f 	.word	0x0801114f
 80113d0:	08012362 	.word	0x08012362

080113d4 <_printf_common>:
 80113d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113d8:	4616      	mov	r6, r2
 80113da:	4699      	mov	r9, r3
 80113dc:	688a      	ldr	r2, [r1, #8]
 80113de:	690b      	ldr	r3, [r1, #16]
 80113e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80113e4:	4293      	cmp	r3, r2
 80113e6:	bfb8      	it	lt
 80113e8:	4613      	movlt	r3, r2
 80113ea:	6033      	str	r3, [r6, #0]
 80113ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80113f0:	4607      	mov	r7, r0
 80113f2:	460c      	mov	r4, r1
 80113f4:	b10a      	cbz	r2, 80113fa <_printf_common+0x26>
 80113f6:	3301      	adds	r3, #1
 80113f8:	6033      	str	r3, [r6, #0]
 80113fa:	6823      	ldr	r3, [r4, #0]
 80113fc:	0699      	lsls	r1, r3, #26
 80113fe:	bf42      	ittt	mi
 8011400:	6833      	ldrmi	r3, [r6, #0]
 8011402:	3302      	addmi	r3, #2
 8011404:	6033      	strmi	r3, [r6, #0]
 8011406:	6825      	ldr	r5, [r4, #0]
 8011408:	f015 0506 	ands.w	r5, r5, #6
 801140c:	d106      	bne.n	801141c <_printf_common+0x48>
 801140e:	f104 0a19 	add.w	sl, r4, #25
 8011412:	68e3      	ldr	r3, [r4, #12]
 8011414:	6832      	ldr	r2, [r6, #0]
 8011416:	1a9b      	subs	r3, r3, r2
 8011418:	42ab      	cmp	r3, r5
 801141a:	dc26      	bgt.n	801146a <_printf_common+0x96>
 801141c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011420:	1e13      	subs	r3, r2, #0
 8011422:	6822      	ldr	r2, [r4, #0]
 8011424:	bf18      	it	ne
 8011426:	2301      	movne	r3, #1
 8011428:	0692      	lsls	r2, r2, #26
 801142a:	d42b      	bmi.n	8011484 <_printf_common+0xb0>
 801142c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011430:	4649      	mov	r1, r9
 8011432:	4638      	mov	r0, r7
 8011434:	47c0      	blx	r8
 8011436:	3001      	adds	r0, #1
 8011438:	d01e      	beq.n	8011478 <_printf_common+0xa4>
 801143a:	6823      	ldr	r3, [r4, #0]
 801143c:	68e5      	ldr	r5, [r4, #12]
 801143e:	6832      	ldr	r2, [r6, #0]
 8011440:	f003 0306 	and.w	r3, r3, #6
 8011444:	2b04      	cmp	r3, #4
 8011446:	bf08      	it	eq
 8011448:	1aad      	subeq	r5, r5, r2
 801144a:	68a3      	ldr	r3, [r4, #8]
 801144c:	6922      	ldr	r2, [r4, #16]
 801144e:	bf0c      	ite	eq
 8011450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011454:	2500      	movne	r5, #0
 8011456:	4293      	cmp	r3, r2
 8011458:	bfc4      	itt	gt
 801145a:	1a9b      	subgt	r3, r3, r2
 801145c:	18ed      	addgt	r5, r5, r3
 801145e:	2600      	movs	r6, #0
 8011460:	341a      	adds	r4, #26
 8011462:	42b5      	cmp	r5, r6
 8011464:	d11a      	bne.n	801149c <_printf_common+0xc8>
 8011466:	2000      	movs	r0, #0
 8011468:	e008      	b.n	801147c <_printf_common+0xa8>
 801146a:	2301      	movs	r3, #1
 801146c:	4652      	mov	r2, sl
 801146e:	4649      	mov	r1, r9
 8011470:	4638      	mov	r0, r7
 8011472:	47c0      	blx	r8
 8011474:	3001      	adds	r0, #1
 8011476:	d103      	bne.n	8011480 <_printf_common+0xac>
 8011478:	f04f 30ff 	mov.w	r0, #4294967295
 801147c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011480:	3501      	adds	r5, #1
 8011482:	e7c6      	b.n	8011412 <_printf_common+0x3e>
 8011484:	18e1      	adds	r1, r4, r3
 8011486:	1c5a      	adds	r2, r3, #1
 8011488:	2030      	movs	r0, #48	; 0x30
 801148a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801148e:	4422      	add	r2, r4
 8011490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011498:	3302      	adds	r3, #2
 801149a:	e7c7      	b.n	801142c <_printf_common+0x58>
 801149c:	2301      	movs	r3, #1
 801149e:	4622      	mov	r2, r4
 80114a0:	4649      	mov	r1, r9
 80114a2:	4638      	mov	r0, r7
 80114a4:	47c0      	blx	r8
 80114a6:	3001      	adds	r0, #1
 80114a8:	d0e6      	beq.n	8011478 <_printf_common+0xa4>
 80114aa:	3601      	adds	r6, #1
 80114ac:	e7d9      	b.n	8011462 <_printf_common+0x8e>
	...

080114b0 <_printf_i>:
 80114b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114b4:	7e0f      	ldrb	r7, [r1, #24]
 80114b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80114b8:	2f78      	cmp	r7, #120	; 0x78
 80114ba:	4691      	mov	r9, r2
 80114bc:	4680      	mov	r8, r0
 80114be:	460c      	mov	r4, r1
 80114c0:	469a      	mov	sl, r3
 80114c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80114c6:	d807      	bhi.n	80114d8 <_printf_i+0x28>
 80114c8:	2f62      	cmp	r7, #98	; 0x62
 80114ca:	d80a      	bhi.n	80114e2 <_printf_i+0x32>
 80114cc:	2f00      	cmp	r7, #0
 80114ce:	f000 80d8 	beq.w	8011682 <_printf_i+0x1d2>
 80114d2:	2f58      	cmp	r7, #88	; 0x58
 80114d4:	f000 80a3 	beq.w	801161e <_printf_i+0x16e>
 80114d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80114e0:	e03a      	b.n	8011558 <_printf_i+0xa8>
 80114e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80114e6:	2b15      	cmp	r3, #21
 80114e8:	d8f6      	bhi.n	80114d8 <_printf_i+0x28>
 80114ea:	a101      	add	r1, pc, #4	; (adr r1, 80114f0 <_printf_i+0x40>)
 80114ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114f0:	08011549 	.word	0x08011549
 80114f4:	0801155d 	.word	0x0801155d
 80114f8:	080114d9 	.word	0x080114d9
 80114fc:	080114d9 	.word	0x080114d9
 8011500:	080114d9 	.word	0x080114d9
 8011504:	080114d9 	.word	0x080114d9
 8011508:	0801155d 	.word	0x0801155d
 801150c:	080114d9 	.word	0x080114d9
 8011510:	080114d9 	.word	0x080114d9
 8011514:	080114d9 	.word	0x080114d9
 8011518:	080114d9 	.word	0x080114d9
 801151c:	08011669 	.word	0x08011669
 8011520:	0801158d 	.word	0x0801158d
 8011524:	0801164b 	.word	0x0801164b
 8011528:	080114d9 	.word	0x080114d9
 801152c:	080114d9 	.word	0x080114d9
 8011530:	0801168b 	.word	0x0801168b
 8011534:	080114d9 	.word	0x080114d9
 8011538:	0801158d 	.word	0x0801158d
 801153c:	080114d9 	.word	0x080114d9
 8011540:	080114d9 	.word	0x080114d9
 8011544:	08011653 	.word	0x08011653
 8011548:	682b      	ldr	r3, [r5, #0]
 801154a:	1d1a      	adds	r2, r3, #4
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	602a      	str	r2, [r5, #0]
 8011550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011558:	2301      	movs	r3, #1
 801155a:	e0a3      	b.n	80116a4 <_printf_i+0x1f4>
 801155c:	6820      	ldr	r0, [r4, #0]
 801155e:	6829      	ldr	r1, [r5, #0]
 8011560:	0606      	lsls	r6, r0, #24
 8011562:	f101 0304 	add.w	r3, r1, #4
 8011566:	d50a      	bpl.n	801157e <_printf_i+0xce>
 8011568:	680e      	ldr	r6, [r1, #0]
 801156a:	602b      	str	r3, [r5, #0]
 801156c:	2e00      	cmp	r6, #0
 801156e:	da03      	bge.n	8011578 <_printf_i+0xc8>
 8011570:	232d      	movs	r3, #45	; 0x2d
 8011572:	4276      	negs	r6, r6
 8011574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011578:	485e      	ldr	r0, [pc, #376]	; (80116f4 <_printf_i+0x244>)
 801157a:	230a      	movs	r3, #10
 801157c:	e019      	b.n	80115b2 <_printf_i+0x102>
 801157e:	680e      	ldr	r6, [r1, #0]
 8011580:	602b      	str	r3, [r5, #0]
 8011582:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011586:	bf18      	it	ne
 8011588:	b236      	sxthne	r6, r6
 801158a:	e7ef      	b.n	801156c <_printf_i+0xbc>
 801158c:	682b      	ldr	r3, [r5, #0]
 801158e:	6820      	ldr	r0, [r4, #0]
 8011590:	1d19      	adds	r1, r3, #4
 8011592:	6029      	str	r1, [r5, #0]
 8011594:	0601      	lsls	r1, r0, #24
 8011596:	d501      	bpl.n	801159c <_printf_i+0xec>
 8011598:	681e      	ldr	r6, [r3, #0]
 801159a:	e002      	b.n	80115a2 <_printf_i+0xf2>
 801159c:	0646      	lsls	r6, r0, #25
 801159e:	d5fb      	bpl.n	8011598 <_printf_i+0xe8>
 80115a0:	881e      	ldrh	r6, [r3, #0]
 80115a2:	4854      	ldr	r0, [pc, #336]	; (80116f4 <_printf_i+0x244>)
 80115a4:	2f6f      	cmp	r7, #111	; 0x6f
 80115a6:	bf0c      	ite	eq
 80115a8:	2308      	moveq	r3, #8
 80115aa:	230a      	movne	r3, #10
 80115ac:	2100      	movs	r1, #0
 80115ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80115b2:	6865      	ldr	r5, [r4, #4]
 80115b4:	60a5      	str	r5, [r4, #8]
 80115b6:	2d00      	cmp	r5, #0
 80115b8:	bfa2      	ittt	ge
 80115ba:	6821      	ldrge	r1, [r4, #0]
 80115bc:	f021 0104 	bicge.w	r1, r1, #4
 80115c0:	6021      	strge	r1, [r4, #0]
 80115c2:	b90e      	cbnz	r6, 80115c8 <_printf_i+0x118>
 80115c4:	2d00      	cmp	r5, #0
 80115c6:	d04d      	beq.n	8011664 <_printf_i+0x1b4>
 80115c8:	4615      	mov	r5, r2
 80115ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80115ce:	fb03 6711 	mls	r7, r3, r1, r6
 80115d2:	5dc7      	ldrb	r7, [r0, r7]
 80115d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80115d8:	4637      	mov	r7, r6
 80115da:	42bb      	cmp	r3, r7
 80115dc:	460e      	mov	r6, r1
 80115de:	d9f4      	bls.n	80115ca <_printf_i+0x11a>
 80115e0:	2b08      	cmp	r3, #8
 80115e2:	d10b      	bne.n	80115fc <_printf_i+0x14c>
 80115e4:	6823      	ldr	r3, [r4, #0]
 80115e6:	07de      	lsls	r6, r3, #31
 80115e8:	d508      	bpl.n	80115fc <_printf_i+0x14c>
 80115ea:	6923      	ldr	r3, [r4, #16]
 80115ec:	6861      	ldr	r1, [r4, #4]
 80115ee:	4299      	cmp	r1, r3
 80115f0:	bfde      	ittt	le
 80115f2:	2330      	movle	r3, #48	; 0x30
 80115f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80115f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80115fc:	1b52      	subs	r2, r2, r5
 80115fe:	6122      	str	r2, [r4, #16]
 8011600:	f8cd a000 	str.w	sl, [sp]
 8011604:	464b      	mov	r3, r9
 8011606:	aa03      	add	r2, sp, #12
 8011608:	4621      	mov	r1, r4
 801160a:	4640      	mov	r0, r8
 801160c:	f7ff fee2 	bl	80113d4 <_printf_common>
 8011610:	3001      	adds	r0, #1
 8011612:	d14c      	bne.n	80116ae <_printf_i+0x1fe>
 8011614:	f04f 30ff 	mov.w	r0, #4294967295
 8011618:	b004      	add	sp, #16
 801161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801161e:	4835      	ldr	r0, [pc, #212]	; (80116f4 <_printf_i+0x244>)
 8011620:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011624:	6829      	ldr	r1, [r5, #0]
 8011626:	6823      	ldr	r3, [r4, #0]
 8011628:	f851 6b04 	ldr.w	r6, [r1], #4
 801162c:	6029      	str	r1, [r5, #0]
 801162e:	061d      	lsls	r5, r3, #24
 8011630:	d514      	bpl.n	801165c <_printf_i+0x1ac>
 8011632:	07df      	lsls	r7, r3, #31
 8011634:	bf44      	itt	mi
 8011636:	f043 0320 	orrmi.w	r3, r3, #32
 801163a:	6023      	strmi	r3, [r4, #0]
 801163c:	b91e      	cbnz	r6, 8011646 <_printf_i+0x196>
 801163e:	6823      	ldr	r3, [r4, #0]
 8011640:	f023 0320 	bic.w	r3, r3, #32
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	2310      	movs	r3, #16
 8011648:	e7b0      	b.n	80115ac <_printf_i+0xfc>
 801164a:	6823      	ldr	r3, [r4, #0]
 801164c:	f043 0320 	orr.w	r3, r3, #32
 8011650:	6023      	str	r3, [r4, #0]
 8011652:	2378      	movs	r3, #120	; 0x78
 8011654:	4828      	ldr	r0, [pc, #160]	; (80116f8 <_printf_i+0x248>)
 8011656:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801165a:	e7e3      	b.n	8011624 <_printf_i+0x174>
 801165c:	0659      	lsls	r1, r3, #25
 801165e:	bf48      	it	mi
 8011660:	b2b6      	uxthmi	r6, r6
 8011662:	e7e6      	b.n	8011632 <_printf_i+0x182>
 8011664:	4615      	mov	r5, r2
 8011666:	e7bb      	b.n	80115e0 <_printf_i+0x130>
 8011668:	682b      	ldr	r3, [r5, #0]
 801166a:	6826      	ldr	r6, [r4, #0]
 801166c:	6961      	ldr	r1, [r4, #20]
 801166e:	1d18      	adds	r0, r3, #4
 8011670:	6028      	str	r0, [r5, #0]
 8011672:	0635      	lsls	r5, r6, #24
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	d501      	bpl.n	801167c <_printf_i+0x1cc>
 8011678:	6019      	str	r1, [r3, #0]
 801167a:	e002      	b.n	8011682 <_printf_i+0x1d2>
 801167c:	0670      	lsls	r0, r6, #25
 801167e:	d5fb      	bpl.n	8011678 <_printf_i+0x1c8>
 8011680:	8019      	strh	r1, [r3, #0]
 8011682:	2300      	movs	r3, #0
 8011684:	6123      	str	r3, [r4, #16]
 8011686:	4615      	mov	r5, r2
 8011688:	e7ba      	b.n	8011600 <_printf_i+0x150>
 801168a:	682b      	ldr	r3, [r5, #0]
 801168c:	1d1a      	adds	r2, r3, #4
 801168e:	602a      	str	r2, [r5, #0]
 8011690:	681d      	ldr	r5, [r3, #0]
 8011692:	6862      	ldr	r2, [r4, #4]
 8011694:	2100      	movs	r1, #0
 8011696:	4628      	mov	r0, r5
 8011698:	f7ee fe2a 	bl	80002f0 <memchr>
 801169c:	b108      	cbz	r0, 80116a2 <_printf_i+0x1f2>
 801169e:	1b40      	subs	r0, r0, r5
 80116a0:	6060      	str	r0, [r4, #4]
 80116a2:	6863      	ldr	r3, [r4, #4]
 80116a4:	6123      	str	r3, [r4, #16]
 80116a6:	2300      	movs	r3, #0
 80116a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116ac:	e7a8      	b.n	8011600 <_printf_i+0x150>
 80116ae:	6923      	ldr	r3, [r4, #16]
 80116b0:	462a      	mov	r2, r5
 80116b2:	4649      	mov	r1, r9
 80116b4:	4640      	mov	r0, r8
 80116b6:	47d0      	blx	sl
 80116b8:	3001      	adds	r0, #1
 80116ba:	d0ab      	beq.n	8011614 <_printf_i+0x164>
 80116bc:	6823      	ldr	r3, [r4, #0]
 80116be:	079b      	lsls	r3, r3, #30
 80116c0:	d413      	bmi.n	80116ea <_printf_i+0x23a>
 80116c2:	68e0      	ldr	r0, [r4, #12]
 80116c4:	9b03      	ldr	r3, [sp, #12]
 80116c6:	4298      	cmp	r0, r3
 80116c8:	bfb8      	it	lt
 80116ca:	4618      	movlt	r0, r3
 80116cc:	e7a4      	b.n	8011618 <_printf_i+0x168>
 80116ce:	2301      	movs	r3, #1
 80116d0:	4632      	mov	r2, r6
 80116d2:	4649      	mov	r1, r9
 80116d4:	4640      	mov	r0, r8
 80116d6:	47d0      	blx	sl
 80116d8:	3001      	adds	r0, #1
 80116da:	d09b      	beq.n	8011614 <_printf_i+0x164>
 80116dc:	3501      	adds	r5, #1
 80116de:	68e3      	ldr	r3, [r4, #12]
 80116e0:	9903      	ldr	r1, [sp, #12]
 80116e2:	1a5b      	subs	r3, r3, r1
 80116e4:	42ab      	cmp	r3, r5
 80116e6:	dcf2      	bgt.n	80116ce <_printf_i+0x21e>
 80116e8:	e7eb      	b.n	80116c2 <_printf_i+0x212>
 80116ea:	2500      	movs	r5, #0
 80116ec:	f104 0619 	add.w	r6, r4, #25
 80116f0:	e7f5      	b.n	80116de <_printf_i+0x22e>
 80116f2:	bf00      	nop
 80116f4:	0801236d 	.word	0x0801236d
 80116f8:	0801237e 	.word	0x0801237e
 80116fc:	00000000 	.word	0x00000000

08011700 <nan>:
 8011700:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011708 <nan+0x8>
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop
 8011708:	00000000 	.word	0x00000000
 801170c:	7ff80000 	.word	0x7ff80000

08011710 <__sread>:
 8011710:	b510      	push	{r4, lr}
 8011712:	460c      	mov	r4, r1
 8011714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011718:	f000 face 	bl	8011cb8 <_read_r>
 801171c:	2800      	cmp	r0, #0
 801171e:	bfab      	itete	ge
 8011720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011722:	89a3      	ldrhlt	r3, [r4, #12]
 8011724:	181b      	addge	r3, r3, r0
 8011726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801172a:	bfac      	ite	ge
 801172c:	6563      	strge	r3, [r4, #84]	; 0x54
 801172e:	81a3      	strhlt	r3, [r4, #12]
 8011730:	bd10      	pop	{r4, pc}

08011732 <__swrite>:
 8011732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011736:	461f      	mov	r7, r3
 8011738:	898b      	ldrh	r3, [r1, #12]
 801173a:	05db      	lsls	r3, r3, #23
 801173c:	4605      	mov	r5, r0
 801173e:	460c      	mov	r4, r1
 8011740:	4616      	mov	r6, r2
 8011742:	d505      	bpl.n	8011750 <__swrite+0x1e>
 8011744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011748:	2302      	movs	r3, #2
 801174a:	2200      	movs	r2, #0
 801174c:	f000 f9f2 	bl	8011b34 <_lseek_r>
 8011750:	89a3      	ldrh	r3, [r4, #12]
 8011752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801175a:	81a3      	strh	r3, [r4, #12]
 801175c:	4632      	mov	r2, r6
 801175e:	463b      	mov	r3, r7
 8011760:	4628      	mov	r0, r5
 8011762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011766:	f000 b88b 	b.w	8011880 <_write_r>

0801176a <__sseek>:
 801176a:	b510      	push	{r4, lr}
 801176c:	460c      	mov	r4, r1
 801176e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011772:	f000 f9df 	bl	8011b34 <_lseek_r>
 8011776:	1c43      	adds	r3, r0, #1
 8011778:	89a3      	ldrh	r3, [r4, #12]
 801177a:	bf15      	itete	ne
 801177c:	6560      	strne	r0, [r4, #84]	; 0x54
 801177e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011786:	81a3      	strheq	r3, [r4, #12]
 8011788:	bf18      	it	ne
 801178a:	81a3      	strhne	r3, [r4, #12]
 801178c:	bd10      	pop	{r4, pc}

0801178e <__sclose>:
 801178e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011792:	f000 b8fd 	b.w	8011990 <_close_r>

08011796 <strncmp>:
 8011796:	b510      	push	{r4, lr}
 8011798:	b17a      	cbz	r2, 80117ba <strncmp+0x24>
 801179a:	4603      	mov	r3, r0
 801179c:	3901      	subs	r1, #1
 801179e:	1884      	adds	r4, r0, r2
 80117a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80117a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80117a8:	4290      	cmp	r0, r2
 80117aa:	d101      	bne.n	80117b0 <strncmp+0x1a>
 80117ac:	42a3      	cmp	r3, r4
 80117ae:	d101      	bne.n	80117b4 <strncmp+0x1e>
 80117b0:	1a80      	subs	r0, r0, r2
 80117b2:	bd10      	pop	{r4, pc}
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d1f3      	bne.n	80117a0 <strncmp+0xa>
 80117b8:	e7fa      	b.n	80117b0 <strncmp+0x1a>
 80117ba:	4610      	mov	r0, r2
 80117bc:	e7f9      	b.n	80117b2 <strncmp+0x1c>
	...

080117c0 <__swbuf_r>:
 80117c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117c2:	460e      	mov	r6, r1
 80117c4:	4614      	mov	r4, r2
 80117c6:	4605      	mov	r5, r0
 80117c8:	b118      	cbz	r0, 80117d2 <__swbuf_r+0x12>
 80117ca:	6983      	ldr	r3, [r0, #24]
 80117cc:	b90b      	cbnz	r3, 80117d2 <__swbuf_r+0x12>
 80117ce:	f7fe fa37 	bl	800fc40 <__sinit>
 80117d2:	4b21      	ldr	r3, [pc, #132]	; (8011858 <__swbuf_r+0x98>)
 80117d4:	429c      	cmp	r4, r3
 80117d6:	d12b      	bne.n	8011830 <__swbuf_r+0x70>
 80117d8:	686c      	ldr	r4, [r5, #4]
 80117da:	69a3      	ldr	r3, [r4, #24]
 80117dc:	60a3      	str	r3, [r4, #8]
 80117de:	89a3      	ldrh	r3, [r4, #12]
 80117e0:	071a      	lsls	r2, r3, #28
 80117e2:	d52f      	bpl.n	8011844 <__swbuf_r+0x84>
 80117e4:	6923      	ldr	r3, [r4, #16]
 80117e6:	b36b      	cbz	r3, 8011844 <__swbuf_r+0x84>
 80117e8:	6923      	ldr	r3, [r4, #16]
 80117ea:	6820      	ldr	r0, [r4, #0]
 80117ec:	1ac0      	subs	r0, r0, r3
 80117ee:	6963      	ldr	r3, [r4, #20]
 80117f0:	b2f6      	uxtb	r6, r6
 80117f2:	4283      	cmp	r3, r0
 80117f4:	4637      	mov	r7, r6
 80117f6:	dc04      	bgt.n	8011802 <__swbuf_r+0x42>
 80117f8:	4621      	mov	r1, r4
 80117fa:	4628      	mov	r0, r5
 80117fc:	f000 f95e 	bl	8011abc <_fflush_r>
 8011800:	bb30      	cbnz	r0, 8011850 <__swbuf_r+0x90>
 8011802:	68a3      	ldr	r3, [r4, #8]
 8011804:	3b01      	subs	r3, #1
 8011806:	60a3      	str	r3, [r4, #8]
 8011808:	6823      	ldr	r3, [r4, #0]
 801180a:	1c5a      	adds	r2, r3, #1
 801180c:	6022      	str	r2, [r4, #0]
 801180e:	701e      	strb	r6, [r3, #0]
 8011810:	6963      	ldr	r3, [r4, #20]
 8011812:	3001      	adds	r0, #1
 8011814:	4283      	cmp	r3, r0
 8011816:	d004      	beq.n	8011822 <__swbuf_r+0x62>
 8011818:	89a3      	ldrh	r3, [r4, #12]
 801181a:	07db      	lsls	r3, r3, #31
 801181c:	d506      	bpl.n	801182c <__swbuf_r+0x6c>
 801181e:	2e0a      	cmp	r6, #10
 8011820:	d104      	bne.n	801182c <__swbuf_r+0x6c>
 8011822:	4621      	mov	r1, r4
 8011824:	4628      	mov	r0, r5
 8011826:	f000 f949 	bl	8011abc <_fflush_r>
 801182a:	b988      	cbnz	r0, 8011850 <__swbuf_r+0x90>
 801182c:	4638      	mov	r0, r7
 801182e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011830:	4b0a      	ldr	r3, [pc, #40]	; (801185c <__swbuf_r+0x9c>)
 8011832:	429c      	cmp	r4, r3
 8011834:	d101      	bne.n	801183a <__swbuf_r+0x7a>
 8011836:	68ac      	ldr	r4, [r5, #8]
 8011838:	e7cf      	b.n	80117da <__swbuf_r+0x1a>
 801183a:	4b09      	ldr	r3, [pc, #36]	; (8011860 <__swbuf_r+0xa0>)
 801183c:	429c      	cmp	r4, r3
 801183e:	bf08      	it	eq
 8011840:	68ec      	ldreq	r4, [r5, #12]
 8011842:	e7ca      	b.n	80117da <__swbuf_r+0x1a>
 8011844:	4621      	mov	r1, r4
 8011846:	4628      	mov	r0, r5
 8011848:	f000 f82c 	bl	80118a4 <__swsetup_r>
 801184c:	2800      	cmp	r0, #0
 801184e:	d0cb      	beq.n	80117e8 <__swbuf_r+0x28>
 8011850:	f04f 37ff 	mov.w	r7, #4294967295
 8011854:	e7ea      	b.n	801182c <__swbuf_r+0x6c>
 8011856:	bf00      	nop
 8011858:	08012138 	.word	0x08012138
 801185c:	08012158 	.word	0x08012158
 8011860:	08012118 	.word	0x08012118

08011864 <__ascii_wctomb>:
 8011864:	b149      	cbz	r1, 801187a <__ascii_wctomb+0x16>
 8011866:	2aff      	cmp	r2, #255	; 0xff
 8011868:	bf85      	ittet	hi
 801186a:	238a      	movhi	r3, #138	; 0x8a
 801186c:	6003      	strhi	r3, [r0, #0]
 801186e:	700a      	strbls	r2, [r1, #0]
 8011870:	f04f 30ff 	movhi.w	r0, #4294967295
 8011874:	bf98      	it	ls
 8011876:	2001      	movls	r0, #1
 8011878:	4770      	bx	lr
 801187a:	4608      	mov	r0, r1
 801187c:	4770      	bx	lr
	...

08011880 <_write_r>:
 8011880:	b538      	push	{r3, r4, r5, lr}
 8011882:	4d07      	ldr	r5, [pc, #28]	; (80118a0 <_write_r+0x20>)
 8011884:	4604      	mov	r4, r0
 8011886:	4608      	mov	r0, r1
 8011888:	4611      	mov	r1, r2
 801188a:	2200      	movs	r2, #0
 801188c:	602a      	str	r2, [r5, #0]
 801188e:	461a      	mov	r2, r3
 8011890:	f7f1 fc61 	bl	8003156 <_write>
 8011894:	1c43      	adds	r3, r0, #1
 8011896:	d102      	bne.n	801189e <_write_r+0x1e>
 8011898:	682b      	ldr	r3, [r5, #0]
 801189a:	b103      	cbz	r3, 801189e <_write_r+0x1e>
 801189c:	6023      	str	r3, [r4, #0]
 801189e:	bd38      	pop	{r3, r4, r5, pc}
 80118a0:	24006578 	.word	0x24006578

080118a4 <__swsetup_r>:
 80118a4:	4b32      	ldr	r3, [pc, #200]	; (8011970 <__swsetup_r+0xcc>)
 80118a6:	b570      	push	{r4, r5, r6, lr}
 80118a8:	681d      	ldr	r5, [r3, #0]
 80118aa:	4606      	mov	r6, r0
 80118ac:	460c      	mov	r4, r1
 80118ae:	b125      	cbz	r5, 80118ba <__swsetup_r+0x16>
 80118b0:	69ab      	ldr	r3, [r5, #24]
 80118b2:	b913      	cbnz	r3, 80118ba <__swsetup_r+0x16>
 80118b4:	4628      	mov	r0, r5
 80118b6:	f7fe f9c3 	bl	800fc40 <__sinit>
 80118ba:	4b2e      	ldr	r3, [pc, #184]	; (8011974 <__swsetup_r+0xd0>)
 80118bc:	429c      	cmp	r4, r3
 80118be:	d10f      	bne.n	80118e0 <__swsetup_r+0x3c>
 80118c0:	686c      	ldr	r4, [r5, #4]
 80118c2:	89a3      	ldrh	r3, [r4, #12]
 80118c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118c8:	0719      	lsls	r1, r3, #28
 80118ca:	d42c      	bmi.n	8011926 <__swsetup_r+0x82>
 80118cc:	06dd      	lsls	r5, r3, #27
 80118ce:	d411      	bmi.n	80118f4 <__swsetup_r+0x50>
 80118d0:	2309      	movs	r3, #9
 80118d2:	6033      	str	r3, [r6, #0]
 80118d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80118d8:	81a3      	strh	r3, [r4, #12]
 80118da:	f04f 30ff 	mov.w	r0, #4294967295
 80118de:	e03e      	b.n	801195e <__swsetup_r+0xba>
 80118e0:	4b25      	ldr	r3, [pc, #148]	; (8011978 <__swsetup_r+0xd4>)
 80118e2:	429c      	cmp	r4, r3
 80118e4:	d101      	bne.n	80118ea <__swsetup_r+0x46>
 80118e6:	68ac      	ldr	r4, [r5, #8]
 80118e8:	e7eb      	b.n	80118c2 <__swsetup_r+0x1e>
 80118ea:	4b24      	ldr	r3, [pc, #144]	; (801197c <__swsetup_r+0xd8>)
 80118ec:	429c      	cmp	r4, r3
 80118ee:	bf08      	it	eq
 80118f0:	68ec      	ldreq	r4, [r5, #12]
 80118f2:	e7e6      	b.n	80118c2 <__swsetup_r+0x1e>
 80118f4:	0758      	lsls	r0, r3, #29
 80118f6:	d512      	bpl.n	801191e <__swsetup_r+0x7a>
 80118f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118fa:	b141      	cbz	r1, 801190e <__swsetup_r+0x6a>
 80118fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011900:	4299      	cmp	r1, r3
 8011902:	d002      	beq.n	801190a <__swsetup_r+0x66>
 8011904:	4630      	mov	r0, r6
 8011906:	f7fd f983 	bl	800ec10 <_free_r>
 801190a:	2300      	movs	r3, #0
 801190c:	6363      	str	r3, [r4, #52]	; 0x34
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011914:	81a3      	strh	r3, [r4, #12]
 8011916:	2300      	movs	r3, #0
 8011918:	6063      	str	r3, [r4, #4]
 801191a:	6923      	ldr	r3, [r4, #16]
 801191c:	6023      	str	r3, [r4, #0]
 801191e:	89a3      	ldrh	r3, [r4, #12]
 8011920:	f043 0308 	orr.w	r3, r3, #8
 8011924:	81a3      	strh	r3, [r4, #12]
 8011926:	6923      	ldr	r3, [r4, #16]
 8011928:	b94b      	cbnz	r3, 801193e <__swsetup_r+0x9a>
 801192a:	89a3      	ldrh	r3, [r4, #12]
 801192c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011934:	d003      	beq.n	801193e <__swsetup_r+0x9a>
 8011936:	4621      	mov	r1, r4
 8011938:	4630      	mov	r0, r6
 801193a:	f000 f933 	bl	8011ba4 <__smakebuf_r>
 801193e:	89a0      	ldrh	r0, [r4, #12]
 8011940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011944:	f010 0301 	ands.w	r3, r0, #1
 8011948:	d00a      	beq.n	8011960 <__swsetup_r+0xbc>
 801194a:	2300      	movs	r3, #0
 801194c:	60a3      	str	r3, [r4, #8]
 801194e:	6963      	ldr	r3, [r4, #20]
 8011950:	425b      	negs	r3, r3
 8011952:	61a3      	str	r3, [r4, #24]
 8011954:	6923      	ldr	r3, [r4, #16]
 8011956:	b943      	cbnz	r3, 801196a <__swsetup_r+0xc6>
 8011958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801195c:	d1ba      	bne.n	80118d4 <__swsetup_r+0x30>
 801195e:	bd70      	pop	{r4, r5, r6, pc}
 8011960:	0781      	lsls	r1, r0, #30
 8011962:	bf58      	it	pl
 8011964:	6963      	ldrpl	r3, [r4, #20]
 8011966:	60a3      	str	r3, [r4, #8]
 8011968:	e7f4      	b.n	8011954 <__swsetup_r+0xb0>
 801196a:	2000      	movs	r0, #0
 801196c:	e7f7      	b.n	801195e <__swsetup_r+0xba>
 801196e:	bf00      	nop
 8011970:	24003a2c 	.word	0x24003a2c
 8011974:	08012138 	.word	0x08012138
 8011978:	08012158 	.word	0x08012158
 801197c:	08012118 	.word	0x08012118

08011980 <abort>:
 8011980:	b508      	push	{r3, lr}
 8011982:	2006      	movs	r0, #6
 8011984:	f000 f9d2 	bl	8011d2c <raise>
 8011988:	2001      	movs	r0, #1
 801198a:	f7f1 fbbd 	bl	8003108 <_exit>
	...

08011990 <_close_r>:
 8011990:	b538      	push	{r3, r4, r5, lr}
 8011992:	4d06      	ldr	r5, [pc, #24]	; (80119ac <_close_r+0x1c>)
 8011994:	2300      	movs	r3, #0
 8011996:	4604      	mov	r4, r0
 8011998:	4608      	mov	r0, r1
 801199a:	602b      	str	r3, [r5, #0]
 801199c:	f7f1 fbf7 	bl	800318e <_close>
 80119a0:	1c43      	adds	r3, r0, #1
 80119a2:	d102      	bne.n	80119aa <_close_r+0x1a>
 80119a4:	682b      	ldr	r3, [r5, #0]
 80119a6:	b103      	cbz	r3, 80119aa <_close_r+0x1a>
 80119a8:	6023      	str	r3, [r4, #0]
 80119aa:	bd38      	pop	{r3, r4, r5, pc}
 80119ac:	24006578 	.word	0x24006578

080119b0 <__sflush_r>:
 80119b0:	898a      	ldrh	r2, [r1, #12]
 80119b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b6:	4605      	mov	r5, r0
 80119b8:	0710      	lsls	r0, r2, #28
 80119ba:	460c      	mov	r4, r1
 80119bc:	d458      	bmi.n	8011a70 <__sflush_r+0xc0>
 80119be:	684b      	ldr	r3, [r1, #4]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	dc05      	bgt.n	80119d0 <__sflush_r+0x20>
 80119c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	dc02      	bgt.n	80119d0 <__sflush_r+0x20>
 80119ca:	2000      	movs	r0, #0
 80119cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119d2:	2e00      	cmp	r6, #0
 80119d4:	d0f9      	beq.n	80119ca <__sflush_r+0x1a>
 80119d6:	2300      	movs	r3, #0
 80119d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119dc:	682f      	ldr	r7, [r5, #0]
 80119de:	602b      	str	r3, [r5, #0]
 80119e0:	d032      	beq.n	8011a48 <__sflush_r+0x98>
 80119e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119e4:	89a3      	ldrh	r3, [r4, #12]
 80119e6:	075a      	lsls	r2, r3, #29
 80119e8:	d505      	bpl.n	80119f6 <__sflush_r+0x46>
 80119ea:	6863      	ldr	r3, [r4, #4]
 80119ec:	1ac0      	subs	r0, r0, r3
 80119ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119f0:	b10b      	cbz	r3, 80119f6 <__sflush_r+0x46>
 80119f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119f4:	1ac0      	subs	r0, r0, r3
 80119f6:	2300      	movs	r3, #0
 80119f8:	4602      	mov	r2, r0
 80119fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119fc:	6a21      	ldr	r1, [r4, #32]
 80119fe:	4628      	mov	r0, r5
 8011a00:	47b0      	blx	r6
 8011a02:	1c43      	adds	r3, r0, #1
 8011a04:	89a3      	ldrh	r3, [r4, #12]
 8011a06:	d106      	bne.n	8011a16 <__sflush_r+0x66>
 8011a08:	6829      	ldr	r1, [r5, #0]
 8011a0a:	291d      	cmp	r1, #29
 8011a0c:	d82c      	bhi.n	8011a68 <__sflush_r+0xb8>
 8011a0e:	4a2a      	ldr	r2, [pc, #168]	; (8011ab8 <__sflush_r+0x108>)
 8011a10:	40ca      	lsrs	r2, r1
 8011a12:	07d6      	lsls	r6, r2, #31
 8011a14:	d528      	bpl.n	8011a68 <__sflush_r+0xb8>
 8011a16:	2200      	movs	r2, #0
 8011a18:	6062      	str	r2, [r4, #4]
 8011a1a:	04d9      	lsls	r1, r3, #19
 8011a1c:	6922      	ldr	r2, [r4, #16]
 8011a1e:	6022      	str	r2, [r4, #0]
 8011a20:	d504      	bpl.n	8011a2c <__sflush_r+0x7c>
 8011a22:	1c42      	adds	r2, r0, #1
 8011a24:	d101      	bne.n	8011a2a <__sflush_r+0x7a>
 8011a26:	682b      	ldr	r3, [r5, #0]
 8011a28:	b903      	cbnz	r3, 8011a2c <__sflush_r+0x7c>
 8011a2a:	6560      	str	r0, [r4, #84]	; 0x54
 8011a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a2e:	602f      	str	r7, [r5, #0]
 8011a30:	2900      	cmp	r1, #0
 8011a32:	d0ca      	beq.n	80119ca <__sflush_r+0x1a>
 8011a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a38:	4299      	cmp	r1, r3
 8011a3a:	d002      	beq.n	8011a42 <__sflush_r+0x92>
 8011a3c:	4628      	mov	r0, r5
 8011a3e:	f7fd f8e7 	bl	800ec10 <_free_r>
 8011a42:	2000      	movs	r0, #0
 8011a44:	6360      	str	r0, [r4, #52]	; 0x34
 8011a46:	e7c1      	b.n	80119cc <__sflush_r+0x1c>
 8011a48:	6a21      	ldr	r1, [r4, #32]
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	47b0      	blx	r6
 8011a50:	1c41      	adds	r1, r0, #1
 8011a52:	d1c7      	bne.n	80119e4 <__sflush_r+0x34>
 8011a54:	682b      	ldr	r3, [r5, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d0c4      	beq.n	80119e4 <__sflush_r+0x34>
 8011a5a:	2b1d      	cmp	r3, #29
 8011a5c:	d001      	beq.n	8011a62 <__sflush_r+0xb2>
 8011a5e:	2b16      	cmp	r3, #22
 8011a60:	d101      	bne.n	8011a66 <__sflush_r+0xb6>
 8011a62:	602f      	str	r7, [r5, #0]
 8011a64:	e7b1      	b.n	80119ca <__sflush_r+0x1a>
 8011a66:	89a3      	ldrh	r3, [r4, #12]
 8011a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a6c:	81a3      	strh	r3, [r4, #12]
 8011a6e:	e7ad      	b.n	80119cc <__sflush_r+0x1c>
 8011a70:	690f      	ldr	r7, [r1, #16]
 8011a72:	2f00      	cmp	r7, #0
 8011a74:	d0a9      	beq.n	80119ca <__sflush_r+0x1a>
 8011a76:	0793      	lsls	r3, r2, #30
 8011a78:	680e      	ldr	r6, [r1, #0]
 8011a7a:	bf08      	it	eq
 8011a7c:	694b      	ldreq	r3, [r1, #20]
 8011a7e:	600f      	str	r7, [r1, #0]
 8011a80:	bf18      	it	ne
 8011a82:	2300      	movne	r3, #0
 8011a84:	eba6 0807 	sub.w	r8, r6, r7
 8011a88:	608b      	str	r3, [r1, #8]
 8011a8a:	f1b8 0f00 	cmp.w	r8, #0
 8011a8e:	dd9c      	ble.n	80119ca <__sflush_r+0x1a>
 8011a90:	6a21      	ldr	r1, [r4, #32]
 8011a92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a94:	4643      	mov	r3, r8
 8011a96:	463a      	mov	r2, r7
 8011a98:	4628      	mov	r0, r5
 8011a9a:	47b0      	blx	r6
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	dc06      	bgt.n	8011aae <__sflush_r+0xfe>
 8011aa0:	89a3      	ldrh	r3, [r4, #12]
 8011aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aa6:	81a3      	strh	r3, [r4, #12]
 8011aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8011aac:	e78e      	b.n	80119cc <__sflush_r+0x1c>
 8011aae:	4407      	add	r7, r0
 8011ab0:	eba8 0800 	sub.w	r8, r8, r0
 8011ab4:	e7e9      	b.n	8011a8a <__sflush_r+0xda>
 8011ab6:	bf00      	nop
 8011ab8:	20400001 	.word	0x20400001

08011abc <_fflush_r>:
 8011abc:	b538      	push	{r3, r4, r5, lr}
 8011abe:	690b      	ldr	r3, [r1, #16]
 8011ac0:	4605      	mov	r5, r0
 8011ac2:	460c      	mov	r4, r1
 8011ac4:	b913      	cbnz	r3, 8011acc <_fflush_r+0x10>
 8011ac6:	2500      	movs	r5, #0
 8011ac8:	4628      	mov	r0, r5
 8011aca:	bd38      	pop	{r3, r4, r5, pc}
 8011acc:	b118      	cbz	r0, 8011ad6 <_fflush_r+0x1a>
 8011ace:	6983      	ldr	r3, [r0, #24]
 8011ad0:	b90b      	cbnz	r3, 8011ad6 <_fflush_r+0x1a>
 8011ad2:	f7fe f8b5 	bl	800fc40 <__sinit>
 8011ad6:	4b14      	ldr	r3, [pc, #80]	; (8011b28 <_fflush_r+0x6c>)
 8011ad8:	429c      	cmp	r4, r3
 8011ada:	d11b      	bne.n	8011b14 <_fflush_r+0x58>
 8011adc:	686c      	ldr	r4, [r5, #4]
 8011ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d0ef      	beq.n	8011ac6 <_fflush_r+0xa>
 8011ae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ae8:	07d0      	lsls	r0, r2, #31
 8011aea:	d404      	bmi.n	8011af6 <_fflush_r+0x3a>
 8011aec:	0599      	lsls	r1, r3, #22
 8011aee:	d402      	bmi.n	8011af6 <_fflush_r+0x3a>
 8011af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011af2:	f7fe fcc4 	bl	801047e <__retarget_lock_acquire_recursive>
 8011af6:	4628      	mov	r0, r5
 8011af8:	4621      	mov	r1, r4
 8011afa:	f7ff ff59 	bl	80119b0 <__sflush_r>
 8011afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b00:	07da      	lsls	r2, r3, #31
 8011b02:	4605      	mov	r5, r0
 8011b04:	d4e0      	bmi.n	8011ac8 <_fflush_r+0xc>
 8011b06:	89a3      	ldrh	r3, [r4, #12]
 8011b08:	059b      	lsls	r3, r3, #22
 8011b0a:	d4dd      	bmi.n	8011ac8 <_fflush_r+0xc>
 8011b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b0e:	f7fe fcb7 	bl	8010480 <__retarget_lock_release_recursive>
 8011b12:	e7d9      	b.n	8011ac8 <_fflush_r+0xc>
 8011b14:	4b05      	ldr	r3, [pc, #20]	; (8011b2c <_fflush_r+0x70>)
 8011b16:	429c      	cmp	r4, r3
 8011b18:	d101      	bne.n	8011b1e <_fflush_r+0x62>
 8011b1a:	68ac      	ldr	r4, [r5, #8]
 8011b1c:	e7df      	b.n	8011ade <_fflush_r+0x22>
 8011b1e:	4b04      	ldr	r3, [pc, #16]	; (8011b30 <_fflush_r+0x74>)
 8011b20:	429c      	cmp	r4, r3
 8011b22:	bf08      	it	eq
 8011b24:	68ec      	ldreq	r4, [r5, #12]
 8011b26:	e7da      	b.n	8011ade <_fflush_r+0x22>
 8011b28:	08012138 	.word	0x08012138
 8011b2c:	08012158 	.word	0x08012158
 8011b30:	08012118 	.word	0x08012118

08011b34 <_lseek_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4d07      	ldr	r5, [pc, #28]	; (8011b54 <_lseek_r+0x20>)
 8011b38:	4604      	mov	r4, r0
 8011b3a:	4608      	mov	r0, r1
 8011b3c:	4611      	mov	r1, r2
 8011b3e:	2200      	movs	r2, #0
 8011b40:	602a      	str	r2, [r5, #0]
 8011b42:	461a      	mov	r2, r3
 8011b44:	f7f1 fb4a 	bl	80031dc <_lseek>
 8011b48:	1c43      	adds	r3, r0, #1
 8011b4a:	d102      	bne.n	8011b52 <_lseek_r+0x1e>
 8011b4c:	682b      	ldr	r3, [r5, #0]
 8011b4e:	b103      	cbz	r3, 8011b52 <_lseek_r+0x1e>
 8011b50:	6023      	str	r3, [r4, #0]
 8011b52:	bd38      	pop	{r3, r4, r5, pc}
 8011b54:	24006578 	.word	0x24006578

08011b58 <__swhatbuf_r>:
 8011b58:	b570      	push	{r4, r5, r6, lr}
 8011b5a:	460e      	mov	r6, r1
 8011b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b60:	2900      	cmp	r1, #0
 8011b62:	b096      	sub	sp, #88	; 0x58
 8011b64:	4614      	mov	r4, r2
 8011b66:	461d      	mov	r5, r3
 8011b68:	da08      	bge.n	8011b7c <__swhatbuf_r+0x24>
 8011b6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	602a      	str	r2, [r5, #0]
 8011b72:	061a      	lsls	r2, r3, #24
 8011b74:	d410      	bmi.n	8011b98 <__swhatbuf_r+0x40>
 8011b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b7a:	e00e      	b.n	8011b9a <__swhatbuf_r+0x42>
 8011b7c:	466a      	mov	r2, sp
 8011b7e:	f000 f8f1 	bl	8011d64 <_fstat_r>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	dbf1      	blt.n	8011b6a <__swhatbuf_r+0x12>
 8011b86:	9a01      	ldr	r2, [sp, #4]
 8011b88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b90:	425a      	negs	r2, r3
 8011b92:	415a      	adcs	r2, r3
 8011b94:	602a      	str	r2, [r5, #0]
 8011b96:	e7ee      	b.n	8011b76 <__swhatbuf_r+0x1e>
 8011b98:	2340      	movs	r3, #64	; 0x40
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	6023      	str	r3, [r4, #0]
 8011b9e:	b016      	add	sp, #88	; 0x58
 8011ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ba4 <__smakebuf_r>:
 8011ba4:	898b      	ldrh	r3, [r1, #12]
 8011ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ba8:	079d      	lsls	r5, r3, #30
 8011baa:	4606      	mov	r6, r0
 8011bac:	460c      	mov	r4, r1
 8011bae:	d507      	bpl.n	8011bc0 <__smakebuf_r+0x1c>
 8011bb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011bb4:	6023      	str	r3, [r4, #0]
 8011bb6:	6123      	str	r3, [r4, #16]
 8011bb8:	2301      	movs	r3, #1
 8011bba:	6163      	str	r3, [r4, #20]
 8011bbc:	b002      	add	sp, #8
 8011bbe:	bd70      	pop	{r4, r5, r6, pc}
 8011bc0:	ab01      	add	r3, sp, #4
 8011bc2:	466a      	mov	r2, sp
 8011bc4:	f7ff ffc8 	bl	8011b58 <__swhatbuf_r>
 8011bc8:	9900      	ldr	r1, [sp, #0]
 8011bca:	4605      	mov	r5, r0
 8011bcc:	4630      	mov	r0, r6
 8011bce:	f7fd f88b 	bl	800ece8 <_malloc_r>
 8011bd2:	b948      	cbnz	r0, 8011be8 <__smakebuf_r+0x44>
 8011bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bd8:	059a      	lsls	r2, r3, #22
 8011bda:	d4ef      	bmi.n	8011bbc <__smakebuf_r+0x18>
 8011bdc:	f023 0303 	bic.w	r3, r3, #3
 8011be0:	f043 0302 	orr.w	r3, r3, #2
 8011be4:	81a3      	strh	r3, [r4, #12]
 8011be6:	e7e3      	b.n	8011bb0 <__smakebuf_r+0xc>
 8011be8:	4b0d      	ldr	r3, [pc, #52]	; (8011c20 <__smakebuf_r+0x7c>)
 8011bea:	62b3      	str	r3, [r6, #40]	; 0x28
 8011bec:	89a3      	ldrh	r3, [r4, #12]
 8011bee:	6020      	str	r0, [r4, #0]
 8011bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bf4:	81a3      	strh	r3, [r4, #12]
 8011bf6:	9b00      	ldr	r3, [sp, #0]
 8011bf8:	6163      	str	r3, [r4, #20]
 8011bfa:	9b01      	ldr	r3, [sp, #4]
 8011bfc:	6120      	str	r0, [r4, #16]
 8011bfe:	b15b      	cbz	r3, 8011c18 <__smakebuf_r+0x74>
 8011c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c04:	4630      	mov	r0, r6
 8011c06:	f000 f8bf 	bl	8011d88 <_isatty_r>
 8011c0a:	b128      	cbz	r0, 8011c18 <__smakebuf_r+0x74>
 8011c0c:	89a3      	ldrh	r3, [r4, #12]
 8011c0e:	f023 0303 	bic.w	r3, r3, #3
 8011c12:	f043 0301 	orr.w	r3, r3, #1
 8011c16:	81a3      	strh	r3, [r4, #12]
 8011c18:	89a0      	ldrh	r0, [r4, #12]
 8011c1a:	4305      	orrs	r5, r0
 8011c1c:	81a5      	strh	r5, [r4, #12]
 8011c1e:	e7cd      	b.n	8011bbc <__smakebuf_r+0x18>
 8011c20:	0800fbd9 	.word	0x0800fbd9

08011c24 <memmove>:
 8011c24:	4288      	cmp	r0, r1
 8011c26:	b510      	push	{r4, lr}
 8011c28:	eb01 0402 	add.w	r4, r1, r2
 8011c2c:	d902      	bls.n	8011c34 <memmove+0x10>
 8011c2e:	4284      	cmp	r4, r0
 8011c30:	4623      	mov	r3, r4
 8011c32:	d807      	bhi.n	8011c44 <memmove+0x20>
 8011c34:	1e43      	subs	r3, r0, #1
 8011c36:	42a1      	cmp	r1, r4
 8011c38:	d008      	beq.n	8011c4c <memmove+0x28>
 8011c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c42:	e7f8      	b.n	8011c36 <memmove+0x12>
 8011c44:	4402      	add	r2, r0
 8011c46:	4601      	mov	r1, r0
 8011c48:	428a      	cmp	r2, r1
 8011c4a:	d100      	bne.n	8011c4e <memmove+0x2a>
 8011c4c:	bd10      	pop	{r4, pc}
 8011c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c56:	e7f7      	b.n	8011c48 <memmove+0x24>

08011c58 <_realloc_r>:
 8011c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5c:	4680      	mov	r8, r0
 8011c5e:	4614      	mov	r4, r2
 8011c60:	460e      	mov	r6, r1
 8011c62:	b921      	cbnz	r1, 8011c6e <_realloc_r+0x16>
 8011c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c68:	4611      	mov	r1, r2
 8011c6a:	f7fd b83d 	b.w	800ece8 <_malloc_r>
 8011c6e:	b92a      	cbnz	r2, 8011c7c <_realloc_r+0x24>
 8011c70:	f7fc ffce 	bl	800ec10 <_free_r>
 8011c74:	4625      	mov	r5, r4
 8011c76:	4628      	mov	r0, r5
 8011c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c7c:	f000 f894 	bl	8011da8 <_malloc_usable_size_r>
 8011c80:	4284      	cmp	r4, r0
 8011c82:	4607      	mov	r7, r0
 8011c84:	d802      	bhi.n	8011c8c <_realloc_r+0x34>
 8011c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011c8a:	d812      	bhi.n	8011cb2 <_realloc_r+0x5a>
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	4640      	mov	r0, r8
 8011c90:	f7fd f82a 	bl	800ece8 <_malloc_r>
 8011c94:	4605      	mov	r5, r0
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d0ed      	beq.n	8011c76 <_realloc_r+0x1e>
 8011c9a:	42bc      	cmp	r4, r7
 8011c9c:	4622      	mov	r2, r4
 8011c9e:	4631      	mov	r1, r6
 8011ca0:	bf28      	it	cs
 8011ca2:	463a      	movcs	r2, r7
 8011ca4:	f7fc ff9e 	bl	800ebe4 <memcpy>
 8011ca8:	4631      	mov	r1, r6
 8011caa:	4640      	mov	r0, r8
 8011cac:	f7fc ffb0 	bl	800ec10 <_free_r>
 8011cb0:	e7e1      	b.n	8011c76 <_realloc_r+0x1e>
 8011cb2:	4635      	mov	r5, r6
 8011cb4:	e7df      	b.n	8011c76 <_realloc_r+0x1e>
	...

08011cb8 <_read_r>:
 8011cb8:	b538      	push	{r3, r4, r5, lr}
 8011cba:	4d07      	ldr	r5, [pc, #28]	; (8011cd8 <_read_r+0x20>)
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	4608      	mov	r0, r1
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	602a      	str	r2, [r5, #0]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	f7f1 fa28 	bl	800311c <_read>
 8011ccc:	1c43      	adds	r3, r0, #1
 8011cce:	d102      	bne.n	8011cd6 <_read_r+0x1e>
 8011cd0:	682b      	ldr	r3, [r5, #0]
 8011cd2:	b103      	cbz	r3, 8011cd6 <_read_r+0x1e>
 8011cd4:	6023      	str	r3, [r4, #0]
 8011cd6:	bd38      	pop	{r3, r4, r5, pc}
 8011cd8:	24006578 	.word	0x24006578

08011cdc <_raise_r>:
 8011cdc:	291f      	cmp	r1, #31
 8011cde:	b538      	push	{r3, r4, r5, lr}
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	460d      	mov	r5, r1
 8011ce4:	d904      	bls.n	8011cf0 <_raise_r+0x14>
 8011ce6:	2316      	movs	r3, #22
 8011ce8:	6003      	str	r3, [r0, #0]
 8011cea:	f04f 30ff 	mov.w	r0, #4294967295
 8011cee:	bd38      	pop	{r3, r4, r5, pc}
 8011cf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011cf2:	b112      	cbz	r2, 8011cfa <_raise_r+0x1e>
 8011cf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cf8:	b94b      	cbnz	r3, 8011d0e <_raise_r+0x32>
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f000 f830 	bl	8011d60 <_getpid_r>
 8011d00:	462a      	mov	r2, r5
 8011d02:	4601      	mov	r1, r0
 8011d04:	4620      	mov	r0, r4
 8011d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d0a:	f000 b817 	b.w	8011d3c <_kill_r>
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d00a      	beq.n	8011d28 <_raise_r+0x4c>
 8011d12:	1c59      	adds	r1, r3, #1
 8011d14:	d103      	bne.n	8011d1e <_raise_r+0x42>
 8011d16:	2316      	movs	r3, #22
 8011d18:	6003      	str	r3, [r0, #0]
 8011d1a:	2001      	movs	r0, #1
 8011d1c:	e7e7      	b.n	8011cee <_raise_r+0x12>
 8011d1e:	2400      	movs	r4, #0
 8011d20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d24:	4628      	mov	r0, r5
 8011d26:	4798      	blx	r3
 8011d28:	2000      	movs	r0, #0
 8011d2a:	e7e0      	b.n	8011cee <_raise_r+0x12>

08011d2c <raise>:
 8011d2c:	4b02      	ldr	r3, [pc, #8]	; (8011d38 <raise+0xc>)
 8011d2e:	4601      	mov	r1, r0
 8011d30:	6818      	ldr	r0, [r3, #0]
 8011d32:	f7ff bfd3 	b.w	8011cdc <_raise_r>
 8011d36:	bf00      	nop
 8011d38:	24003a2c 	.word	0x24003a2c

08011d3c <_kill_r>:
 8011d3c:	b538      	push	{r3, r4, r5, lr}
 8011d3e:	4d07      	ldr	r5, [pc, #28]	; (8011d5c <_kill_r+0x20>)
 8011d40:	2300      	movs	r3, #0
 8011d42:	4604      	mov	r4, r0
 8011d44:	4608      	mov	r0, r1
 8011d46:	4611      	mov	r1, r2
 8011d48:	602b      	str	r3, [r5, #0]
 8011d4a:	f7f1 f9cd 	bl	80030e8 <_kill>
 8011d4e:	1c43      	adds	r3, r0, #1
 8011d50:	d102      	bne.n	8011d58 <_kill_r+0x1c>
 8011d52:	682b      	ldr	r3, [r5, #0]
 8011d54:	b103      	cbz	r3, 8011d58 <_kill_r+0x1c>
 8011d56:	6023      	str	r3, [r4, #0]
 8011d58:	bd38      	pop	{r3, r4, r5, pc}
 8011d5a:	bf00      	nop
 8011d5c:	24006578 	.word	0x24006578

08011d60 <_getpid_r>:
 8011d60:	f7f1 b9ba 	b.w	80030d8 <_getpid>

08011d64 <_fstat_r>:
 8011d64:	b538      	push	{r3, r4, r5, lr}
 8011d66:	4d07      	ldr	r5, [pc, #28]	; (8011d84 <_fstat_r+0x20>)
 8011d68:	2300      	movs	r3, #0
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	4608      	mov	r0, r1
 8011d6e:	4611      	mov	r1, r2
 8011d70:	602b      	str	r3, [r5, #0]
 8011d72:	f7f1 fa18 	bl	80031a6 <_fstat>
 8011d76:	1c43      	adds	r3, r0, #1
 8011d78:	d102      	bne.n	8011d80 <_fstat_r+0x1c>
 8011d7a:	682b      	ldr	r3, [r5, #0]
 8011d7c:	b103      	cbz	r3, 8011d80 <_fstat_r+0x1c>
 8011d7e:	6023      	str	r3, [r4, #0]
 8011d80:	bd38      	pop	{r3, r4, r5, pc}
 8011d82:	bf00      	nop
 8011d84:	24006578 	.word	0x24006578

08011d88 <_isatty_r>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	4d06      	ldr	r5, [pc, #24]	; (8011da4 <_isatty_r+0x1c>)
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	4604      	mov	r4, r0
 8011d90:	4608      	mov	r0, r1
 8011d92:	602b      	str	r3, [r5, #0]
 8011d94:	f7f1 fa17 	bl	80031c6 <_isatty>
 8011d98:	1c43      	adds	r3, r0, #1
 8011d9a:	d102      	bne.n	8011da2 <_isatty_r+0x1a>
 8011d9c:	682b      	ldr	r3, [r5, #0]
 8011d9e:	b103      	cbz	r3, 8011da2 <_isatty_r+0x1a>
 8011da0:	6023      	str	r3, [r4, #0]
 8011da2:	bd38      	pop	{r3, r4, r5, pc}
 8011da4:	24006578 	.word	0x24006578

08011da8 <_malloc_usable_size_r>:
 8011da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dac:	1f18      	subs	r0, r3, #4
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	bfbc      	itt	lt
 8011db2:	580b      	ldrlt	r3, [r1, r0]
 8011db4:	18c0      	addlt	r0, r0, r3
 8011db6:	4770      	bx	lr

08011db8 <_init>:
 8011db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dba:	bf00      	nop
 8011dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dbe:	bc08      	pop	{r3}
 8011dc0:	469e      	mov	lr, r3
 8011dc2:	4770      	bx	lr

08011dc4 <_fini>:
 8011dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc6:	bf00      	nop
 8011dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dca:	bc08      	pop	{r3}
 8011dcc:	469e      	mov	lr, r3
 8011dce:	4770      	bx	lr
